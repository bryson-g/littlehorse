<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>LittleHorse Orchestrator Blog</title>
        <link>https://littlehorse.dev/blog</link>
        <description>LittleHorse Orchestrator Blog</description>
        <lastBuildDate>Tue, 24 Sep 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Integration Patterns: Saga Transactions]]></title>
            <link>https://littlehorse.dev/blog/saga-pattern</link>
            <guid>https://littlehorse.dev/blog/saga-pattern</guid>
            <pubDate>Tue, 24 Sep 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[The Saga pattern allows you to defend against data loss, dropped orders, and confused (or grumpy) customers. While useful, the Saga pattern is tricky to get right without an orchestrator.]]></description>
            <content:encoded><![CDATA[<p>The Saga pattern allows you to defend against data loss, dropped orders, and confused (or grumpy) customers. While useful, the Saga pattern is tricky to get right without an orchestrator.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>This is the first part in a five-part blog series on useful Integration Patterns. This blog series will help you build real-time, responsive applications and microservices that produce predictable results and prevent the Grumpy Customer Problem.</p><ol>
<li><strong>[This Post]</strong> Saga Transactions</li>
<li>[Coming soon] The Outbox Pattern</li>
<li>[Coming soon] Retries and Dead-Letter Queues</li>
<li>[Coming soon] Callbacks and External Events</li>
<li>[Coming soon] Queuing and Backpressure</li>
</ol></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-saga-pattern">The Saga Pattern<a href="https://littlehorse.dev/blog/saga-pattern#the-saga-pattern" class="hash-link" aria-label="Direct link to The Saga Pattern" title="Direct link to The Saga Pattern">​</a></h2>
<p>At a technical level, the <a href="https://microservices.io/patterns/data/saga.html" target="_blank" rel="noopener noreferrer">Saga Pattern</a> allows you to perform distributed transactions across multiple disparate systems without 2-phase commit.</p>
<p>In plain English, it is a tool in the belt of a software engineer to prevent half-fulfilled bank transfers, hanging orders, or other failures which would result in a Grumpy Customer.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>The "Saga" pattern gets its name from literature and film, wherein a "saga" is a series of chronologically-ordered related works. For example, the "Star Wars Saga."</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-cases">Use Cases<a href="https://littlehorse.dev/blog/saga-pattern#use-cases" class="hash-link" aria-label="Direct link to Use Cases" title="Direct link to Use Cases">​</a></h3>
<p>Business processes often need to perform actions in two separate systems either all at once or not at all. For example, you may need to charge a customer's credit card, reserve inventory, and ship an item to the customer all at once or not at all. If the payment went through but shipping failed, we would see the Grumpy Customer Problem yet again.</p>
<p>The Saga pattern is appropriate when:</p>
<ul>
<li>A business process must take action across multiple separate systems (legacy monoliths, microservices, external API's, etc),</li>
<li>Each of those actions can be undone via a "compensation task", and</li>
<li>All actions must logically happen together or not at all.</li>
</ul>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>It's also worth noting that a different flavor of the Saga pattern can also be used in <em>long-running</em> business processes. In a past job, for example, I worked on a project that implemented the Saga pattern to handle the scheduling of home inspections. In this case, the task of finding an inspector to show up at the home and confirming a time with the homeowner needed to be performed atomically.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="implementation">Implementation<a href="https://littlehorse.dev/blog/saga-pattern#implementation" class="hash-link" aria-label="Direct link to Implementation" title="Direct link to Implementation">​</a></h3>
<p>While Saga is very hard to implement, it's simple to describe:</p>
<ul>
<li>Try to perform the actions across the multiple systems.</li>
<li>If one of the actions fails, then run a <em>compensation</em> for all previously-executed tasks.</li>
</ul>
<p>The <em>compensation</em> is simply an action that "undoes" the previous action. For example, the compensation for a payment task might be to issue a refund.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="case-study-order-processing">Case Study: Order Processing<a href="https://littlehorse.dev/blog/saga-pattern#case-study-order-processing" class="hash-link" aria-label="Direct link to Case Study: Order Processing" title="Direct link to Case Study: Order Processing">​</a></h2>
<p>Let's take a look at a familiar use-case: an order processing workflow involving the <code>inventory</code> service, and the <code>payments</code> service. (The <code>orders</code> service is involved implicitly.) As they would in a real world scenario, all of our services live on separate physical systems and have their own databases.</p>
<p>In this business process, we first reserve inventory for the ordered item. Next, we charge the customer's credit card.</p>
<p>If charging the credit card fails, then we have a problem: we've reserved inventory but not sold it.</p>
<p>Our services need the following functionality. In SOA, these would be endpoints; in LittleHorse, they would be <code>TaskDef</code>s:</p>
<ul>
<li><code>create-order</code>: creates an order in the <code>PENDING</code> status.</li>
<li><code>reserve-inventory</code>: marks an item as no longer available for sale.</li>
<li><code>charge-payment</code>: charges the customer.</li>
<li><code>release-inventory</code>: marks an item as available for sale again.</li>
<li><code>cancel-order</code>: marks an order as <code>CANCELED</code>.</li>
<li><code>complete-order</code>: marks an order as <code>COMPLETED</code>.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="using-message-queues">Using Message Queues<a href="https://littlehorse.dev/blog/saga-pattern#using-message-queues" class="hash-link" aria-label="Direct link to Using Message Queues" title="Direct link to Using Message Queues">​</a></h3>
<p>Using message queues, the happy path looks like the following:</p>
<p><img decoding="async" loading="lazy" alt="Architecture diagram" src="https://littlehorse.dev/assets/images/2024-09-24-choreography-simple-830e1fcf682eb3cde8b40210f92b3dd2.png" width="544" height="493" class="img_ev3q"></p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The above image assumes the <em>choreography</em> pattern, in contrast to the <em>orchestrator</em> pattern. The orchestrator pattern is a ton of work and involves writing something that very much resembles LittleHorse!</p></div></div>
<ol>
<li>Orders service calls <code>createOrder()</code>.</li>
<li>Orders service publishes to the <code>reserve-inventory</code> queue.</li>
<li>Inventory service reads the message and calls <code>reserveInventory()</code>.</li>
<li>Inventory service publishes to the <code>charge-payment</code> queue.</li>
<li>Payment service charges the credit card.</li>
<li>Payment service publishes to the <code>complete-order</code> queue.</li>
<li>Orders service consumes the record and calls <code>completeOrder()</code>.</li>
</ol>
<p>In just the happy path, we have strong coupling already between our services in three places, and we have three message queues to manage.</p>
<p>But now we need to release the inventory and cancel the order when the payment doesn't go through. So the flow looks like this:</p>
<p><img decoding="async" loading="lazy" alt="Architecture Diagram" src="https://littlehorse.dev/assets/images/2024-09-24-choreography-saga-b400a44518ce7213d491df50bad0bb72.png" width="712" height="493" class="img_ev3q"></p>
<ol>
<li>Orders service calls <code>createOrder()</code>.</li>
<li>Orders service publishes to the <code>reserve-inventory</code> queue.</li>
<li>Inventory service reads the message and calls <code>reserveInventory()</code>.</li>
<li>Inventory service publishes to the <code>charge-payment</code> queue.</li>
<li>Payment service charges the credit card <em>unsuccessfully</em>.</li>
<li>Payment service publishes to the <code>release-inventory</code> queue.</li>
<li>Inventory service reads the record and calls <code>releaseInventory()</code>.</li>
<li>Inventory service publishes to the <code>cancel-order</code> queue.</li>
<li>Orders service consumes the record and calls <code>cancelOrder()</code>.</li>
</ol>
<p>Now, we have <em>five</em> different message queues that we have to wrangle with. We can also see that the overall business flow has started to leak across all of our different services.</p>
<div class="theme-admonition theme-admonition-danger admonition_xJq3 alert alert--danger"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></span>danger</div><div class="admonitionContent_BuS1"><p>One thing we are ignoring in this blog post is <em>reliability</em>: to make this setup production-ready, we would also have to ensure that updates to the internal databases of the services are atomic along with pushing messages to the message queue. We will cover that in next week's post (along with how LittleHorse takes care of that for you).</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="using-littlehorse">Using LittleHorse<a href="https://littlehorse.dev/blog/saga-pattern#using-littlehorse" class="hash-link" aria-label="Direct link to Using LittleHorse" title="Direct link to Using LittleHorse">​</a></h3>
<p>Using LittleHorse, in java, this whole workflow could look like the following. This is <em>real code</em> that does indeed compile and replaces the need for all of the complex queueing logic we had above.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">sagaExample</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">WorkflowThread</span><span class="token plain"> wf</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> item </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addVariable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"item"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">STR</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> customer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addVariable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"customer"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">STR</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> price </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addVariable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"price"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">DOUBLE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> orderId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addVariable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"order-id"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">STR</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">execute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"create-order"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> orderId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">execute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"reserve-inventory"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> item</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> orderId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">NodeOutput</span><span class="token plain"> paymentResult </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">execute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"charge-payment"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> customer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> price</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Saga here!!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">handleException</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"credit-card-declined"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> handler </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        handler</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">execute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"release-inventory"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> item</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> orderId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        handler</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">execute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"cancel-order"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> orderId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        handler</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">fail</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"credit-card-declined"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Credit card was declined. Order canceled!"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">execute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"complete-order"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> orderId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Instead of managing five message queues and five strongly-coupled integration points between microservices, all we need to do is register the workflow, define <em>truly</em> modular tasks, and let LittleHorse take care of the rest.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="wrapping-up">Wrapping Up<a href="https://littlehorse.dev/blog/saga-pattern#wrapping-up" class="hash-link" aria-label="Direct link to Wrapping Up" title="Direct link to Wrapping Up">​</a></h2>
<p>The Saga Pattern is one of five tools we will cover in this series on avoiding the Grumpy Customer Problem. It's simple to understand but <em>painfully complex</em> to implement. Fortunately, LittleHorse makes it easier!</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>A careful reader, or anyone who <a href="https://www.linkedin.com/feed/update/urn:li:activity:7244572885179121664/" target="_blank" rel="noopener noreferrer">reads my rants on LinkedIn</a>, might note that in order to make the order processing workflow truly reliable, we would also need to do something like the Outbox pattern or Event Sourcing.</p><p>That is true, and we'll cover it in the next post (and you'll see how LittleHorse does that for you automatically!).</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="get-involved">Get Involved!<a href="https://littlehorse.dev/blog/saga-pattern#get-involved" class="hash-link" aria-label="Direct link to Get Involved!" title="Direct link to Get Involved!">​</a></h3>
<p>Stay tuned for the next post on the Transactional Outbox Pattern! In the meantime:</p>
<ul>
<li>Try out our <a href="https://littlehorse.dev/docs/developer-guide/install" target="_blank" rel="noopener noreferrer">Quickstarts</a></li>
<li>Join us <a href="https://launchpass.com/littlehorsecommunity" target="_blank" rel="noopener noreferrer">on Slack</a></li>
<li>Give us a star <a href="https://github.com/littlehorse-enterprises/littlehorse" target="_blank" rel="noopener noreferrer">on GitHub</a>!</li>
</ul>]]></content:encoded>
            <category>Technical Analysis</category>
        </item>
        <item>
            <title><![CDATA[The Basics of Workflow]]></title>
            <link>https://littlehorse.dev/blog/basics-of-workflow</link>
            <guid>https://littlehorse.dev/blog/basics-of-workflow</guid>
            <pubDate>Wed, 04 Sep 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[LittleHorse Enterprises is a workflow engine company. But what is a workflow engine?]]></description>
            <content:encoded><![CDATA[<p>LittleHorse Enterprises is a workflow engine company. But what is a workflow engine?</p>
<p>It is a system that allows you to reliably execute a series of steps while being robust to technical failures (network outages, crashes) and business process failures. A step in a workflow can be calling a piece of code on a server, reaching out to an external API, waiting for a callback from a person or external system, or more.</p>
<p>A core challenge when automating a business process is <strong>Failure and Exception Handling:</strong> figuring out what to do when something doesn't happen, happens with an unexpected outcome, or plain simply fails. This is often difficult to reason about, leaving your applications vulnerable to uncaught exceptions, incomplete business workflows, or data loss.</p>
<p>A workflow engine standardizes how to throw an exception, where the exception is logged, and the logic around when/how to retry. This gives you peace of mind that once a workflow run is started, it will reliably complete.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="workflow-architecture">Workflow Architecture<a href="https://littlehorse.dev/blog/basics-of-workflow#workflow-architecture" class="hash-link" aria-label="Direct link to Workflow Architecture" title="Direct link to Workflow Architecture">​</a></h2>
<p>Any <a href="https://littlehorse.dev/docs/concepts" target="_blank" rel="noopener noreferrer">workflow-driven application</a> has three components:</p>
<ol>
<li>A really awesome workflow engine like LittleHorse.</li>
<li>A <a href="https://littlehorse.dev/docs/concepts/workflows" target="_blank" rel="noopener noreferrer">Workflow Specification</a>, which defines the series of steps in your application.</li>
<li><a href="https://littlehorse.dev/docs/concepts/tasks" target="_blank" rel="noopener noreferrer">Task Workers</a>, which are computer programs that execute work when the LH Server tells it to.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="workflow-specifications">Workflow Specifications<a href="https://littlehorse.dev/blog/basics-of-workflow#workflow-specifications" class="hash-link" aria-label="Direct link to Workflow Specifications" title="Direct link to Workflow Specifications">​</a></h3>
<p>A Workflow Specification (or <code>WfSpec</code> in LittleHorse) is the configuration, or metadata object, that tells the engine what Tasks to run,
what order to run the tasks, <strong>how to handle exceptions or failures,</strong> what variables are to be passed from task to task, and what inputs and outputs are required to run the workflow.</p>
<p>In LittleHorse the <code>WfSpec</code> is submitted to and held by the LittleHorse server. Users of LittleHorse can define a <code>WfSpec</code> in vanilla code (Java/Go/Python) using the LittleHorse SDK. The SDK will compile your vanilla code into a <code>WfSpec</code> that the LH Server understands and keeps inside its data store.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>To learn how to write a <code>WfSpec</code> in LittleHorse, check out our <a href="https://littlehorse.dev/docs/developer-guide/wfspec-development" target="_blank" rel="noopener noreferrer"><code>WfSpec</code> Development docs</a>.</p></div></div>
<p>In the background LittleHorse server takes the submitted spec from the SDK, and compiles a protobuf object that is submitted to the LittleHorse server.</p>
<p>For example, the following code in Java defines a two-step workflow in which we look up the price of an item, charge a customer's credit card, and then ship an item.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ECommerceWorkflow</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">checkoutWorkflow</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">WorkflowThread</span><span class="token plain"> wf</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Create some Workflow Variables</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> customerId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addVariable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"customer-id"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">VariableType</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">STR</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">searchable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">required</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> itemId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addVariable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"item-id"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">VariableType</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">STR</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">required</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> price </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addVariable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"price"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">VariableType</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">INT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Fetch Price and save it into a variable</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> priceOutput </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">execute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"calculate-price"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> itemId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">mutate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">price</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">VariableMutationType</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">ASSIGN</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> priceOutput</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Charge credit card (passing in the output from previous task)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">execute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"charge-credit-card"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> customerId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> price</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Ship item</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        wf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">execute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"ship-item"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> customerId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> itemId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Just by using LittleHorse to define the above workflow, you get reliability, observability, retries, and governance out of the box!</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tasks-and-task-workers">Tasks and Task Workers<a href="https://littlehorse.dev/blog/basics-of-workflow#tasks-and-task-workers" class="hash-link" aria-label="Direct link to Tasks and Task Workers" title="Direct link to Tasks and Task Workers">​</a></h3>
<p>Tasks are the unit of work that can be executed a workflow engine. It's best to think in examples:</p>
<ul>
<li>Change lower case letters to upper case letters.</li>
<li>Call an API with an input variable and pass along the output.</li>
<li>Fetch data from a database.</li>
<li>Convert a message from HL7 version 2.5 to HL7 version 3.</li>
</ul>
<p>Task workers are programs that use the LittleHorse SDK, connect to LittleHorse, and execute tasks when the workflow says it's time to do so.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>To learn how to write a Task Worker, check out our <a href="https://littlehorse.dev/docs/developer-guide/task-worker-development" target="_blank" rel="noopener noreferrer">Task Worker Development Guide</a>.</p></div></div>
<p>You can also use <a href="https://littlehorse.dev/docs/concepts/external-events" target="_blank" rel="noopener noreferrer">External Events</a> or <a href="https://littlehorse.dev/docs/concepts/user-tasks" target="_blank" rel="noopener noreferrer">User Tasks</a> to wait for input from a human user or an external system (like a callback or webhook).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="workflow-clients">Workflow Clients<a href="https://littlehorse.dev/blog/basics-of-workflow#workflow-clients" class="hash-link" aria-label="Direct link to Workflow Clients" title="Direct link to Workflow Clients">​</a></h3>
<p>Lastly you need to tell LittleHorse when to run a workflow. You can do it with our CLI (<code>lhctl</code>) but in production you'll need to use the LittleHorse SDK to kick off a workflow. You can do this with our page on <a href="https://littlehorse.dev/docs/developer-guide/grpc/running-workflows" target="_blank" rel="noopener noreferrer">Running Workflows using grpc</a></p>
<p>You'll also need to tell LittleHorse about External Events that happen. You can also do this using <code>lhctl</code> or <a href="https://littlehorse.dev/docs/developer-guide/grpc/posting-external-events" target="_blank" rel="noopener noreferrer">with our SDK's</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="littlehorse-use-cases">LittleHorse Use-Cases<a href="https://littlehorse.dev/blog/basics-of-workflow#littlehorse-use-cases" class="hash-link" aria-label="Direct link to LittleHorse Use-Cases" title="Direct link to LittleHorse Use-Cases">​</a></h2>
<p>There are many different types of workflow engines, each of which supports different use-cases. For example:</p>
<ul>
<li><strong>Batch ETL and Cronjob</strong> workflows are automated by systems like Apache Airflow and Dagster.</li>
<li><strong>Infrastructure Provisioning and Configuration</strong> workflows can be automated by Ansible, Argo, and Jenkins.</li>
<li><strong>IT Integration and BPM</strong> workflows may be automated by systems like Camunda and jBPM.</li>
</ul>
<p>However, <strong>LittleHorse allows you to orchestrate business processes across your software systems.</strong> Some use-cases are included below.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="microservices">Microservices<a href="https://littlehorse.dev/blog/basics-of-workflow#microservices" class="hash-link" aria-label="Direct link to Microservices" title="Direct link to Microservices">​</a></h3>
<p>All microservice-based applications are inherently distributed systems with the goal of supporting some business process (because no one writes microservices for the sake of writing code, right?). While often necessary, microservices <a href="https://littlehorse.dev/blog/challenge-of-microservices" target="_blank" rel="noopener noreferrer">present many challenges</a> to developers due to their distributed nature.</p>
<p>Our founder Colt McNealy wrote a <a href="https://littlehorse.dev/blog/microservices-and-workflow" target="_blank" rel="noopener noreferrer">detailed blog</a> about how a workflow engine's reliabile state management and oversight can mitigate some of the problems inherent in microservices. Check it out!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="human-in-the-loop">Human-in-the-Loop<a href="https://littlehorse.dev/blog/basics-of-workflow#human-in-the-loop" class="hash-link" aria-label="Direct link to Human-in-the-Loop" title="Direct link to Human-in-the-Loop">​</a></h3>
<p>Workflows often need to get input from humans:</p>
<ul>
<li>Approval flows.</li>
<li>Waiting for information from customers.</li>
<li>Handling exceptional scenarios.</li>
</ul>
<p>That's hard to coordinate without a workflow engine. You'd have to build your own state management system that correlates tasks to workflows. LittleHorse <a href="https://littlehorse.dev/docs/concepts/user-tasks" target="_blank" rel="noopener noreferrer">User Tasks</a> make this much easier.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="rag-and-ai">RAG and AI<a href="https://littlehorse.dev/blog/basics-of-workflow#rag-and-ai" class="hash-link" aria-label="Direct link to RAG and AI" title="Direct link to RAG and AI">​</a></h3>
<p>AI is only useful when you call it at the right time, with the right inputs, and do something with the outputs. That's a workflow. And all sorts of things can go wrong when using LLM's, which is why you need to have a robust workflow engine to provide oversight and exception handling.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="legacy-system-modernization">Legacy System Modernization<a href="https://littlehorse.dev/blog/basics-of-workflow#legacy-system-modernization" class="hash-link" aria-label="Direct link to Legacy System Modernization" title="Direct link to Legacy System Modernization">​</a></h3>
<p>Whether you are integrating legacy systems that you inherited from the past, or integrating multiple tech stacks accrued through M&amp;A, your customers expect a real-time experience that seamlessly spans all of your systems. Workflow engines are useful for reliably orchestrating actions and moving data across multiple different systems.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="api-gateway">API gateway<a href="https://littlehorse.dev/blog/basics-of-workflow#api-gateway" class="hash-link" aria-label="Direct link to API gateway" title="Direct link to API gateway">​</a></h3>
<p>If we look at the properties of an API gateway and how they are used, a workflow engine makes sense.</p>
<p>The usage of an API gateway is to have a single layer that abstracts further endpoints.<br>
<!-- -->In practice this most often means calling the same API gateway multiple times, receiving the requested data, and doing some date manipulation or calculations at the application layer.
A workflow engine performs all of the most common actions, and includes things like centralized security, possible data obscurity, failure handling, observability and allows for operators to scale compute.
All while still maintaining a central plane that can be shared across an entire orginization.<br>
<!-- -->Additionally a workflow engine still allows for the standard CRUD(Create, Read, Update, Delete) operations that an API gateway provides.</p>]]></content:encoded>
            <category>Technical Analysis</category>
            <category>LittleHorse Orchestrator</category>
        </item>
        <item>
            <title><![CDATA[Microservices and Workflow: A Match Made in Heaven]]></title>
            <link>https://littlehorse.dev/blog/microservices-and-workflow</link>
            <guid>https://littlehorse.dev/blog/microservices-and-workflow</guid>
            <pubDate>Mon, 02 Sep 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[While they are often necessary, microservices are a headache. Fortunately, the right workflow engine (such as LittleHorse) can drastically reduce the difficulty of managing microservices.]]></description>
            <content:encoded><![CDATA[<p>While they are often necessary, microservices are a headache. Fortunately, the right workflow engine (such as LittleHorse) can drastically reduce the difficulty of managing microservices.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>This is the third and final part of a 3-part blog series:</p><ol>
<li><a href="https://littlehorse.dev/blog/promise-of-microservices">The Promise of Microservices</a></li>
<li><a href="https://littlehorse.dev/blog/challenge-of-microservices">The Challenge with Microservices</a></li>
<li><strong>[This Post]</strong> Workflow and Microservices: A Match Made in Heaven</li>
</ol></div></div>
<p>If you're just joining for the third blog post, we have so far established that microservices are an effective tool for allowing your engineering team to grow beyond just a handful of people working on an enterprise application. However, microservice systems are by nature <a href="https://littlehorse.dev/blog/challenge-of-microservices#microservices-are-leaderless"><strong>Leaderless</strong></a> and <a href="https://littlehorse.dev/blog/challenge-of-microservices#microservices-are-distributed"><strong>Distributed</strong></a>, which yields challenges in:</p>
<ul>
<li><a href="https://littlehorse.dev/blog/challenge-of-microservices#observability"><strong>Observability</strong></a>,</li>
<li><a href="https://littlehorse.dev/blog/challenge-of-microservices#reliability-and-correctness"><strong>Reliability</strong></a>, and</li>
<li><a href="https://littlehorse.dev/blog/challenge-of-microservices#microservice-coupling"><strong>Complexity Management</strong></a>.</li>
</ul>
<p>Those challenges inspired me to create <a href="https://littlehorse.dev/docs/concepts" target="_blank" rel="noopener noreferrer">LittleHorse</a> in the fall of 2021. LittleHorse provides primitives and guardrails out of the box which make it easier to wrangle with distributed systems and coordinate processes/transactions across multiple microservices.</p>
<p>In this post, we'll discuss:</p>
<ol>
<li>What <em>workflow</em> means.</li>
<li>How LittleHorse's workflow orchestration capabilities make it easier for you to reliably orchestrate complex business processes.</li>
</ol>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>Want to give LittleHorse a try? Get in touch with us!</p><ul>
<li>Join the <a href="https://launchpass.com/littlehorsecommunity" target="_blank" rel="noopener noreferrer"><strong>LH Slack Community</strong></a> for the latest news and help from community experts.</li>
<li>Check out our <a href="https://littlehorse.dev/docs/developer-guide/install" target="_blank" rel="noopener noreferrer"><strong>Getting Started</strong></a> page.</li>
<li><a href="https://docs.google.com/forms/d/e/1FAIpQLScXVvTYy4LQnYoFoRKRQ7ppuxe0KgncsDukvm96qKN0pU5TnQ/viewform" target="_blank" rel="noopener noreferrer"><strong>Say hello</strong></a> if you'd like to get in touch with someone from the LittleHorse Enterprises team.</li>
</ul></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-a-workflow">What is a Workflow?<a href="https://littlehorse.dev/blog/microservices-and-workflow#what-is-a-workflow" class="hash-link" aria-label="Direct link to What is a Workflow?" title="Direct link to What is a Workflow?">​</a></h2>
<p>A workflow is a blueprint that defines a series of tasks to be performed (perhaps conditioned on certain inputs or external events) in order to achieve a business outcome.</p>
<p>If you recall the e-commerce example from the <a href="https://littlehorse.dev/blog/challenge-of-microservices#the-nature-of-microservices">previous blog post</a>, you can think of the abstract checkout process as a workflow. This example is interesting because it demonstrates multiple characteristics of common business processes that make microservice development hard.</p>
<p><img decoding="async" loading="lazy" alt="E-Commerce Checkout Process Diagram" src="https://littlehorse.dev/assets/images/2024-08-27-complex-checkout-915172cb1dfafc0a3e9a7cc0b042ac3a.png" width="1472" height="406" class="img_ev3q"></p>
<p>First, a workflow can be <em>mission critical</em>. A customer would be very unhappy if the vendor charged their credit card but failed to ship their order. In technical terms, this means that the state of a workflow needs to be consistent and durable, which is hard to achieve in a distributed system.</p>
<p>Next, a workflow can have exceptional cases. Our e-commerce flow has special logic to handle cases when the customer's credit card was invalid or when the ordered item was out of stock.</p>
<p>Finally, a workflow can be <em>asynchronous</em>, meaning that it requires waiting for input from the external world in order to complete. For example, our e-commerce workflow sometimes must wait for a customer to update their credit card information before completing.</p>
<p>The mission-critical nature of workflows, combined with asynchronous events and exceptional cases, places a premium on <em>consistency.</em> The results of workflows must be predictable for customers and easy to reason about for business managers and software engineers.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>A technical or business process does not need to satisfy all three characteristics to be a "workflow." In fact, simple processes with just one or two linear steps can benefit from a workflow engine.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="workflow-engines">Workflow Engines<a href="https://littlehorse.dev/blog/microservices-and-workflow#workflow-engines" class="hash-link" aria-label="Direct link to Workflow Engines" title="Direct link to Workflow Engines">​</a></h3>
<p>A workflow engine is a software system that makes sure the trains run on time in your processes. To use a workflow engine, you must:</p>
<ol>
<li><strong>Define your Tasks</strong>, which are units of work that can be executed in a workflow, and write <a href="https://littlehorse.dev/docs/concepts/tasks" target="_blank" rel="noopener noreferrer">Task Workers</a> which implement small functions or methods in code to execute those tasks.</li>
<li><strong>Register a Workflow Specification</strong> (we call it a <a href="https://littlehorse.dev/docs/concepts/workflows" target="_blank" rel="noopener noreferrer"><code>WfSpec</code> in LittleHorse</a>) which specifies what tasks to execute and when.</li>
<li><strong>Run your workflow</strong> so that the workflow engine can orchestrate the process to completion.</li>
</ol>
<p><img decoding="async" loading="lazy" alt="LittleHorse Architecture" src="https://littlehorse.dev/assets/images/2024-08-28-lh-application-8847f083fce679fe41abec88d4375125.png" width="1846" height="1019" class="img_ev3q"></p>
<p><a href="https://littlehorse.dev/docs/developer-guide/task-worker-development" target="_blank" rel="noopener noreferrer">Task Workers</a> are where a workflow can interface with the outside world. Since a Task in a workflow results in the LittleHorse SDK calling a programming function/method of your choosing, Task Workers allow LittleHorse to integrate with any system. Task Workers can make database queries, call external API's, provision infrastructure on AWS, send push notifications to customer mobile apps, perform calculations, call an LLM API, and more.</p>
<p>In LittleHorse, the <code>WfSpec</code> is <a href="https://littlehorse.dev/docs/developer-guide/wfspec-development" target="_blank" rel="noopener noreferrer">defined in code</a> in a language of your choice. Because LittleHorse was written with developers in mind, our DSL's have all of the primitives that you'd expect in a programming language: variables, control flow, exception handling, child threads, interrupts, and awaiting for external events. This allows workflows to be:</p>
<ul>
<li>Easy to reason about.</li>
<li>Tracked in version control.</li>
<li>Familiar and easy to learn.</li>
</ul>
<p>Once you tell LittleHorse to <a href="https://littlehorse.dev/docs/developer-guide/grpc/running-workflows" target="_blank" rel="noopener noreferrer">run an instance of your <code>WfSpec</code></a>, LittleHorse will oversee the entire process until it completes. Failed tasks will be retried, every step will be journaled, and the state of your processes will be safely and durably persisted while waiting for external triggers.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-workflow">Why Workflow?<a href="https://littlehorse.dev/blog/microservices-and-workflow#why-workflow" class="hash-link" aria-label="Direct link to Why Workflow?" title="Direct link to Why Workflow?">​</a></h2>
<p>Microservice applications that are designed as distributed workflows without a workflow engine (like a chain of dominoes falling) present operational challenges because there is no "leader" providing oversight over the microservice processes. Thankfully, a developer-focused and horizontally-scalable workflow engine like LittleHorse can fill the "leader" role, thus providing oversight and reliability, and taming the complexity of your business processes.</p>
<p>Additionally, using a workflow engine allows you to develop a set of <em>reusable</em> and <em>modular</em> tasks which can be easily dropped into any business workflow with a common API. Rather than accumulating tech debt, workflow engines allow you to accumulate a set of useful lego bricks.</p>
<p>In most existing organizations there's a long list of API calls required to simply <em>run</em> a workflow.  Training engineers to use all of the new APIs while securely distributing access and permissions causes confusion and slow development cycles.  Workflow engines provide a single API and single system that allows anyone to securely manage, run, and operate complex workflows.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="mission-critical-oversight">Mission Critical Oversight<a href="https://littlehorse.dev/blog/microservices-and-workflow#mission-critical-oversight" class="hash-link" aria-label="Direct link to Mission Critical Oversight" title="Direct link to Mission Critical Oversight">​</a></h3>
<p>Mission critical business workflows leave no room for technical failures and outages. However, as we discussed <a href="https://littlehorse.dev/blog/challenge-of-microservices#reliability-and-correctness">last week</a>, the distributed nature of microservices means that technical failures are not likely but rather certain. LittleHorse provides retries and durable execution capabilities out of the box, removing the need to create complex infrastructure for cross-service transactions (such as dead-letter queues, Outbox tables, and the SAGA pattern).</p>
<p>Additionally, mission-critical processes must be <em>audited</em> and <em>observed</em> in a secure manner with proper access controls. LittleHorse supports this—every step in a workflow is journaled, auditable, and searchable in our dashboard. When humans execute <a href="https://littlehorse.dev/docs/concepts/user-tasks" target="_blank" rel="noopener noreferrer">User Tasks</a>, you can view an audit trail of when and to whom it was assigned and executed; you can see when each <code>TaskRun</code> started, completed, and failed (and with what inputs). Our <a href="https://littlehorse.dev/docs/concepts/principals-and-tenants" target="_blank" rel="noopener noreferrer">ACL's and Multi-Tenancy</a> capabilities (and "Masked Data") ensure that the data remains accessible only to those who must see it.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="simple-asynchronous-processing">Simple Asynchronous Processing<a href="https://littlehorse.dev/blog/microservices-and-workflow#simple-asynchronous-processing" class="hash-link" aria-label="Direct link to Simple Asynchronous Processing" title="Direct link to Simple Asynchronous Processing">​</a></h3>
<p>For microservice developers, handling asynchronous business processes is challenging because it forces you to persist state, correlate events, and wire together callbacks into a non-linear flow. Developers often need to create database tables for ongoing transactions and maintain complex flow diagrams showing how different services integrate with business events.</p>
<p>However, LittleHorse provides two primitives to simplify this process:</p>
<ol>
<li><a href="https://littlehorse.dev/docs/concepts/external-events" target="_blank" rel="noopener noreferrer"><strong>External Events</strong></a> allow workflows to block until something happens in the outside world, and then resume processing immediately thereafter.</li>
<li><a href="https://littlehorse.dev/docs/concepts/user-tasks" target="_blank" rel="noopener noreferrer"><strong>User Tasks</strong></a> are like External Events but they model getting input from humans. User Tasks support reminders, assignment, groups, and users.</li>
</ol>
<p>Together, User Tasks and External Events allow developers to transform complex asynchronous flows (such as our e-commerce example when we wait for a customer to provide a new credit card) into a more manageable linear flow.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="exception-handling">Exception Handling<a href="https://littlehorse.dev/blog/microservices-and-workflow#exception-handling" class="hash-link" aria-label="Direct link to Exception Handling" title="Direct link to Exception Handling">​</a></h3>
<p>Finally, just as processes can fail at the technical level, they can also fail at the business level. As per our ongoing e-commerce example, cards can run out of funds, items go out of stock, customers can cancel orders while they are being processed.</p>
<p>Handling any given exceptional case in a business workflow might involve actions in several different microservices. Without a workflow engine, therefore, each exceptional case results in more and more complex interdependencies in your microservices, creating the notoriously feared "Distributed Monolith."</p>
<p>In contrast, with LittleHorse as your workflow orchestrator, the dependencies between microservices are mitigated and workflow concepts such as <a href="https://littlehorse.dev/docs/concepts/workflows#failure-handling" target="_blank" rel="noopener noreferrer">Failure Handling</a> allow you to easily define rollbacks, SAGA patterns, and edge cases without introducing further accidental complexity into your microservices. This allows startups and enterprises alike to implement robust, enterprise-grade business applications without accumulating costly technical debt.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://littlehorse.dev/blog/microservices-and-workflow#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>For a variety of reasons, startups and enterprises alike may need to work with microservices despite the challenges they bring. Thankfully, workflow engines like LittleHorse can mitigate those problems by providing oversight into your entire process.</p>
<p>At the LittleHorse Council, we are very excited about the upcoming 1.0 release. Over the next few weeks, we will:</p>
<ul>
<li>Complete additional load tests, chaos tests, and benchmarks in preparation for 1.0.</li>
<li>Blog about how you can write an e-commerce workflow in LittleHorse with Python.</li>
<li>Do final testing before we release!</li>
</ul>
<p>And if you enjoyed this post, give us a star <a href="https://github.com/littlehorse-enterprises/littlehorse" target="_blank" rel="noopener noreferrer">on GitHub</a> and try out <a href="https://littlehorse.dev/docs/developer-guide/install" target="_blank" rel="noopener noreferrer">our quickstarts</a> to get going with LittleHorse in under 5 minutes.</p>]]></content:encoded>
            <category>Technical Analysis</category>
        </item>
        <item>
            <title><![CDATA[Releasing 0.11]]></title>
            <link>https://littlehorse.dev/blog/littlehorse-0.11-release</link>
            <guid>https://littlehorse.dev/blog/littlehorse-0.11-release</guid>
            <pubDate>Sat, 31 Aug 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Releasing LittleHorse `0.11`]]></description>
            <content:encoded><![CDATA[<p>The <code>0.11</code> release brings with it the ability to schedule workflows on a cron job, support for secret data, and various dashboard and SDK improvements. </p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="new-features">New Features<a href="https://littlehorse.dev/blog/littlehorse-0.11-release#new-features" class="hash-link" aria-label="Direct link to New Features" title="Direct link to New Features">​</a></h2>
<p>In addition to several new features, it's worth calling out that we upgraded the internal <code>org.apache.kafka:kafka-streams</code> dependency to <code>3.8.0</code>, which includes several crucial bug fixes (some of which were found by our Grumpy Maintainer, <a href="https://github.com/eduwercamacaro" target="_blank" rel="noopener noreferrer">Eduwer Camacaro</a>).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dashboard">Dashboard<a href="https://littlehorse.dev/blog/littlehorse-0.11-release#dashboard" class="hash-link" aria-label="Direct link to Dashboard" title="Direct link to Dashboard">​</a></h3>
<p>The Dashboard saw several enhancements, the most important of which is the <code>ExternalEventDef</code> page, which allows users to view <code>ExternalEvent</code>s associated with an <code>ExternalEventDef</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scheduled-workflows">Scheduled Workflows<a href="https://littlehorse.dev/blog/littlehorse-0.11-release#scheduled-workflows" class="hash-link" aria-label="Direct link to Scheduled Workflows" title="Direct link to Scheduled Workflows">​</a></h3>
<p>The <code>ScheduledWfRun</code> feature creates a schedule that runs a <code>WfSpec</code> on a cron schedule. This is useful for periodic background tasks.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="secret-variables">Secret Variables<a href="https://littlehorse.dev/blog/littlehorse-0.11-release#secret-variables" class="hash-link" aria-label="Direct link to Secret Variables" title="Direct link to Secret Variables">​</a></h3>
<p>As of LittleHorse <code>0.11</code>, you may now mark a variable as <code>masked()</code>, which means that its value is obscured on the Dashboard and also via <code>lhctl get variable</code>.</p>
<p>To make a variable Masked, you can do the following:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">WfRunVariable myVar = wf.addVariable("my-var", STR).masked();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We will also release a blog about this feature soon.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="saving-user-task-progress">Saving User Task Progress<a href="https://littlehorse.dev/blog/littlehorse-0.11-release#saving-user-task-progress" class="hash-link" aria-label="Direct link to Saving User Task Progress" title="Direct link to Saving User Task Progress">​</a></h3>
<p>With the <code>rpc SaveUserTaskRun</code>, it is now possible to save the results of a <code>UserTaskRun</code> without completing it. When you do this, an <code>event</code> is added to the audit log showing who saved the <code>UserTaskRun</code> and what results were saved.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="release-notes-and-artifacts">Release Notes and Artifacts<a href="https://littlehorse.dev/blog/littlehorse-0.11-release#release-notes-and-artifacts" class="hash-link" aria-label="Direct link to Release Notes and Artifacts" title="Direct link to Release Notes and Artifacts">​</a></h2>
<p>You can find the release notes and downloads on our GitHub page.</p>
<ul>
<li><a href="https://github.com/littlehorse-enterprises/littlehorse/releases/tag/v0.11.2" target="_blank" rel="noopener noreferrer"><strong><code>0.11.2</code></strong></a></li>
<li><a href="https://github.com/littlehorse-enterprises/littlehorse/releases/tag/v0.11.2" target="_blank" rel="noopener noreferrer"><strong><code>0.11.1</code></strong></a></li>
<li><a href="https://github.com/littlehorse-enterprises/littlehorse/releases/tag/v0.11.2" target="_blank" rel="noopener noreferrer"><strong><code>0.11.0</code></strong></a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="upgrading">Upgrading<a href="https://littlehorse.dev/blog/littlehorse-0.11-release#upgrading" class="hash-link" aria-label="Direct link to Upgrading" title="Direct link to Upgrading">​</a></h2>
<p>Just as since all releases since <code>0.8</code>, there were no breaking changes to our protocol buffer API. We do not anticipate any changes with our API in the future, either. This means that old client applications will continue to work with the LH Server <code>0.11</code> and beyond.</p>
<p>However, we refactored the Go SDK to better follow GoLang conventions, which will require code changes (but no changes to the network protocol).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="upgrading-the-go-sdk">Upgrading the Go SDK<a href="https://littlehorse.dev/blog/littlehorse-0.11-release#upgrading-the-go-sdk" class="hash-link" aria-label="Direct link to Upgrading the Go SDK" title="Direct link to Upgrading the Go SDK">​</a></h3>
<p>Now, instead of having multiple modules to import and use, there are only two:</p>
<ol>
<li>The <code>lhproto</code> module, with our GRPC clients and protobuf.</li>
<li>The <code>littlehorse</code> module, with everything else.</li>
</ol>
<p>To add the go SDK to your project, you can run:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">go get github.com/littlehorse-enterprises/littlehorse@v0.11.2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Then, the imports are:</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"github.com/littlehorse-enterprises/littlehorse/sdk-go/lhproto"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"github.com/littlehorse-enterprises/littlehorse/sdk-go/littlehorse"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's Next?<a href="https://littlehorse.dev/blog/littlehorse-0.11-release#whats-next" class="hash-link" aria-label="Direct link to What's Next?" title="Direct link to What's Next?">​</a></h2>
<p>Before committing to <a href="https://semver.org/" target="_blank" rel="noopener noreferrer">Semantic Versioning</a>, we will:</p>
<ul>
<li>Release our release schedule and support plan.</li>
<li>Finish inspecting our SDK's for bugs and minor breaking API changes that we want to do before <code>1.0</code>.</li>
<li>Finish our benchmarks, chaos tests, and load tests to ensure that our software meets the highest quality standards.</li>
</ul>
<p>We expect to release <code>1.0</code> in early October 2024.</p>]]></content:encoded>
            <category>LittleHorse Orchestrator</category>
            <category>LittleHorse Releases</category>
        </item>
        <item>
            <title><![CDATA[The Challenge of Microservices]]></title>
            <link>https://littlehorse.dev/blog/challenge-of-microservices</link>
            <guid>https://littlehorse.dev/blog/challenge-of-microservices</guid>
            <pubDate>Tue, 27 Aug 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Microservices are often necessary, but unfortunately they bring with them some baggage.]]></description>
            <content:encoded><![CDATA[<p>Microservices are often necessary, but unfortunately they bring with them some baggage. </p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>This is the second part of a 3-part blog series:</p><ol>
<li><a href="https://littlehorse.dev/blog/promise-of-microservices">The Promise of Microservices</a></li>
<li><strong>[This Post]</strong> The Challenge with Microservices</li>
<li><a href="https://littlehorse.dev/blog/microservices-and-workflow">Workflow and Microservices: A Match Made in Heaven</a></li>
</ol></div></div>
<p>Last week, I <a href="https://littlehorse.dev/blog/promise-of-microservices">blogged</a> about the problems that microservices solve, and why they are not only beneficial but necessary in some cases (a good bellwether is the size of your engineering team: beyond 1 or 2 dozen engineers, you will probably start to feel some problems that can be solved with microservices).</p>
<p>When done correctly, microservices remove several bottlenecks to scaling your business. However, even well-architected microservices bring significant <em>accidental complexity</em>.</p>
<p>In particular, microservices are:</p>
<ol>
<li>Harder to <strong>observe</strong> and debug.</li>
<li>Harder to make <strong>reliable</strong> in the case of infrastructure or sofware failures.</li>
<li>More complex to <strong>maintain</strong> and evolve with changing business practices.</li>
</ol>
<p>In this article we will explore how the above problems arise from two key facts:</p>
<ul>
<li>Microservices are <strong>distributed</strong>.</li>
<li>Microservices are <strong>choreographed without a leader</strong>.</li>
</ul>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Microservices bring with them additional challenges around operationalization and deployment. However, those challenges are out-of-scope for this blog post as we instead choose to focus on the challenges faced by <em>application development teams</em> rather than operations teams.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-nature-of-microservices">The Nature of Microservices<a href="https://littlehorse.dev/blog/challenge-of-microservices#the-nature-of-microservices" class="hash-link" aria-label="Direct link to The Nature of Microservices" title="Direct link to The Nature of Microservices">​</a></h2>
<p>As I described in <a href="https://littlehorse.dev/blog/promise-of-microservices">last week's blog</a>:</p>
<blockquote>
<p>The term "microservices" refers to a software architecture wherein an enterprise application comprises a collection of small, loosely coupled, and independently deployable services (these small services are called "microservices" in contrast to larger monoliths). Each microservice focuses on a specific business capability and communicates with other services over a network, typically through API's, streaming platforms, or message queues.</p>
</blockquote>
<p>Crucially, a single microservice implements technical logic for a specific domain, or bounded context, within the larger company. In contrast, a comprehensive business process requires interacting with technology and people across <em>many</em> business domains. The classic example of microservices architecture, e-commerce checkout, involves at least <em>shipping</em>, <em>billing</em>, <em>notifications</em>, <em>inventory</em>, and <em>orders</em>.</p>
<p>In the rest of this blog post we will examine microservices through the the lense of e-commerce checkout flow. To start with a simple use-case, the logical flow we will consider is:</p>
<ol>
<li>When an order is placed, we create a record in a database in the <code>orders</code> service.</li>
<li>We then reserve inventory (and ensure that the item is in stock) in the <code>inventory</code> service.</li>
<li>We charge the customer using the <code>payments</code> service.</li>
<li>Next, we ship the item using the <code>shipping</code> service.</li>
<li>Finally, the <code>notifications</code> service notifies the customer that the parcel is on its way.</li>
</ol>
<p><img decoding="async" loading="lazy" alt="Simple e-commerce workflow" src="https://littlehorse.dev/assets/images/2024-08-27-simple-checkout-301d7115bb5b77f34c84342998c2921d.png" width="1472" height="141" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="microservices-are-distributed">Microservices are Distributed<a href="https://littlehorse.dev/blog/challenge-of-microservices#microservices-are-distributed" class="hash-link" aria-label="Direct link to Microservices are Distributed" title="Direct link to Microservices are Distributed">​</a></h3>
<p>Recall that each service (in the workflow diagram above, each box) is its own deployable artifact. That means that the happy-path business process described above will involve five different software systems from start-to-finish.</p>
<p>In the above workflow diagram, each arrow can be accurately interpreted in two ways:</p>
<ol>
<li>The logical flow of the business process.</li>
<li>The physical flow of information between microservices, either through network RPC calls or through a message broker like Apache Kafka.</li>
</ol>
<p>Guess what! This means we have a distributed system by definition. As Splunk <a href="https://www.splunk.com/en_us/blog/learn/distributed-systems.html" target="_blank" rel="noopener noreferrer">writes in a blog post</a>:</p>
<blockquote>
<p>A distributed system is simply any environment where multiple computers or devices are working on a variety of tasks and components, all spread across a network.</p>
</blockquote>
<p>You need to look no further than the <a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing" target="_blank" rel="noopener noreferrer">Fallacies of Distributed Computing</a> (written by Sun Microsystems Fellow L. Peter Deutsch in 1994) to see that this means that microservices are no easy task.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="microservices-are-leaderless">Microservices are Leaderless<a href="https://littlehorse.dev/blog/challenge-of-microservices#microservices-are-leaderless" class="hash-link" aria-label="Direct link to Microservices are Leaderless" title="Direct link to Microservices are Leaderless">​</a></h3>
<p>As we've seen already, any microservice-based application is a distributed system. Some distributed systems have the concept of a <em>leader</em>, which is a special node in the system that has special responsibilities.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>Apache Kafka is my favorite distributed system. In Apache Kafka, the <em>Controller</em> is a special Kafka server that is responsible for deciding which partition replicas are hosted on (and led by) which brokers. If the broker who was in charge of a partition goes down, then the Controller chooses a new broker from the ISR to take its place.</p><p>Therefore, the <em>Controller</em> in Apache Kafka can be thought of as a <em>leader</em>.</p></div></div>
<p>While systems like Apache Kafka have clear leaders (for example, the <em>Controller</em> may re-assign partition leadership if the cluster becomes too imbalanced), in a microservice-based system there is no central leader to ensure that the chips fall correctly. This is by necessity, because the separation of development concerns and lifecycles across microservices means that microservices cannot and do not have leaders.</p>
<p>You can think of our e-commerce microservice flow as a line of dominoes falling. Once the process starts, no one entity is responsible for ensuring its completion. The business workflow moves from <code>orders</code> to <code>inventory</code> to <code>payments</code> and so on. If <code>payments</code> fails for some reason (perhaps a network outage makes the Stripe API unavailable), then it's quite possible that the <code>shipping</code> service never finds out about the workflow.</p>
<p>However, in real life such outcomes are not acceptable. This means that every single player in the system must:</p>
<ol>
<li>Have built-in reliability mechanisms.</li>
<li>Understand the preceding and subsequent steps of the business process to route traffic.</li>
</ol>
<p>Implementing the above slows down development, more tightly couples one services to another, increases dependencies, and makes your microservice architecture much more heavyweight.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-challenges">The Challenges<a href="https://littlehorse.dev/blog/challenge-of-microservices#the-challenges" class="hash-link" aria-label="Direct link to The Challenges" title="Direct link to The Challenges">​</a></h2>
<p>So far, we have established that there are many players involved in a business process, yet there's no one orchestrator involved in ensuring that an ordered item is delievered to the the correct address. This yields three problems:</p>
<ol>
<li><strong>Reliability</strong> in the face of infrastructure failures.</li>
<li><strong>Observability</strong> to enable system optimization and debugging.</li>
<li><strong>Coupling</strong> of microservices to each other makes it hard to modify the system in response to new business requirements.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="reliability-and-correctness">Reliability and Correctness<a href="https://littlehorse.dev/blog/challenge-of-microservices#reliability-and-correctness" class="hash-link" aria-label="Direct link to Reliability and Correctness" title="Direct link to Reliability and Correctness">​</a></h3>
<p>Processing orders is a mission-critical use-case. This means that orders should always complete and never be dropped (for example, we should not charge the customer's credit card and not ship the product to them).</p>
<p>However, asynchronous processing such as that which I outlined above is prone to failures. For example, if you chain microservices together with direct RPC calls, a single network partition can cause an order to get stuck. Even with a reliable message broker such as Apache Kafka or AWS SQS sitting between your microservices, a write to the message broker could fail <em>after</em> the payment went through, still resulting in a stuck order.</p>
<p>Just as communication <em>between</em> microservices can fail, the actions performed _by_each microservice can also fail. In many cases actions performed by a microservice depend upon failure-prone external systems and API's. If the Stripe API is down, or if the credit card is invalid, we can't just stop processing the order there! We must notify the customer of what went wrong and also release the inventory that we reserved.</p>
<p>This means that microservice developers spend countless hours building out infrastructure to support:</p>
<ul>
<li>Retries</li>
<li>Dead-Letter Queues</li>
<li>Rate-limiting</li>
<li>Timeouts</li>
<li>Transactional Outbox pattern</li>
<li>SAGA Pattern</li>
</ul>
<p>Back to the domino analogy, if one domino misses the next, the entire chain just stops.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="observability">Observability<a href="https://littlehorse.dev/blog/challenge-of-microservices#observability" class="hash-link" aria-label="Direct link to Observability" title="Direct link to Observability">​</a></h3>
<p>The second problem with microservices is that once a process instance has started (i.e. the dominoes are falling), it is very difficult to observe what happens between steps 2 through 10. This means that multi-step processes with performance issues are hard to optimize, as there are many microservices which could be the bottleneck and it's hard to know which. Even worse, when a customer complains about a "stuck order," it is difficult to find the point of failure.</p>
<p>As a result, microservice engineers spend time and money:</p>
<ul>
<li>Slogging through logs on DataDog</li>
<li>Implementing complex distributed tracing such as Zipkin, Jaeger, or Kiali</li>
<li>Saving the state of each process instance (in our case, the <code>order</code>) in a DB just for visibility purposes at every step</li>
<li>Coordinating with other teams to manually understand and debug workflows.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="microservice-coupling">Microservice Coupling<a href="https://littlehorse.dev/blog/challenge-of-microservices#microservice-coupling" class="hash-link" aria-label="Direct link to Microservice Coupling" title="Direct link to Microservice Coupling">​</a></h3>
<p>Lastly, because microservices are leaderless, each player in the end-to-end process must have hard-coded integrations with the preceding and subsequent steps. This results in:</p>
<ul>
<li><strong>Process coupling</strong>, wherein changing a business process results in significant code updates to rewire the message queues or RPC calls between two steps.</li>
<li><strong>Schema coupling</strong>, wherein different microservices have strong dependencies on each others' schemas.</li>
</ul>
<p>Microservices come with the promise of loose coupling; however, the unfortunate reality is that this is often not the case. As a result, teams often do have to coordinate with each other during deployments.</p>
<p>To see an example of the complexity introduced by coupling of microservices, let's consider what happens to our e-commerce checkout workflow when we add a few edge cases to make it more realistic:</p>
<ol>
<li>If the credit card is invalid, we request the customer to provide a new one, wait for two days, and either complete or cancel the order.</li>
<li>If the item is out of stock, we notify the customer who elects either to wait or cancel the order.</li>
</ol>
<p><img decoding="async" loading="lazy" alt="Complex Checkout Architecture" src="https://littlehorse.dev/assets/images/2024-08-27-complex-checkout-915172cb1dfafc0a3e9a7cc0b042ac3a.png" width="1472" height="406" class="img_ev3q"></p>
<p>In the above diagram, each arrow represents the flow of the business process <em>and</em> information. Each microservice must have custom logic which sends information to the right place. In essence, while we <em>intended</em> to have modular microservices that understand only their own Bounded Context, what we have is tightly-coupled systems which must understand pretty much the entire business workflow.</p>
<p>Therefore, when business requirements change, unrelated microservices end up having to change their internal implementation as well.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="looking-forward">Looking Forward<a href="https://littlehorse.dev/blog/challenge-of-microservices#looking-forward" class="hash-link" aria-label="Direct link to Looking Forward" title="Direct link to Looking Forward">​</a></h2>
<p>Microservices have clear and proven benefits, and are often not just advantageous but <em>necessary</em> in some cases. However, as we discussed today, those benefits do not come without a cost. Because microservices are inherently distributed systems, challenges such as reliability, observability, and coordination are exacerbated.</p>
<p>Without spoiling the punchline of the next blog post, these challenges are why I started LittleHorse almost three years ago. Stay tuned for a description of how a <em>workflow orchestrator</em> can alleviate a good portion of the headaches that come along with microservices.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="business-analytics">Business Analytics<a href="https://littlehorse.dev/blog/challenge-of-microservices#business-analytics" class="hash-link" aria-label="Direct link to Business Analytics" title="Direct link to Business Analytics">​</a></h3>
<p>Astute readers may notice that when discussing the e-commerce checkout example, we didn't discuss the problem of <em>analytics.</em> We focused exclusively on online transaction processing, or ensuring that the orders are properly fulfilled and processed. However, no attention was paid to business analytics to optimize future sales!</p>
<p>This area is yet another challenge. The LittleHorse Council is working on a major feature (an output Kafka Topic with records for anytime something <em>interesting</em> happens inside a <code>WfRun</code>) for the LH Server that will address this. Don't worry, we'll blog about it soon <!-- -->😉<!-- -->.</p>]]></content:encoded>
            <category>Technical Analysis</category>
        </item>
        <item>
            <title><![CDATA[The Promise of Microservices]]></title>
            <link>https://littlehorse.dev/blog/promise-of-microservices</link>
            <guid>https://littlehorse.dev/blog/promise-of-microservices</guid>
            <pubDate>Thu, 22 Aug 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[If microservices add so much complexity, why bother with the hassle?]]></description>
            <content:encoded><![CDATA[<p>If microservices add so much complexity, why bother with the hassle? </p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>This is the first part of a 3-part blog series:</p><ol>
<li><strong>[This Post]</strong> The Promise of Microservices</li>
<li><a href="https://littlehorse.dev/blog/challenge-of-microservices">The Challenge with Microservices</a></li>
<li><a href="https://littlehorse.dev/blog/microservices-and-workflow">Workflow and Microservices: A Match Made in Heaven</a></li>
</ol></div></div>
<p>We've all <em>heard of</em> microservices, but unless you've read copious amounts of Sam Newman and Adam Bellemare's writings, you might be wondering whether, when, and why you should adopt them. In this blog post, we will examine the halcyon land promised by microservices.</p>
<p>Microservices have been <a href="https://www.simform.com/blog/microservices-examples/" target="_blank" rel="noopener noreferrer">deployed widely</a> across many large enterprises, most notably Netflix, Uber, Shopify, PayPal, and others. As we will discover throughout this blog series, a microservice architecture is mandatory once you reach a certain size of company, and it's probably overkill for a 12-person startup. The gray area inbetween is the interesting part!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-are-microservices">What are Microservices?<a href="https://littlehorse.dev/blog/promise-of-microservices#what-are-microservices" class="hash-link" aria-label="Direct link to What are Microservices?" title="Direct link to What are Microservices?">​</a></h2>
<p>The term "microservices" refers to a software architecture wherein an enterprise application comprises a collection of small, loosely coupled, and independently deployable services (these small services are called "microservices" in contrast to larger monoliths). Each microservice focuses on a specific business capability and communicates with other services over a network, typically through API's, streaming platforms, or message queues.</p>
<p>In practice, this means that a user interaction with an application (such as placing an order) might trigger actions that occur in <em>many</em> small, independently-deployed software systems, such as:</p>
<ul>
<li>A Notification service</li>
<li>An Inventory Management service</li>
<li>A Payments service</li>
<li>An Order History service</li>
</ul>
<p>From the user (client) perspective, one request is made (generally through a Load Balancer, API Gateway, or Ingress Controller) but that request may ping-pong between multiple back-end services and may also result in future actions being scheduled asynchronously:</p>
<p><img decoding="async" loading="lazy" alt="Microservices Architecture" src="https://littlehorse.dev/assets/images/2024-08-22-microservices-arch-2389e95f878235ea53f0c0afa2eea967.png" width="861" height="962" class="img_ev3q"></p>
<p>In contrast to microservices, a <em>monolithic</em> architecture would serve the entire "place order" request on a single deployable artifact:</p>
<p><img decoding="async" loading="lazy" alt="Monolithic Architecture" src="https://littlehorse.dev/assets/images/2024-08-22-monolith-arch-894351f807fd64060d9d05380fc799cf.png" width="250" height="499" class="img_ev3q"></p>
<p>In Domain Driven Design, accidental complexity refers to the unintentional complexity that you introduced to your architecture (deployments, service interactions, third-party dependencies, etc.). Rule #1 of maintaining software systems is to avoid introducing accidental complexity as much as possible.</p>
<p>Simply by looking at the visuals above, microservices add a significant dose of accidental complexity to your architecture (more on this in next week's post!). Given that, what benefits would make up for the extra complexity introduced by microservices?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-now">Why Now?<a href="https://littlehorse.dev/blog/promise-of-microservices#why-now" class="hash-link" aria-label="Direct link to Why Now?" title="Direct link to Why Now?">​</a></h2>
<p>I would be first to admit that microservices bring with them a series of headaches around cost, observability, maintenance, and ease of evolution (otherwise, I would not have founded LittleHorse Enterprises!). However, microservice architecture plays a vital role in addressing two critical trends reshaping the software development landscape today:</p>
<ul>
<li>Increased digitization of companies in all business sectors (accelerated by the rise of AI).</li>
<li>Elasticity of cloud computing.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="increased-digitization">Increased Digitization<a href="https://littlehorse.dev/blog/promise-of-microservices#increased-digitization" class="hash-link" aria-label="Direct link to Increased Digitization" title="Direct link to Increased Digitization">​</a></h3>
<p>The level of digitization expected of businesses in order to compete in the modern market has drastically increased: IT teams must build software that interfaces with an ever-expanding list of external API's, legacy systems, user interfaces, internal tools, and SaaS providers.</p>
<p>For example: in the early 2000's, it was perfectly acceptable (even <em>expected</em>) for a passenger to book airline tickets over the telephone or through a travel agency. However, such an experience would be unheard of today and would immediately hobble an airline who provided such poor digital services.</p>
<p>In addition to using automation to provide better customer services, companies are generating, processing, and analyzing massive amounts of data. For example, grocery stores with razor-thin margins analyze seasonal consumption patterns in order to optimize inventory and prevent costly food waste.</p>
<p>These trends have coincided with (or <em>caused</em>, I would argue) a proliferation in the number of 1) software developers, and 2) software tools and API's found within companies in all industries, leading to two new problems:</p>
<ol>
<li>Allowing large teams of software developers to productively work on an enterprise application in parallel (without stepping on each others' toes).</li>
<li>Ensuring that business requirements are effectively communicated to the entire (larger) software engineering team.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cloud-elasticity">Cloud Elasticity<a href="https://littlehorse.dev/blog/promise-of-microservices#cloud-elasticity" class="hash-link" aria-label="Direct link to Cloud Elasticity" title="Direct link to Cloud Elasticity">​</a></h3>
<p>As the importance and quantity of digital software systems exploded over the last two decades, so has the availability of nearly-infinite compute power delivered through cloud infrastructure providers such as AWS.</p>
<p>The promise of <em>elasticity</em>, or the ability to quickly spin compute resources up or down according to load and only pay for what you use, is unique to the cloud: for on-prem datacenters, spinning up new compute means buying new machines from Sun Microsystems (hopefully not Microsoft!), and scaling down compute means trying to sell them off on the secondary market. (Ask my father about how that went for a lot of people in 2001.)</p>
<p>Beyond scaling up and down, elasticity enables different deployment patterns that did not exist before. Whereas pre-cloud enterprises had dedicated and centralized data-center teams who were in charge of running applications, the accessibility of cloud computing gave rise to the DevOps movement. This has empowered smaller teams of software developers to take on the task of transferring software from "it works on my laptop!" to "it's now deployed in production!"</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-microservices">Why Microservices?<a href="https://littlehorse.dev/blog/promise-of-microservices#why-microservices" class="hash-link" aria-label="Direct link to Why Microservices?" title="Direct link to Why Microservices?">​</a></h2>
<p>Despite the extra complexity it brings, the microservice architecture can more than pay for itself by ensuring organizational alignment and allowing enterprise architectures to take full advantage of the cloud's elasticity.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="organizational-alignment">Organizational Alignment<a href="https://littlehorse.dev/blog/promise-of-microservices#organizational-alignment" class="hash-link" aria-label="Direct link to Organizational Alignment" title="Direct link to Organizational Alignment">​</a></h3>
<p>As discussed earlier, the business problems that software engineering organizations must solve today dwarf those that were solved in the 1990's, and so do the software engineering teams that tackle those problems.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>I am not belittling the engineers of the 90's; the problems they solved were arguably <em>much harder</em> than the problems we face today, and there were fewer engineers to face those problems. However, it is a fact that users expect more digital-native experiences today than they did twenty years ago.</p></div></div>
<p>By breaking applications into smaller services, we can accomplish several important things:</p>
<ul>
<li>Break up our software engineering team into smaller teams which are each responsible for individual microservices.</li>
<li>Allow different components of a system to be developed with separate tech stacks and released independently.</li>
</ul>
<p>Engineering teams of over a few dozen engineers working on the same deployable piece of software is a recipe for inefficiency. Merge conflicts, arguments over tech stack, slow "release trains," and excessive intra-team coordination are just a few problems that arise. However, by breaking your application into smaller microservices, you can also break up your engineering organization into smaller, more efficient teams each in charge of a small number (prefably one!) of microservices.</p>
<p>As an added benefit, properly-designed microservice architectures can follow the principles of Domain Driven Design. Ideally, a single microservice corresponds to a <em>Bounded Context</em> inside the business. This enables a small piece of the technical platform (a microservice) to be managed by a small team of software engineers, who collaborate closely with subject-matter experts and business stakeholders within a very specific domain of the business. Such close collaboration can foster better alignment between business goals and the software produced by engineering teams.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="moving-faster">Moving Faster<a href="https://littlehorse.dev/blog/promise-of-microservices#moving-faster" class="hash-link" aria-label="Direct link to Moving Faster" title="Direct link to Moving Faster">​</a></h3>
<p>Microservices can allow developers to move faster by enabling continuous delivery and independent deployment of services. In a monolithic architecture, releasing a new feature or fixing a bug typically requires redeploying the entire application. Since microservices allow smaller pieces of your application to be deployed independently, engineering teams can iterate faster and deliver incremental value to business stakeholders.</p>
<p>These positive effects are amplified by the advent of cloud computing. Since deploying a new application no longer requires buying a physical machine and plugging it into your datacenter but rather just applying a new <code>Deployment</code> and <code>Service</code> on a Kubernetes cluster, it is now truly feasible for small teams of software engineers to own their application stack from laptop-to-production (obviously, within the guardrails set by the central platform team). Furthermore, cloud computing is a pay-as-you-go (and often even pay-for-what-you-use) expense rather than an up-front cost. Therefore, the dollar cost of infrastructure required to support microservices is much lower today than it would have been before the advent of cloud computing and kubernetes.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://littlehorse.dev/blog/promise-of-microservices#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>The microservice architecture is not just a Twitter-driven buzzword but rather a way of designing system that has several real advantages. For most organizations with over two dozen software engineers, building applications with microservices is not an option but rather a <em>necessity</em>. However, those advantages come with a cost.</p>
<p>We will discuss those challenges in next week's blog post...in the meantime, though, join our <a href="https://launchpass.com/littlehorsecommunity" target="_blank" rel="noopener noreferrer">Community Slack</a> to get the latest updates!</p>]]></content:encoded>
            <category>Technical Analysis</category>
        </item>
        <item>
            <title><![CDATA[Releasing 0.10]]></title>
            <link>https://littlehorse.dev/blog/littlehorse-0.10-release</link>
            <guid>https://littlehorse.dev/blog/littlehorse-0.10-release</guid>
            <pubDate>Fri, 12 Jul 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Releasing LittleHorse `0.10`]]></description>
            <content:encoded><![CDATA[<p>The <code>0.10</code> release brings with it significant performance and reliability improvements. </p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="new-features">New Features<a href="https://littlehorse.dev/blog/littlehorse-0.10-release#new-features" class="hash-link" aria-label="Direct link to New Features" title="Direct link to New Features">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="lhctl-binaries-and-release-notes"><code>lhctl</code> Binaries and Release Notes<a href="https://littlehorse.dev/blog/littlehorse-0.10-release#lhctl-binaries-and-release-notes" class="hash-link" aria-label="Direct link to lhctl-binaries-and-release-notes" title="Direct link to lhctl-binaries-and-release-notes">​</a></h3>
<p>The <code>0.10.0</code> release comes with a new <a href="https://github.com/littlehorse-enterprises/littlehorse/releases" target="_blank" rel="noopener noreferrer">Release Page</a>, including <code>lhctl</code> binaries built for ARM, Intel, and Windows.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="reliability-during-rebalances">Reliability during Rebalances<a href="https://littlehorse.dev/blog/littlehorse-0.10-release#reliability-during-rebalances" class="hash-link" aria-label="Direct link to Reliability during Rebalances" title="Direct link to Reliability during Rebalances">​</a></h3>
<p>PR <a href="https://github.com/littlehorse-enterprises/littlehorse/pull/872" target="_blank" rel="noopener noreferrer">#872</a> improves the reliability of LittleHorse during Kafka Streams rebalances. Previously, if a write request (eg. <code>rpc RunWf</code>) was received just before a rebalance, certain requests would "time out" from the client perspective and return a <code>DEADLINE_EXCEEDED</code> grpc error despite being properly accepted and processed by the server. This PR fixes that issue by redirecting the internal <code>rpc WaitForCommand</code> to the new destination for that command.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="rescue-failed-workflows">Rescue Failed Workflows<a href="https://littlehorse.dev/blog/littlehorse-0.10-release#rescue-failed-workflows" class="hash-link" aria-label="Direct link to Rescue Failed Workflows" title="Direct link to Rescue Failed Workflows">​</a></h3>
<p>PR <a href="https://github.com/littlehorse-enterprises/littlehorse/pull/883" target="_blank" rel="noopener noreferrer">#883</a> allows users to restart failed <code>WfRun</code>'s via the <code>lhctl rescue</code> command. This is similar to allowing a user to execute mutating SQL queries via a CLI like <code>psql</code>.</p>
<p>With this feature, a user can fix a buggy Task Worker implementation and then restart a failed <code>WfRun</code> and get it to execute the failed <code>TaskRun</code> again via:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">lhctl rescue &lt;wfRunId&gt; &lt;threadRunNumber&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="mtls-principals">mTLS Principals<a href="https://littlehorse.dev/blog/littlehorse-0.10-release#mtls-principals" class="hash-link" aria-label="Direct link to mTLS Principals" title="Direct link to mTLS Principals">​</a></h3>
<p>Previously, only listeners of the type <code>OAUTH</code> supported <code>Principal</code>s. The <code>Principal</code> ID was determined by the OAuth Client ID or User Id. Release <code>0.10</code> introduces the ability to infer a <code>Principal</code> on an <code>MTLS</code> listener, where the <code>Principal</code> ID comes from the Common Name on the client certificate.</p>
<p>PR <a href="https://github.com/littlehorse-enterprises/littlehorse/pull/874" target="_blank" rel="noopener noreferrer">#874</a> by one of our newer team members, <a href="https://github.com/snarr" target="_blank" rel="noopener noreferrer">Jacob Snarr</a>, introduced this feature, enabling users that standardize on SSL authentication to continue using that pattern with Littlehorse.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dashboard-enhancements">Dashboard Enhancements<a href="https://littlehorse.dev/blog/littlehorse-0.10-release#dashboard-enhancements" class="hash-link" aria-label="Direct link to Dashboard Enhancements" title="Direct link to Dashboard Enhancements">​</a></h3>
<p>The <code>0.10</code> release includes multiple enhancements to the Admin Dashboard, including:</p>
<ul>
<li>Ability to search for <code>WfRun</code>'s by their variables.</li>
<li>Improved <code>WfRun</code> search.</li>
<li>Fixed display of <code>TaskRun</code>s with the <code>EXCEPTION</code> and <code>ERROR</code> status.</li>
<li>Showing <code>VariableMutation</code>s on the <code>Edge</code> in the dashboard.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's Next?<a href="https://littlehorse.dev/blog/littlehorse-0.10-release#whats-next" class="hash-link" aria-label="Direct link to What's Next?" title="Direct link to What's Next?">​</a></h2>
<p>We will need one more minor release before finally releasing <code>1.0</code>. We need the following:</p>
<ul>
<li>Upgrade <code>org.apache.kafka:kafka-streams</code> to <code>3.8.0</code> to address several critical reliability bugs (we are waiting for the official release).</li>
<li>Conduct new load tests and soak tests against the new version of Kafka Streams.</li>
<li>Review our Go and Python SDK's in-depth to ensure proper semantics.</li>
</ul>
<p>After that, we will be ready to commit to the backwards compatibility guarantees required by <a href="https://semver.org/" target="_blank" rel="noopener noreferrer">Semantic Versioning</a>. We will also release a blog post with our planned release schedule and support schedule.</p>]]></content:encoded>
            <category>LittleHorse Orchestrator</category>
            <category>LittleHorse Releases</category>
        </item>
        <item>
            <title><![CDATA[Releasing 0.9]]></title>
            <link>https://littlehorse.dev/blog/littlehorse-0.9-release</link>
            <guid>https://littlehorse.dev/blog/littlehorse-0.9-release</guid>
            <pubDate>Mon, 24 Jun 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Revamping the LittleHorse Dashboard]]></description>
            <content:encoded><![CDATA[<p>The <code>0.9.2</code> release is now availble and ready for use.  The <code>0.9.x</code> releases focused mainly on:</p>
<ul>
<li>Improving the user experience on the LittleHorse Dashboard</li>
<li>Improving the reliability of the LH Server in the face of rebalances and failures.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="new-features">New Features<a href="https://littlehorse.dev/blog/littlehorse-0.9-release#new-features" class="hash-link" aria-label="Direct link to New Features" title="Direct link to New Features">​</a></h2>
<p>While the majority of the improvements in the <code>0.9</code> release revolve around performance and stability, several of them are highly visible to the user (especially the new dashboard!).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dashboard-rewrite">Dashboard Rewrite<a href="https://littlehorse.dev/blog/littlehorse-0.9-release#dashboard-rewrite" class="hash-link" aria-label="Direct link to Dashboard Rewrite" title="Direct link to Dashboard Rewrite">​</a></h3>
<p>With help from <a href="https://github.com/diablouma" target="_blank" rel="noopener noreferrer">Nelson Jumbo</a>, LittleHorse Knight <a href="https://github.com/mijailrondon" target="_blank" rel="noopener noreferrer">Mijaíl Rondón</a> rewrote and revamped our administrative dashboard. It now inclues new features such as:</p>
<ul>
<li>User Task Detail page</li>
<li>Improved details on <code>TaskRun</code> progress</li>
<li>Improved details on <code>WfRun</code> progress</li>
<li>A plethora of small bug fixes.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="internal-task-queue-optimizations">Internal Task Queue Optimizations<a href="https://littlehorse.dev/blog/littlehorse-0.9-release#internal-task-queue-optimizations" class="hash-link" aria-label="Direct link to Internal Task Queue Optimizations" title="Direct link to Internal Task Queue Optimizations">​</a></h3>
<p>Deep in the internals of the LittleHorse Server, we implement a Task Queue mechanism to store <code>ScheduledTask</code>s before they're dispatched to the Task Worker clients. This release included many improvements to stability of the Task Queues.</p>
<p>Most importantly, our Grumpy Maintainer (Eduwer Camacaro) put a cap on the memory consumption of a single <code>TaskDef</code>. Prior to this release, it was possible for poorly-behaved clients to cause an OOM on the server by running millions of workflows which use a <code>TaskDef</code> but not executing the resulting <code>TaskRun</code>s. This would cause an un-bounded buildup of <code>ScheduledTask</code>s in memory until the server crashed.</p>
<p>After the <code>0.9</code> release, any more than 1,000 <code>ScheduledTask</code>s for a certain <code>TaskDef</code> are not loaded into memory but left on disk.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="principal-deletion">Principal Deletion<a href="https://littlehorse.dev/blog/littlehorse-0.9-release#principal-deletion" class="hash-link" aria-label="Direct link to Principal Deletion" title="Direct link to Principal Deletion">​</a></h3>
<p>The <code>0.9</code> release includes the ability to delete a <code>Principal</code>. The <code>rpc DeletePrincipal</code> is smart enough to ensure that there is always at least one Admin <code>Principal</code> to prevent a user from locking themselves out of the cluster.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="pollthread-in-java-task-worker"><code>PollThread</code> in Java Task Worker<a href="https://littlehorse.dev/blog/littlehorse-0.9-release#pollthread-in-java-task-worker" class="hash-link" aria-label="Direct link to pollthread-in-java-task-worker" title="Direct link to pollthread-in-java-task-worker">​</a></h3>
<p>We refactored the internal implementation of the Java Task Worker so that, for each LH Server in the cluster, the Task Worker creates a single <code>PollThread</code> object which is responsible for polling and executing <code>TaskRun</code>s. The <code>PollThread</code>s now poll in parallel, drastically increasing the throughput of a single Java Task Worker.</p>
<p>The <code>PollThread</code> was introduced in <a href="https://github.com/littlehorse-enterprises/littlehorse/pull/796" target="_blank" rel="noopener noreferrer">#796</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's Next<a href="https://littlehorse.dev/blog/littlehorse-0.9-release#whats-next" class="hash-link" aria-label="Direct link to What's Next" title="Direct link to What's Next">​</a></h2>
<p>Our wire protocol (the GRPC API) is quite stable; there have been no major breaking changes since we introduced the alpha version of Multi-Tenancy in <code>0.7</code>. We are diligently proceeding through soak tests, load tests, and chaos tests with our server and we have found and addressed several issues.</p>
<p>We continue to look foward to the <code>1.0</code> release, and we will reach that milestone once:</p>
<ul>
<li>We are satisfied with results of load tests and soak tests.</li>
<li>We have had language experts review each of our three main SDK's (Java, Go, Python) and we have addressed any change requests.</li>
<li>We approach a year without any breaking changes to our wire protocol.</li>
</ul>]]></content:encoded>
            <category>LittleHorse Orchestrator</category>
            <category>LittleHorse Releases</category>
        </item>
        <item>
            <title><![CDATA[Releasing 0.8]]></title>
            <link>https://littlehorse.dev/blog/littlehorse-0.8-release</link>
            <guid>https://littlehorse.dev/blog/littlehorse-0.8-release</guid>
            <pubDate>Tue, 26 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Hardening Security]]></description>
            <content:encoded><![CDATA[<p>The <code>0.8</code> release of LittleHorse is out! This pre-1.0 release contains many new features, security enhancements, and performance improvements.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="new-features">New Features<a href="https://littlehorse.dev/blog/littlehorse-0.8-release#new-features" class="hash-link" aria-label="Direct link to New Features" title="Direct link to New Features">​</a></h2>
<p>New features in this release cover some edge-cases in workflow development which came up from some initial pilots and internal usage of the platform.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dynamic-task-execution">Dynamic Task Execution<a href="https://littlehorse.dev/blog/littlehorse-0.8-release#dynamic-task-execution" class="hash-link" aria-label="Direct link to Dynamic Task Execution" title="Direct link to Dynamic Task Execution">​</a></h3>
<p>Before this release, a <code>TaskNode</code> had a hard-coded reference to a <code>TaskDef</code>. This means that every single <code>WfRun</code> that reaches the same <code>Node</code> in a <code>WfSpec</code> ends up executing the same <code>TaskDef</code>.</p>
<p>However, in LittleHorse Enterprises LLC's upcoming Control Plane project (a system for dynamically provisioning LittleHorse clusters as a SaaS service), we anticipate a special use-case (which we will blog about this upcoming fall) wherein we need to <em>choose</em> which <code>TaskDef</code> is executed dynamically at runtime.</p>
<p>Specifically, depending on an input variable to a <code>WfRun</code> (in this case, the <code>data-plane-id</code> variable), we need to execute a different <code>TaskDef</code> so that the <code>TaskRun</code> is executed by a speciific Task Worker in a specific location. We will blog about that use-case later.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="per-thread-failure-handlers">Per-Thread Failure Handlers<a href="https://littlehorse.dev/blog/littlehorse-0.8-release#per-thread-failure-handlers" class="hash-link" aria-label="Direct link to Per-Thread Failure Handlers" title="Direct link to Per-Thread Failure Handlers">​</a></h3>
<p>Since the <code>0.1.0</code> release of LittleHorse it has been possible to put a <code>FailureHandler</code> on any <code>Node</code>, such that if the <code>NodeRun</code> fails, then a Failure Handler thread is</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="content-in-exceptions">Content in <code>EXCEPTION</code>s<a href="https://littlehorse.dev/blog/littlehorse-0.8-release#content-in-exceptions" class="hash-link" aria-label="Direct link to content-in-exceptions" title="Direct link to content-in-exceptions">​</a></h3>
<ul>
<li>#714</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="multi-tenancy-improvements">Multi-Tenancy Improvements<a href="https://littlehorse.dev/blog/littlehorse-0.8-release#multi-tenancy-improvements" class="hash-link" aria-label="Direct link to Multi-Tenancy Improvements" title="Direct link to Multi-Tenancy Improvements">​</a></h3>
<p>Multi-Tenancy has been quietly under development in the LittleHorse Server since the <code>0.6.0</code> release introduced a breaking change to allow for it last October. The <code>0.8</code> release continues to progress towards making Multi-Tenancy generally-available.</p>
<p>This release includes two new major features for Multi-Tenancy:</p>
<ol>
<li>Allowing Python and Go clients to set the <code>tenant-id</code> header using <code>LHC_TENANT_id</code> (<a href="https://github.com/littlehorse-enterprises/littlehorse/pull/704" target="_blank" rel="noopener noreferrer">#704</a>)</li>
<li>Allowing administrative <code>Principal</code>s with admin privileges over multiple <code>Tenant</code>s: (<a href="https://github.com/littlehorse-enterprises/littlehorse/pull/679" target="_blank" rel="noopener noreferrer">#679</a>)</li>
</ol>
<p>Multi-Tenancy and support for authentication + fine-grained ACL's via <code>Principal</code>s has been a labor of love implemented by <a href="https://github.com/eduwercamacaro" target="_blank" rel="noopener noreferrer">Eduwer Camacaro</a>, who has grown into the role of Grumpy Maintainer of LittleHorse.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="kafka-security-protocol-support">Kafka Security Protocol Support<a href="https://littlehorse.dev/blog/littlehorse-0.8-release#kafka-security-protocol-support" class="hash-link" aria-label="Direct link to Kafka Security Protocol Support" title="Direct link to Kafka Security Protocol Support">​</a></h3>
<p>Prior to release <code>0.8</code>, the LH Server could only access a Kafka cluster with either:</p>
<ul>
<li>Plaintext access with no security.</li>
<li>TLS with no authentication.</li>
<li>MTLS security.</li>
</ul>
<p>PR <a href="https://github.com/littlehorse-enterprises/littlehorse/pull/716" target="_blank" rel="noopener noreferrer">#716</a> introduced the following Server configurations:</p>
<ul>
<li><code>LHS_KAFKA_SECURITY_PROTOCOL</code></li>
<li><code>LHS_KAFKA_SASL_MECHANISM</code></li>
<li><code>LHS_KAFKA_SASL_JAAS_CONFIG</code></li>
</ul>
<p>This allows for access to any Kafka cluster except those requiring loading custom implementations of callbacks on the client side (for example, using the Strimzi OAuth Plug-in).</p>
<p>It is now possible to run LH with Kafka as:</p>
<ul>
<li>No security (PLAINTEXT)</li>
<li>TLS on the brokers, no authentication (SSL)</li>
<li>MTLS on the brokers (SSL with TRUSTSTORE set)</li>
<li>SASL with any JAAS config (SASL_SSL)</li>
<li>Confluent Cloud.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="littlehorse-canary">LittleHorse Canary<a href="https://littlehorse.dev/blog/littlehorse-0.8-release#littlehorse-canary" class="hash-link" aria-label="Direct link to LittleHorse Canary" title="Direct link to LittleHorse Canary">​</a></h3>
<p>The LittleHorse Canary was released in early access. Inspired by the <a href="https://strimzi.io/blog/2021/11/09/canary/" target="_blank" rel="noopener noreferrer">Strimzi Canary</a> for Apache Kafka, the LittleHorse Canary is a system that runs workflows on LittleHorse and reports on the health of the cluster(s) that it is monitoring.</p>
<p>The LH Canary system comprises two components:</p>
<ol>
<li>The Metronome, which runs workflows and sends metric beats to a Kafka topic.</li>
<li>The Aggregator, which consumes the metrics beats Kafka topic and aggregates metrics to be exposed to Prometheus and a GRPC API.</li>
</ol>
<p>The goal of the Canary is to monitor, profile, and benchmark LittleHorse Clusters from the same exact perspective as the clients who use them.</p>
<p>The Canary is the brain child of <a href="https://github.com/sauljabin" target="_blank" rel="noopener noreferrer">Saúl Piña</a>, who is also the author of the popular <a href="https://github.com/sauljabin/kaskade" target="_blank" rel="noopener noreferrer">Kaskade</a> TUI for Apache Kafka.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="exponential-backoff-retry-policy">Exponential Backoff Retry Policy<a href="https://littlehorse.dev/blog/littlehorse-0.8-release#exponential-backoff-retry-policy" class="hash-link" aria-label="Direct link to Exponential Backoff Retry Policy" title="Direct link to Exponential Backoff Retry Policy">​</a></h3>
<p>PR (<a href="https://github.com/littlehorse-enterprises/littlehorse/pull/707" target="_blank" rel="noopener noreferrer">#707</a>) introduced the ability to configure exponential backoff for <code>TaskRun</code> retries. Previously, only immediate retries were supported.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="javascript-client">JavaScript Client<a href="https://littlehorse.dev/blog/littlehorse-0.8-release#javascript-client" class="hash-link" aria-label="Direct link to JavaScript Client" title="Direct link to JavaScript Client">​</a></h3>
<p>We published the first version of <code>littlehorse-client</code> on NPM <a href="https://www.npmjs.com/package/littlehorse-client" target="_blank" rel="noopener noreferrer">here</a>. This client contains the <code>LHConfig</code> in javascript, which provides access to our LittleHorse GRPC API. Note that we do not yet support a JavaScript Task Worker nor a JavaScript <code>WfSpec</code> SDK.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="bugfixes">Bugfixes<a href="https://littlehorse.dev/blog/littlehorse-0.8-release#bugfixes" class="hash-link" aria-label="Direct link to Bugfixes" title="Direct link to Bugfixes">​</a></h3>
<p>In this release, we fixed several bugs:</p>
<ul>
<li>Task Worker improperly reported <code>EXCEPTION</code>s and <code>ERROR</code>s when throwing <code>LHTaskException</code> (<a href="https://github.com/littlehorse-enterprises/pull/738" target="_blank" rel="noopener noreferrer">#738</a>)</li>
<li>Fixes task queue rehydration (<a href="https://github.com/littlehorse-enterprises/pull/727" target="_blank" rel="noopener noreferrer">#727</a>)</li>
<li>Fixes the Retention Policy for <code>ExternalEventDef</code>'s (<a href="https://github.com/littlehorse-enterprises/littlehorse/pull/724" target="_blank" rel="noopener noreferrer">#724</a>)</li>
<li>Fixes deadlock in Java task worker (<a href="https://github.com/littlehorse-enterprises/littlehorse/pull/723" target="_blank" rel="noopener noreferrer">#723</a>)</li>
<li>Fixes concurrency bug with the <code>AsyncWaiter</code> in the server (<a href="https://github.com/littlehorse-enterprises/littlehorse/pull/719" target="_blank" rel="noopener noreferrer">#719</a>)</li>
<li>Fixes various issues from soak tests (<a href="https://github.com/littlehorse-enterprises/littlehorse/pull/706" target="_blank" rel="noopener noreferrer">#706</a>)</li>
<li>Fixes to <code>NodeRun</code> lifecycle (<a href="https://github.com/littlehorse-enterprises/littlehorse/pull/665" target="_blank" rel="noopener noreferrer">#665</a>).</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="looking-forward">Looking Forward<a href="https://littlehorse.dev/blog/littlehorse-0.8-release#looking-forward" class="hash-link" aria-label="Direct link to Looking Forward" title="Direct link to Looking Forward">​</a></h2>
<p>We continue to stabilize our API and add features that cover edge cases. Load testing, chaos testing, and soak testing are an ongoing project, and we are working with the Apache Kafka Community on a few bugfixes in the Kafka Streams library which is heavily used in the core of LittleHorse.</p>
<p>Once those action items are resolved, we will make a <code>1.0</code> release candidate. However, in the meantime we don't expect any massively-breaking API changes at the protocol level. However, certain syntactical changes may occur in our SDK's (especially Go and Python).</p>]]></content:encoded>
            <category>LittleHorse Orchestrator</category>
            <category>LittleHorse Releases</category>
        </item>
        <item>
            <title><![CDATA[Releasing 0.7]]></title>
            <link>https://littlehorse.dev/blog/littlehorse-0.7-release</link>
            <guid>https://littlehorse.dev/blog/littlehorse-0.7-release</guid>
            <pubDate>Sun, 28 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Approaching a stable `1.0.0` release.]]></description>
            <content:encoded><![CDATA[<p>We are excited to announce the release of <code>0.7.2</code>!  This is our last release before we cut <code>1.0.0</code>, which will be the first stable and production-ready LittleHorse distribution.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started">Get Started<a href="https://littlehorse.dev/blog/littlehorse-0.7-release#get-started" class="hash-link" aria-label="Direct link to Get Started" title="Direct link to Get Started">​</a></h2>
<p>LittleHorse is free for production use according to the Server-Side Public License!</p>
<p>To get started with LittleHorse OSS, you can:</p>
<ul>
<li>Visit us on <a href="https://github.com/littlehorse-enterprises" target="_blank" rel="noopener noreferrer">GitHub</a></li>
<li>Try our <a href="https://littlehorse.dev/docs/developer-guide/install#installation-and-quickstart" target="_blank" rel="noopener noreferrer">quickstarts</a> or watch our founder, Colt, go through them in <a href="https://www.youtube.com/watch?v=8Zo_UOStg98&amp;t=6s" target="_blank" rel="noopener noreferrer">Java</a>, <a href="https://www.youtube.com/watch?v=oZQc2ISSZsk" target="_blank" rel="noopener noreferrer">Go</a>, or <a href="https://www.youtube.com/watch?v=l3TZOjfpzTw" target="_blank" rel="noopener noreferrer">Python</a></li>
<li>Join our <a href="https://launchpass.com/littlehorse-community" target="_blank" rel="noopener noreferrer">Slack Community</a> for quick and responsive help!</li>
</ul>
<p>Also, LittleHorse Enterprises LLC has released its first out our <a href="https://littlehorse.io/" target="_blank" rel="noopener noreferrer">product-focused website</a>! If you're still curious and want to learn even more, check out a few of our new in-depth tutorial series on <a href="https://www.youtube.com/@LittleHorse-ey3vw/featured" target="_blank" rel="noopener noreferrer">our YouTube page</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="new-features">New Features<a href="https://littlehorse.dev/blog/littlehorse-0.7-release#new-features" class="hash-link" aria-label="Direct link to New Features" title="Direct link to New Features">​</a></h2>
<p>Release <code>0.7</code> introduces many features designed to make your life easier. We plan to write blogs about all of them, so stay tuned!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="administrative-dashboard">Administrative Dashboard<a href="https://littlehorse.dev/blog/littlehorse-0.7-release#administrative-dashboard" class="hash-link" aria-label="Direct link to Administrative Dashboard" title="Direct link to Administrative Dashboard">​</a></h3>
<p>The most exciting part of the <code>0.7.2</code> release of LittleHorse is the new LH Dashboard, which is an administrative portal into your LittleHorse Cluster. The LH Dashboard lets you check on all of your workflows and tasks and debug everything visually with fine-grained detail. Our quickstarts (see above) have everything you need to get started debugging your workflows with our dashboard.</p>
<p>The LH Dashboard is in the alpha stage, so we appreciate any bug reports or feature requests. Please file them on <a href="https://github.com/littlehorse-enterprises/littlehorse/issues" target="_blank" rel="noopener noreferrer">our github</a>!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="idempotent-metadata-management">Idempotent Metadata Management<a href="https://littlehorse.dev/blog/littlehorse-0.7-release#idempotent-metadata-management" class="hash-link" aria-label="Direct link to Idempotent Metadata Management" title="Direct link to Idempotent Metadata Management">​</a></h3>
<p>Managing your <code>WfSpec</code>s and <code>TaskDef</code>s just got much easier. Check out our <a href="https://littlehorse.dev/docs/developer-guide/grpc/managing-metadata" target="_blank" rel="noopener noreferrer">updated docs</a> for tutorials on how to keep your DevOps team happy and seamlessly integrate LittleHorse into your normal application development lifecycle.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="child-workflows">Child Workflows<a href="https://littlehorse.dev/blog/littlehorse-0.7-release#child-workflows" class="hash-link" aria-label="Direct link to Child Workflows" title="Direct link to Child Workflows">​</a></h3>
<p>We also added the ability to run a <code>WfRun</code> which is a "child" of another <code>WfRun</code>. This allows for some interesting features, most importantly:</p>
<ul>
<li>Sharing <code>Variable</code>s between <code>WfRun</code>'s</li>
<li>Foreign-key relationships between the child and parent <code>WfRun</code>'s.</li>
</ul>
<p>Stay tuned for an upcoming blog about <em>why</em> we added that feature. It was guided by our resident Domain-Driven Design expert, Eduwer Camacaro! Here's a hint: this feature makes it possible to use LittleHorse Workflows as a native data store for complex business entities. This is a great way to implement the "Aggregate Pattern."</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="enhanced-searchwfrun">Enhanced <code>SearchWfRun</code><a href="https://littlehorse.dev/blog/littlehorse-0.7-release#enhanced-searchwfrun" class="hash-link" aria-label="Direct link to enhanced-searchwfrun" title="Direct link to enhanced-searchwfrun">​</a></h3>
<p>The <code>rpc SearchWfRun</code> request now has a <code>repeated VariableMatch variable_filters</code> field on it. This allows you to filter <code>WfRun</code>'s by the value of one or more <code>Variable</code>'s when searching for them, returning only matching <code>WfRun</code>'s. This is super useful when using a LittleHorse <code>WfRun</code> to model a business entity, and you need to do something like "find all orders placed by <code>user-id == john</code> and <code>status == OUT_FOR_SHIPPING</code>".</p>
<p>In the past, this was possible using the <code>rpc SearchVariable</code> and then back the <code>WfRunId</code> out of the <code>VariableId</code>; however, that method is a little bit clunky. In reality, our users want to find a <code>WfRunId</code> matching certain criteria; they're not looking for a <code>Variable</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's Next?<a href="https://littlehorse.dev/blog/littlehorse-0.7-release#whats-next" class="hash-link" aria-label="Direct link to What's Next?" title="Direct link to What's Next?">​</a></h2>
<p>We couldn't be more excited about what is coming next.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="apache2-clients">Apache2 Clients<a href="https://littlehorse.dev/blog/littlehorse-0.7-release#apache2-clients" class="hash-link" aria-label="Direct link to Apache2 Clients" title="Direct link to Apache2 Clients">​</a></h3>
<p>Some members of the community have expressed concerns about our clients (SDK's + GRPC code) being licensed by the SSPL license. We heard you, and we will update them to the Apache 2.0 License before our <code>1.0.0</code> release! The server will remain SSPL.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tutorials">Tutorials<a href="https://littlehorse.dev/blog/littlehorse-0.7-release#tutorials" class="hash-link" aria-label="Direct link to Tutorials" title="Direct link to Tutorials">​</a></h3>
<p>One of our team members, Sohini, has been hard at work creating video tutorials which will help you get quickly up to speed on advanced LittleHorse concepts. You can find them here on our <a href="https://www.youtube.com/@LittleHorse-ey3vw/playlists" target="_blank" rel="noopener noreferrer">YouTube</a>.</p>
<p>Additionally, our founder has recorded a series of zoom meetings with himself (yes, you read that right...Colt used zoom to record a tutorial video series) going through quickstarts in all of our three SDK's. You can find them here in <a href="https://www.youtube.com/watch?v=8Zo_UOStg98&amp;t=6s" target="_blank" rel="noopener noreferrer">Java</a>, <a href="https://www.youtube.com/watch?v=oZQc2ISSZsk" target="_blank" rel="noopener noreferrer">Go</a>, or <a href="https://www.youtube.com/watch?v=l3TZOjfpzTw" target="_blank" rel="noopener noreferrer">Python</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="approaching-100">Approaching <code>1.0.0</code><a href="https://littlehorse.dev/blog/littlehorse-0.7-release#approaching-100" class="hash-link" aria-label="Direct link to approaching-100" title="Direct link to approaching-100">​</a></h3>
<p>What's missing before <code>1.0.0</code>? We have some in-progress features that are already merged to <code>master</code> but only partially implemented. If you squint hard enough at our GRPC Api, you might notice that we have support for multi-tenancy and also fine-grained ACL's. They are NOT ready for production use as we need to iron out a few wrinkles, but we will have them ready for <code>1.0.0</code>. We also are working on an <code>rpc MigrateWfSpec</code> which allows you to migrate a running <code>WfRun</code> from an older version of a <code>WfSpec</code> to a newer version. This is hard work for us but it will be highly useful for our users.</p>
<p>Additionally, we are expanding our end-to-end test coverage to try to shake out as many issues as possible <em>before</em> our users tell us about them. So far, the rate of new bugs that we've discovered has slowed down considerably, which makes us think we are getting close to the quality we expect from our own product.</p>
<p>What will change when we release <code>1.0.0</code>? We will be following <a href="https://semver.org/" target="_blank" rel="noopener noreferrer">Semantic Versioning</a> to the letter, which means we will be paying <em>super close attention</em> to any breaking changes to our API. If we want our users to use us for mission critical workloads, we need to take stability seriously—both in terms of performance and API compatibility.</p>
<p>We will also likely have three minor releases per year, with 12 months of patch support for each minor release. This release schedule is copied from Apache Kafka.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="lh-cloud">LH Cloud<a href="https://littlehorse.dev/blog/littlehorse-0.7-release#lh-cloud" class="hash-link" aria-label="Direct link to LH Cloud" title="Direct link to LH Cloud">​</a></h3>
<p>Lastly, stay tuned for LittleHorse Cloud! Early access is open. If you would like to sign up for early access to LH Cloud, visit <a href="https://www.littlehorse.io/lh-cloud" target="_blank" rel="noopener noreferrer">our website</a> or contact <code>sales@littlehorse.io</code>.</p>]]></content:encoded>
            <category>LittleHorse Orchestrator</category>
            <category>LittleHorse Releases</category>
        </item>
        <item>
            <title><![CDATA[Releasing 0.5.0]]></title>
            <link>https://littlehorse.dev/blog/littlehorse-0.5.0-release</link>
            <guid>https://littlehorse.dev/blog/littlehorse-0.5.0-release</guid>
            <pubDate>Fri, 08 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Python, For-Each, LH Platform.]]></description>
            <content:encoded><![CDATA[<p>We are excited to announce the minor release <code>0.5.0</code>.  This release is highlighted by:</p>
<ul>
<li>Alpha support for building <code>WfSpec</code>s in Python.</li>
<li>Improved monitoring and health metrics on the LittleHorse Server.</li>
<li>Support for looping over a <code>JSON_ARR</code> and launching threads in parallel for each element.</li>
<li>Improved Exception Handling.</li>
<li>Limited early access for LittleHorse Platform.</li>
</ul>
<p>In this release, we made great strides towards full Python support, improved monitoring and observability, and added the ability to spawn threads in parallel looping over a <code>JSON_ARR</code> variable.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started">Get Started<a href="https://littlehorse.dev/blog/littlehorse-0.5.0-release#get-started" class="hash-link" aria-label="Direct link to Get Started" title="Direct link to Get Started">​</a></h2>
<p>LittleHorse is free for production use according to the Server-Side Public License!</p>
<p>To get started with LittleHorse OSS, you can:</p>
<ul>
<li>Try our <a href="https://littlehorse.dev/docs/developer-guide/install" target="_blank" rel="noopener noreferrer">quickstarts</a></li>
<li>Visit us on <a href="https://github.com/littlehorse-enterprises/littlehorse" target="_blank" rel="noopener noreferrer">GitHub</a> and give us a <!-- -->⭐<!-- -->!</li>
<li>Download our <a href="https://gallery.ecr.aws/littlehorse" target="_blank" rel="noopener noreferrer">docker images</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="new-features">New Features<a href="https://littlehorse.dev/blog/littlehorse-0.5.0-release#new-features" class="hash-link" aria-label="Direct link to New Features" title="Direct link to New Features">​</a></h2>
<p>We'd like to highlight some of the exciting new features in <code>0.5.0</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="python-wfspec-support">Python <code>WfSpec</code> Support<a href="https://littlehorse.dev/blog/littlehorse-0.5.0-release#python-wfspec-support" class="hash-link" aria-label="Direct link to python-wfspec-support" title="Direct link to python-wfspec-support">​</a></h3>
<p>Our Python SDK now has full support for building <code>WfSpec</code>s! You can check it out at our <a href="https://littlehorse.dev/docs/developer-guide/install">quickstart page</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="for-each-suppport">For-Each Suppport<a href="https://littlehorse.dev/blog/littlehorse-0.5.0-release#for-each-suppport" class="hash-link" aria-label="Direct link to For-Each Suppport" title="Direct link to For-Each Suppport">​</a></h3>
<p>This is a very exciting feature which allows you to iterate over a list and spawn multiple <code>ThreadRun</code>s (like threads in a program).</p>
<p>To see it in action, check out our <a href="https://github.com/littlehorse-enterprises/littlehorse/tree/master/examples/spawn-thread-foreach" target="_blank" rel="noopener noreferrer">example</a> or read the <a href="https://littlehorse.dev/docs/developer-guide/wfspec-development/child-threads" target="_blank" rel="noopener noreferrer">documentation</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="improved-failure-handling">Improved Failure Handling<a href="https://littlehorse.dev/blog/littlehorse-0.5.0-release#improved-failure-handling" class="hash-link" aria-label="Direct link to Improved Failure Handling" title="Direct link to Improved Failure Handling">​</a></h3>
<p>This release introduces a new status for LittleHorse, called <code>EXCEPTION</code>. The <code>EXCEPTION</code> status differs from the <code>ERROR</code> status in the following ways:</p>
<ul>
<li><code>ERROR</code> means an unexpected <em>technical</em> failure occurred. For example, a <code>TaskRun</code> timed out because a third-party API was down.</li>
<li><code>EXCEPTION</code> means that a failure occurred at the <em>business process level</em>. For example, you might use an <code>EXCEPTION</code> when a customer has insufficient funds in her account to complete an order.</li>
</ul>
<p>Just like in programming, you can throw and catch <code>EXCEPTION</code>s (and you can also catch <code>ERROR</code>s). For a blog post that goes in-depth into how LittleHorse makes it easy to handle failures in your workflows, check out our <a href="https://littlehorse.dev/docs/concepts/workflows#failure-handling">Failure Handling Docs</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="lh-server-monitoring">LH Server Monitoring<a href="https://littlehorse.dev/blog/littlehorse-0.5.0-release#lh-server-monitoring" class="hash-link" aria-label="Direct link to LH Server Monitoring" title="Direct link to LH Server Monitoring">​</a></h3>
<p>We added a new path <code>/status</code> on the LH Server's health endpoint (port <code>1822</code> by default) which can be used to inspect the status of all internal Kafka Streams <code>Task</code>s on the LH Server. It presents the following information:</p>
<ul>
<li>All Active Tasks on the host</li>
<li>All Standby Tasks on the host</li>
<li>Any ongoing State Restorations on the host</li>
</ul>
<p>Additionally, we added a <code>/diskUsage</code> endpoint which returns the number of bytes of disk space in use by the LH Server.</p>
<p>LittleHorse Platform uses these endpoints to intelligently scale, manage, and operate LittleHorse for you.</p>
<p>We are also in the process of writing and implementing a Kafka Improvement Proposal to improve visibility of Standby Tasks, which will allow the LittleHorse Operator (both in LH Platform and LH Cloud) to safely and smoothly scale LittleHorse clusters down without any downtime. Stay tuned in the Kafka developer mailing list!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="lh-platform">LH Platform<a href="https://littlehorse.dev/blog/littlehorse-0.5.0-release#lh-platform" class="hash-link" aria-label="Direct link to LH Platform" title="Direct link to LH Platform">​</a></h3>
<p>LittleHorse Platform is a Kubernetes Operator that securely manages a LittleHorse cluster for you in your own environment. It seamlessly integrates with your Kubernetes environment, GitOps workflows, and security strategy (TLS, mTLS, OAuth, Cert Manager, Keycloak).</p>
<p>LittleHorse Platform is now available for limited early access, and has been installed in one of the largest health insurance companies in the US.</p>
<p>To get started with LittleHorse Platform, please <a href="https://docs.google.com/forms/d/e/1FAIpQLScXVvTYy4LQnYoFoRKRQ7ppuxe0KgncsDukvm96qKN0pU5TnQ/viewform?usp=sf_link" target="_blank" rel="noopener noreferrer">contact us</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="persistent-variables">Persistent Variables<a href="https://littlehorse.dev/blog/littlehorse-0.5.0-release#persistent-variables" class="hash-link" aria-label="Direct link to Persistent Variables" title="Direct link to Persistent Variables">​</a></h3>
<p>In LittleHorse <code>0.2.0</code> and later, you can search for <code>Variable</code>s by their value. For example, if you have a Workflow Specification that defines a variable <code>email_address</code>, you can find all Workflow Run's where <code>email_address == 'obiwan@jedi-council.org</code>  by using the <code>SearchVariable</code> rpc call.</p>
<p>The problem with <code>0.2.0</code>? You need to provide the <code>wfSpecVersion</code> in your search request. That means you can only search for a <code>Variable</code> if you know the version of the <code>WfSpec</code> it came from.</p>
<p>Release <code>0.4.0</code> introduced the ability to mark a <code>Variable</code> as <code>persistent</code>, which means that:</p>
<ul>
<li>Every future version of the <code>WfSpec</code> must have the same variable definition with the same index type.</li>
<li>You can now search for variables with a certain value across <em>all versions</em> of the <code>WfSpec</code>.</li>
</ul>
<p>Be on the lookout for an upcoming blog post about using Persistent Variables and a simple backend-for-frontend to build an end-to-end Approval Workflow Application using only LittleHorse!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's Next<a href="https://littlehorse.dev/blog/littlehorse-0.5.0-release#whats-next" class="hash-link" aria-label="Direct link to What's Next" title="Direct link to What's Next">​</a></h2>
<p>Over the next few weeks, we plan to:</p>
<ul>
<li>Add utilities to make it easier to work with the LittleHorse API.</li>
<li>Allow users to throw a Workflow <code>EXCEPTION</code> from within the Task Worker SDK (currently, only <code>ERROR</code> is supported).</li>
<li>Continue hardening the LittleHorse Server's availability and performance story.</li>
<li>Launch limited early accesss for LittleHorse Cloud and LittleHorse UI.</li>
</ul>
<p>To get started with LittleHorse, head over to our <a href="https://littlehorse.dev/docs/developer-guide/install" target="_blank" rel="noopener noreferrer">installation docs</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-about-030-and-040">What about <code>0.3.0</code> and <code>0.4.0</code>?<a href="https://littlehorse.dev/blog/littlehorse-0.5.0-release#what-about-030-and-040" class="hash-link" aria-label="Direct link to what-about-030-and-040" title="Direct link to what-about-030-and-040">​</a></h3>
<p>We also released <code>0.3.0</code> and <code>0.4.0</code> over the past 5 weeks! (And before <code>0.3.0</code>, we had a minor patch bugfix on <code>0.2.1</code>).</p>
<p>The only thing missing with <code>0.3.0</code> and <code>0.4.0</code> is a blog post + announcement. That's because a lot of the features we included in this announcement were partially-implemented, implemented in some languages and not others, or in the "experimental" phase at the time of <code>0.3.0</code> and <code>0.4.0</code>. We accelerated the release of <code>0.3.0</code> and <code>0.4.0</code> because certain early-access customers requested certain features on an accelerated timeline.</p>
<p>As our API is mostly stable now, we will slow down our release cadence to likely a new <code>*.x.*</code> version (a <code>minor</code> release in <a href="https://semver.org/" target="_blank" rel="noopener noreferrer">Semantic Versioning</a>) every two months, with security and bugfix patch releases (<code>*.*.x</code>) as needed.</p>
<p>Additionally, as we introduce new features, we will start a release changelog document in which we document the level of stability of the new API's introduced. For example:</p>
<ul>
<li><code>STABLE</code>: Any changes to this API before the next <a href="https://semver.org/" target="_blank" rel="noopener noreferrer">Major Release</a> will be backwards compatible. The feature is covered by our integration tests.</li>
<li><code>BETA</code>: We don't anticipate any <em>large breaking changes</em> to the feature/API. It is covered by our integration tests, but it <em>might</em> change before the <code>1.0.0</code> release.</li>
<li><code>EXPERIMENTAL</code>: Try it out and give us feedback! But you might want to wait a release or two before putting it into production.</li>
</ul>
<p>The <code>0.6.0</code> release notes will include a table of all of our features and their API Stability Level in all four of our SDK's.</p>]]></content:encoded>
            <category>LittleHorse Orchestrator</category>
            <category>LittleHorse Releases</category>
        </item>
        <item>
            <title><![CDATA[Releasing 0.2.0]]></title>
            <link>https://littlehorse.dev/blog/littlehorse-0.2.0-release</link>
            <guid>https://littlehorse.dev/blog/littlehorse-0.2.0-release</guid>
            <pubDate>Wed, 30 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Making workflow development easy again.]]></description>
            <content:encoded><![CDATA[<p>We are excited to announce the release of <code>0.2.0</code>!  In this release, we added several new features, highlighted by User Tasks, security, and Python support.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started">Get Started<a href="https://littlehorse.dev/blog/littlehorse-0.2.0-release#get-started" class="hash-link" aria-label="Direct link to Get Started" title="Direct link to Get Started">​</a></h2>
<p>LittleHorse is free for production use according to the Server-Side Public License!</p>
<p>To get started with LittleHorse OSS, you can:</p>
<ul>
<li>Visit us on <a href="https://github.com/littlehorse-enterprises" target="_blank" rel="noopener noreferrer">GitHub</a></li>
<li>Try our <a href="https://littlehorse.dev/docs/developer-guide/install#installation-and-quickstart" target="_blank" rel="noopener noreferrer">quickstarts</a></li>
</ul>
<p>Additionally, with version <code>0.2.0</code>, we have released our first two Docker Images:</p>
<ul>
<li><a href="https://gallery.ecr.aws/littlehorse/littlehorse-server" target="_blank" rel="noopener noreferrer"><code>lh-server</code></a>, the production-ready build of the LittleHorse Server.</li>
<li><a href="https://gallery.ecr.aws/littlehorse/littlehorse-standalone" target="_blank" rel="noopener noreferrer"><code>lh-standalone</code></a>, a self-contained build of the LittleHorse Server that you can run to get a working LH Installation for local development.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="new-features">New Features<a href="https://littlehorse.dev/blog/littlehorse-0.2.0-release#new-features" class="hash-link" aria-label="Direct link to New Features" title="Direct link to New Features">​</a></h2>
<p>Release <code>0.2.0</code> contains many exciting new features, and we've highlighted a few here.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="user-tasks">User Tasks<a href="https://littlehorse.dev/blog/littlehorse-0.2.0-release#user-tasks" class="hash-link" aria-label="Direct link to User Tasks" title="Direct link to User Tasks">​</a></h3>
<p><a href="https://littlehorse.dev/docs/concepts/user-tasks" target="_blank" rel="noopener noreferrer">User Tasks</a> are a massive new feature released in <code>0.2.0</code> which allow you to schedule tasks to be executed by a human user alongside tasks that are executed by computers.</p>
<p>In <code>0.2.0</code>, User Tasks have reached stability, meaning that future releases will be backwards-compatible with the current User Tasks API. We currently have the following features:</p>
<ul>
<li>Assignment of tasks to a User or User Group</li>
<li>Reminder Tasks, or <code>TaskRun</code>'s that are scheduled some time after a <code>UserTaskRun</code> is scheduled.</li>
<li>Automatic reassignment of a <code>UserTaskRun</code> after some period of inactivity.</li>
<li>Manual reassignment of a <code>UserTaskRun</code>.</li>
<li><code>UserTaskRun</code> search.</li>
</ul>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The public API for User Tasks is stable in all of the grpc clients and in the Java <code>WfSpec</code> SDK.</p><p>The Go and Python grpc clients both support User Tasks. However, neither Python nor Go yet have support for User Tasks in the <code>WfSpec</code> SDK.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="workflow-threading">Workflow Threading<a href="https://littlehorse.dev/blog/littlehorse-0.2.0-release#workflow-threading" class="hash-link" aria-label="Direct link to Workflow Threading" title="Direct link to Workflow Threading">​</a></h3>
<p>Release <code>0.2.0</code> allows you to use a <code>WAIT_FOR_THREADS</code> node to wait for more than one child thread at one time. For an example, see our <a href="https://github.com/littlehorse-enterprises/littlehorse/tree/master/examples/parallel-approval" target="_blank" rel="noopener noreferrer">Parallel Approval Example</a> on our GitHub.</p>
<p>Future releases will provide <em>backwards-compatible</em> enhancements to this
functionality, allowing various strategies for handling failures of individual child threads.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="python-support">Python Support<a href="https://littlehorse.dev/blog/littlehorse-0.2.0-release#python-support" class="hash-link" aria-label="Direct link to Python Support" title="Direct link to Python Support">​</a></h3>
<p>We have released an alpha <a href="https://github.com/littlehorse-enterprises/littlehorse/tree/master/sdk-python" target="_blank" rel="noopener noreferrer">Python SDK</a>! This release contains:</p>
<ul>
<li>Python client in grpc</li>
<li>Python Task Worker SDK</li>
</ul>
<p>Currently, building <code>WfSpec</code>'s in Python is not supported. We aim to move python Task Worker support from alpha to beta, and add alpha support for <code>WfSpec</code> development in python, in the <code>0.3.0</code> release.</p>
<p>To try out our python task worker client, you can head to <a href="https://littlehorse.dev/docs/developer-guide/install" target="_blank" rel="noopener noreferrer">Installation Docs</a> and the <a href="https://littlehorse.dev/docs/developer-guide/task-worker-development" target="_blank" rel="noopener noreferrer">Task Worker Development Docs</a>.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The Python SDK is in the alpha stage, meaning that future releases could break backwards compatibility.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="security">Security<a href="https://littlehorse.dev/blog/littlehorse-0.2.0-release#security" class="hash-link" aria-label="Direct link to Security" title="Direct link to Security">​</a></h3>
<p>We added beta support for OAuth, TLS, and mTLS in release <code>0.2.0</code>. The following features graduated to "beta" in this release:</p>
<ul>
<li>TLS encryption for incoming connections on all listeners, configured on a per-listener basis.</li>
<li>mTLS to authenticate incoming connections on any listeners, configured on a per-listener basis.</li>
<li>OAuth to authenticate incoming connections on any public listener (excluding the inter-server communication port).</li>
</ul>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>Beta support means that we will soon add significant functionality, and as such a future release <em>might</em> break backwards compatibility.</p><p>However, future releases of a feature in the <em>beta</em> state will most likely be backwards compatible with <code>0.2.0</code> barring exceptional circumstances.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="performance">Performance<a href="https://littlehorse.dev/blog/littlehorse-0.2.0-release#performance" class="hash-link" aria-label="Direct link to Performance" title="Direct link to Performance">​</a></h3>
<p>We made several optimizations to our storage management sub-system, reducing the number of put's and get's into our backing state store by roughly 30%. As a result, a LittleHorse Server running with a single partition is capable of scheduling over 1,100 <code>TaskRun</code>'s per second.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="go-support">Go Support<a href="https://littlehorse.dev/blog/littlehorse-0.2.0-release#go-support" class="hash-link" aria-label="Direct link to Go Support" title="Direct link to Go Support">​</a></h3>
<p>Support for the Go client is now beta. Future releases will maintain compatibility for all features on our documentation.</p>
<p>Release <code>0.3.0</code> will close the gap between the Java and Go SDK's, adding features such as:</p>
<ul>
<li>Format Strings for Variable Assignments in the <code>WfSpec</code> SDK</li>
<li>User Task support in the <code>WfSpec</code> SDK</li>
<li>Configuring Indexes on <code>Variable</code>s in the <code>WfSpec</code> SDK</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's Next<a href="https://littlehorse.dev/blog/littlehorse-0.2.0-release#whats-next" class="hash-link" aria-label="Direct link to What's Next" title="Direct link to What's Next">​</a></h2>
<p>We have several exciting features coming soon over the next few releases, including:</p>
<ul>
<li>Fine-grained access controls</li>
<li>Backward-compatible improvements to <a href="https://littlehorse.dev/docs/concepts/exception-handling" target="_blank" rel="noopener noreferrer">Failure Handling</a></li>
<li>C# support</li>
<li>Python support for building <code>WfSpec</code>s</li>
</ul>
<p>For an enterprise-ready distribution of LittleHorse running in your own datacenter, contact <code>sales@littlehorse.io</code> to inquire about LittleHorse Platform.</p>
<p>For a pay-as-you-go, serverless Managed Service of LittleHorse in the cloud, fill out the <a href="https://docs.google.com/forms/d/e/1FAIpQLScXVvTYy4LQnYoFoRKRQ7ppuxe0KgncsDukvm96qKN0pU5TnQ/viewform" target="_blank" rel="noopener noreferrer">LH Cloud Waitlist Form</a>.</p>]]></content:encoded>
            <category>LittleHorse Orchestrator</category>
            <category>LittleHorse Releases</category>
        </item>
    </channel>
</rss>