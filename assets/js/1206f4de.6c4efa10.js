"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[2944],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(n),h=o,u=c["".concat(p,".").concat(h)]||c[h]||m[h]||i;return n?a.createElement(u,r(r({ref:t},d),{},{components:n})):a.createElement(u,r({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3594:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const i={},r="Conditional Branching",l={unversionedId:"concepts/conditionals",id:"concepts/conditionals",title:"Conditional Branching",description:"Just as if/else allows you to implement control flow in your programs, Conditional Branching allows you to add control flow to your LittleHorse Workflows.",source:"@site/docs/04-concepts/09-conditionals.md",sourceDirName:"04-concepts",slug:"/concepts/conditionals",permalink:"/littlehorse/docs/concepts/conditionals",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Child Threads",permalink:"/littlehorse/docs/concepts/child-threads"},next:{title:"Exception Handling",permalink:"/littlehorse/docs/concepts/exception-handling"}},p={},s=[{value:"Comparator Types",id:"comparator-types",level:2},{value:"<code>LESS_THAN</code>",id:"less_than",level:3},{value:"<code>GREATER_THAN</code>",id:"greater_than",level:3},{value:"<code>LESS_THAN_EQ</code>",id:"less_than_eq",level:3},{value:"<code>GREATER_THAN_EQ</code>",id:"greater_than_eq",level:3},{value:"<code>EQUALS</code>",id:"equals",level:3},{value:"<code>NOT_EQUALS</code>",id:"not_equals",level:3},{value:"<code>IN</code>",id:"in",level:3},{value:"<code>NOT_IN</code>",id:"not_in",level:3}],d={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"conditional-branching"},"Conditional Branching"),(0,o.kt)("p",null,"Just as ",(0,o.kt)("inlineCode",{parentName:"p"},"if/else")," allows you to implement control flow in your programs, Conditional Branching allows you to add control flow to your LittleHorse Workflows."),(0,o.kt)("p",null,"Let's look at how an if statement works in Python:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"if foo < bar:\n    do_something()\n")),(0,o.kt)("p",null,"Look at the booean expression ",(0,o.kt)("inlineCode",{parentName:"p"},"foo < bar"),". It consists of a left-hand-side (",(0,o.kt)("inlineCode",{parentName:"p"},"foo"),"), comparator (",(0,o.kt)("inlineCode",{parentName:"p"},"<"),"), and right-hand-side (",(0,o.kt)("inlineCode",{parentName:"p"},"bar"),")."),(0,o.kt)("p",null,"In LittleHorse, we have Edge Conditions, which also have an LHS, Comparator, and RHS."),(0,o.kt)("p",null,"The LHS and RHS are any ",(0,o.kt)("inlineCode",{parentName:"p"},"VariableAssignment"),", meaning they can be a value taken from some ",(0,o.kt)("inlineCode",{parentName:"p"},"Variable")," or a hard-coded literal value."),(0,o.kt)("h2",{id:"comparator-types"},"Comparator Types"),(0,o.kt)("p",null,"Let's look at all of the Comparators supported by LittleHorse."),(0,o.kt)("h3",{id:"less_than"},(0,o.kt)("inlineCode",{parentName:"h3"},"LESS_THAN")),(0,o.kt)("p",null,"This is equivalent to ",(0,o.kt)("inlineCode",{parentName:"p"},"<")," and is valid for ",(0,o.kt)("inlineCode",{parentName:"p"},"STR"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"INT"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"DOUBLE"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"BOOL")," RHS and LHS."),(0,o.kt)("p",null,"Note that you may provide a ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON_OBJ")," variable with a ",(0,o.kt)("inlineCode",{parentName:"p"},"jsonPath")," as one of your comparands so long as the result of evaluating the ",(0,o.kt)("inlineCode",{parentName:"p"},"jsonPath")," is a primitive type."),(0,o.kt)("p",null,"For example, with the following ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON_OBJ")," variable (let's say the variable is named ",(0,o.kt)("inlineCode",{parentName:"p"},"myVar"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n    "foo": "Hello, there!",\n    "bar": {\n        "baz": 1234\n    }\n}\n')),(0,o.kt)("p",null,"You could do the following in the Java SDK:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'// myVar.bar.baz < 500\nthread.condition(myVar.jsonPath("$.bar.baz), ComparatorPb.LESS_THAN, 500)\n')),(0,o.kt)("h3",{id:"greater_than"},(0,o.kt)("inlineCode",{parentName:"h3"},"GREATER_THAN")),(0,o.kt)("p",null,"This is the same as ",(0,o.kt)("inlineCode",{parentName:"p"},"LESS_THAN"),", except it corresponds to ",(0,o.kt)("inlineCode",{parentName:"p"},">"),"."),(0,o.kt)("h3",{id:"less_than_eq"},(0,o.kt)("inlineCode",{parentName:"h3"},"LESS_THAN_EQ")),(0,o.kt)("p",null,"This is the same as ",(0,o.kt)("inlineCode",{parentName:"p"},"LESS_THAN")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"GREATER_THAN"),", except it corresponds to ",(0,o.kt)("inlineCode",{parentName:"p"},"<="),"."),(0,o.kt)("h3",{id:"greater_than_eq"},(0,o.kt)("inlineCode",{parentName:"h3"},"GREATER_THAN_EQ")),(0,o.kt)("p",null,"Well, you know the drill... ",(0,o.kt)("inlineCode",{parentName:"p"},">="),"."),(0,o.kt)("h3",{id:"equals"},(0,o.kt)("inlineCode",{parentName:"h3"},"EQUALS")),(0,o.kt)("p",null,"This is valid for any variable type, and is similar to ",(0,o.kt)("inlineCode",{parentName:"p"},".equals()")," in Java."),(0,o.kt)("p",null,"One note: if the ",(0,o.kt)("inlineCode",{parentName:"p"},"RHS")," is a different type from the ",(0,o.kt)("inlineCode",{parentName:"p"},"LHS"),", then LittleHorse will try to cast the ",(0,o.kt)("inlineCode",{parentName:"p"},"RHS")," to the same type as the ",(0,o.kt)("inlineCode",{parentName:"p"},"LHS")," (see the ",(0,o.kt)("inlineCode",{parentName:"p"},"Variables")," section for more info). If the cast fails, then the ",(0,o.kt)("inlineCode",{parentName:"p"},"ThreadRun")," fails with a ",(0,o.kt)("inlineCode",{parentName:"p"},"VAR_SUB_ERROR"),"."),(0,o.kt)("h3",{id:"not_equals"},(0,o.kt)("inlineCode",{parentName:"h3"},"NOT_EQUALS")),(0,o.kt)("p",null,"This is the inverse of ",(0,o.kt)("inlineCode",{parentName:"p"},"EQUALS"),"."),(0,o.kt)("h3",{id:"in"},(0,o.kt)("inlineCode",{parentName:"h3"},"IN")),(0,o.kt)("p",null,"This is valid for any type on the ",(0,o.kt)("inlineCode",{parentName:"p"},"LHS")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON_OBJ")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON_ARR")," on the ",(0,o.kt)("inlineCode",{parentName:"p"},"RHS"),". For the ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON_OBJ")," type, this returns true if the ",(0,o.kt)("inlineCode",{parentName:"p"},"LHS")," has a key which is equal to the ",(0,o.kt)("inlineCode",{parentName:"p"},"RHS"),". For the ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON_ARR")," type, it returns true if one of the elements of the ",(0,o.kt)("inlineCode",{parentName:"p"},"RHS")," is equal to the ",(0,o.kt)("inlineCode",{parentName:"p"},"LHS"),"."),(0,o.kt)("h3",{id:"not_in"},(0,o.kt)("inlineCode",{parentName:"h3"},"NOT_IN")),(0,o.kt)("p",null,"This is the inverse of ",(0,o.kt)("inlineCode",{parentName:"p"},"IN"),"."))}m.isMDXComponent=!0}}]);