"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[6854],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},k="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),k=s(n),m=i,c=k["".concat(p,".").concat(m)]||k[m]||u[m]||r;return n?a.createElement(c,o(o({ref:t},d),{},{components:n})):a.createElement(c,o({ref:t},d))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[k]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},192:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_label:"Tasks"},o="TaskDef and TaskRun",l={unversionedId:"concepts/tasks",id:"concepts/tasks",title:"TaskDef and TaskRun",description:"The execution of work is fundamental to any Workflow engine. A unit of work executed by a computer in LittleHorse is represented by the dual objects TaskDef and TaskRun.",source:"@site/docs/04-concepts/03-tasks.md",sourceDirName:"04-concepts",slug:"/concepts/tasks",permalink:"/littlehorse/docs/concepts/tasks",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Tasks"},sidebar:"tutorialSidebar",previous:{title:"Nodes",permalink:"/littlehorse/docs/concepts/nodes"},next:{title:"External Events",permalink:"/littlehorse/docs/concepts/external-events"}},p={},s=[{value:"In the API",id:"in-the-api",level:2},{value:"<code>TaskRun</code> LifeCycle",id:"taskrun-lifecycle",level:2},{value:"<code>TaskRun</code> Status",id:"taskrun-status",level:3},{value:"Retries and <code>TaskAttempt</code>",id:"retries-and-taskattempt",level:3},{value:"Interruptibility",id:"interruptibility",level:3}],d={toc:s},k="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(k,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"taskdef-and-taskrun"},(0,i.kt)("inlineCode",{parentName:"h1"},"TaskDef")," and ",(0,i.kt)("inlineCode",{parentName:"h1"},"TaskRun")),(0,i.kt)("p",null,"The execution of work is fundamental to any Workflow engine. A unit of work executed by a computer in LittleHorse is represented by the dual objects ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskDef")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun"),"."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskDef")," is a LittleHorse API Object which defines a certain type of task that can be executed by a computer. A ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun")," is a LittleHorse API Object representing an instance of such a task being executed by a computer as part of a ",(0,i.kt)("inlineCode",{parentName:"p"},"WfRun"),"."),(0,i.kt)("h2",{id:"in-the-api"},"In the API"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskDef"),"'s ID in the API is simply its ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),". Only one ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskDef")," of a given name can exist at any time."),(0,i.kt)("p",null,"a ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun"),"'s ID in the API is a composite ID, consisting of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ID of its ",(0,i.kt)("inlineCode",{parentName:"li"},"WfRun")),(0,i.kt)("li",{parentName:"ul"},"A guid.")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"WfSpec")," might have a ",(0,i.kt)("inlineCode",{parentName:"p"},"Node")," of type ",(0,i.kt)("inlineCode",{parentName:"p"},"TASK"),". Such a ",(0,i.kt)("inlineCode",{parentName:"p"},"Node")," will have a ",(0,i.kt)("inlineCode",{parentName:"p"},"taskDefName")," field on it which points to a ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskDef"),"."),(0,i.kt)("p",null,"When a ",(0,i.kt)("inlineCode",{parentName:"p"},"WfRun")," reaches a ",(0,i.kt)("inlineCode",{parentName:"p"},"TASK")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Node"),", a ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun")," is created. The associatd ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeRun")," will have a ",(0,i.kt)("inlineCode",{parentName:"p"},"task")," field, containing the ID of the associated ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun"),". The status of the ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeRun")," will mirror the status of the associated ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun"),"."),(0,i.kt)("h2",{id:"taskrun-lifecycle"},(0,i.kt)("inlineCode",{parentName:"h2"},"TaskRun")," LifeCycle"),(0,i.kt)("p",null,"When a ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun")," is created, the LH Server first assigns the ",(0,i.kt)("inlineCode",{parentName:"p"},"input_variables")," for that ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"input_variables")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun")," must match up in terms of name and type with the ",(0,i.kt)("inlineCode",{parentName:"p"},"input_vars")," of the associated ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskDef"),". This mirrors how the arguments to a function invocation in programming must match the method signature."),(0,i.kt)("p",null,"For a ",(0,i.kt)("inlineCode",{parentName:"p"},"TASK")," ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeRun"),", the output of the ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeRun")," (for use with ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable")," mutations) is determined by the output of the first successful ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskAttempt"),"."),(0,i.kt)("h3",{id:"taskrun-status"},(0,i.kt)("inlineCode",{parentName:"h3"},"TaskRun")," Status"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun")," can be in any of the following statuses:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TASK_SCHEDULED"),": It has been scheduled but a Task Worker has not yet "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TASK_RUNNING"),": A Task Worker has received the Task but not yet reported the result."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TASK_SUCCESS"),": The ",(0,i.kt)("inlineCode",{parentName:"li"},"TaskRun")," was completed \ud83d\ude42"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TASK_FAILED"),": An unexpected error or exception was encountered."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TASK_TIMEOUT"),": The Task Worker did not report a result for the ",(0,i.kt)("inlineCode",{parentName:"li"},"TaskRun")," within the allotted timeout."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TASK_OUTPUT_SERIALIZING_ERROR"),": The Task Worker executed the ",(0,i.kt)("inlineCode",{parentName:"li"},"TaskRun")," but was unable to serialize the result when reporting back to the LH Server."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TASK_INPUT_VAR_SUB_ERROR"),": The LH Server was unable to calculate the input variables for the ",(0,i.kt)("inlineCode",{parentName:"li"},"TaskRun"),", or the Task Worker was unable to deserialize them and call the actual function.")),(0,i.kt)("h3",{id:"retries-and-taskattempt"},"Retries and ",(0,i.kt)("inlineCode",{parentName:"h3"},"TaskAttempt")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun")," has a ",(0,i.kt)("inlineCode",{parentName:"p"},"max_attempts")," field which is used to determine the number of retries for a ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun"),". This is determined by the ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskNode")," structure."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Multiple different ",(0,i.kt)("inlineCode",{parentName:"p"},"Node"),"s and even different ",(0,i.kt)("inlineCode",{parentName:"p"},"WfSpec"),"s can use the same ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskDef"),". Since retries are configured at the ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskNode")," level, it is possible for two ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun"),"s of the same ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskDef")," to have a different maximum number of retries.")),(0,i.kt)("p",null,"When a ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun")," is first created, a ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskAttempt")," is also created. If the ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskAttempt")," comes back with a ",(0,i.kt)("inlineCode",{parentName:"p"},"TASK_SUCCESS")," status, then great! The ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun")," is completed, and if it is associated with a ",(0,i.kt)("inlineCode",{parentName:"p"},"TASK")," ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeRun"),", then the output of the ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeRun")," is just the output of the ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskAttempt"),"."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskAttempt")," is considered retryable if it ends with the following states:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TASK_FAILED"),", denoting an exception."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TASK_TIMEOUT"),", denoting that the Task Worker did not report the result of the ",(0,i.kt)("inlineCode",{parentName:"li"},"TaskAttempt")," in time.")),(0,i.kt)("p",null,"If a ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskAttempt")," is retryable and there are sufficient retries left, then another ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskAttempt")," ",(0,i.kt)("em",{parentName:"p"},"within the same ",(0,i.kt)("inlineCode",{parentName:"em"},"TaskRun"))," is created. If any of the retry ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskAttempt"),"s succeed, then the output of the ",(0,i.kt)("inlineCode",{parentName:"p"},"TASK")," ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeRun")," is the output of the first successful ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskAttempt"),". If all fail, then ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeRun")," fails."),(0,i.kt)("h3",{id:"interruptibility"},"Interruptibility"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun")," is considered interruptible if its current ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskAttempt")," is interruptible. A ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskAttempt")," is interruptible if it is in any of the following statuses:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TASK_SUCCESS")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TASK_FAILED")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TASK_TIMEOUT")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TASK_OUTPUT_SERIALIZING_ERROR")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TASK_INPUT_VAR_SUB_ERROR"),".")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskAttempt")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"TASK_SCHEDULED")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"TASK_RUNNING")," state is not considered interruptible; the associated ",(0,i.kt)("inlineCode",{parentName:"p"},"ThreadRun")," will remain in the ",(0,i.kt)("inlineCode",{parentName:"p"},"HALTING")," state until the ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskAttempt")," is reported (either success or failure) or is timed out."),(0,i.kt)("p",null,"For more information, see the ",(0,i.kt)("a",{parentName:"p",href:"/littlehorse/docs/concepts/workflows#threading-model"},(0,i.kt)("inlineCode",{parentName:"a"},"ThreadRun")," Lifecycle documentation"),"."))}u.isMDXComponent=!0}}]);