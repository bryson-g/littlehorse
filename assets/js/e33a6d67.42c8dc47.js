"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[6917],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>h});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),u=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},p=function(e){var a=u(e.components);return n.createElement(s.Provider,{value:a},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||l;return t?n.createElement(h,i(i({ref:a},p),{},{components:t})):n.createElement(h,i({ref:a},p))}));function h(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=t[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,a,t)=>{t.d(a,{Z:()=>i});var n=t(7294),r=t(6010);const l={tabItem:"tabItem_Ymn6"};function i(e){let{children:a,hidden:t,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,i),hidden:t},a)}},4866:(e,a,t)=>{t.d(a,{Z:()=>g});var n=t(7462),r=t(7294),l=t(6010),i=t(2466),o=t(6550),s=t(1980),u=t(7392),p=t(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:n,default:r}}=e;return{value:a,label:t,attributes:n,default:r}}))}function c(e){const{values:a,children:t}=e;return(0,r.useMemo)((()=>{const e=a??d(t);return function(e){const a=(0,u.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function m(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function h(e){let{queryString:a=!1,groupId:t}=e;const n=(0,o.k6)(),l=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,s._X)(l),(0,r.useCallback)((e=>{if(!l)return;const a=new URLSearchParams(n.location.search);a.set(l,e),n.replace({...n.location,search:a.toString()})}),[l,n])]}function f(e){const{defaultValue:a,queryString:t=!1,groupId:n}=e,l=c(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!m({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:l}))),[s,u]=h({queryString:t,groupId:n}),[d,f]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[n,l]=(0,p.Nk)(t);return[n,(0,r.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:n}),k=(()=>{const e=s??d;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{k&&o(k)}),[k]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),f(e)}),[u,f,l]),tabValues:l}}var k=t(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:a,block:t,selectedValue:o,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),c=e=>{const a=e.currentTarget,t=p.indexOf(a),n=u[t].value;n!==o&&(d(a),s(n))},m=e=>{let a=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=p.indexOf(e.currentTarget)+1;a=p[t]??p[0];break}case"ArrowLeft":{const t=p.indexOf(e.currentTarget)-1;a=p[t]??p[p.length-1];break}}a?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},a)},u.map((e=>{let{value:a,label:t,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===a?0:-1,"aria-selected":o===a,key:a,ref:e=>p.push(e),onKeyDown:m,onClick:c},i,{className:(0,l.Z)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":o===a})}),t??a)})))}function v(e){let{lazy:a,children:t,selectedValue:n}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==n}))))}function N(e){const a=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",b.tabList)},r.createElement(y,(0,n.Z)({},e,a)),r.createElement(v,(0,n.Z)({},e,a)))}function g(e){const a=(0,k.Z)();return r.createElement(N,(0,n.Z)({key:String(a)},e))}},9952:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>u,toc:()=>d});var n=t(7462),r=(t(7294),t(3905)),l=t(4866),i=t(5162);const o={},s="Basics",u={unversionedId:"developer-guide/wfspec-development/basics",id:"developer-guide/wfspec-development/basics",title:"Basics",description:"To develop a WfSpec in LittleHorse, you can use the Workflow struct or object in our SDK's. Generally, the Workflow entity constructor requires two arguments:",source:"@site/docs/05-developer-guide/08-wfspec-development/01-basics.md",sourceDirName:"05-developer-guide/08-wfspec-development",slug:"/developer-guide/wfspec-development/basics",permalink:"/littlehorse/docs/developer-guide/wfspec-development/basics",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"WfSpec Development",permalink:"/littlehorse/docs/developer-guide/wfspec-development/"},next:{title:"Conditionals and Loops",permalink:"/littlehorse/docs/developer-guide/wfspec-development/conditionals"}},p={},d=[{value:"Defining a <code>WfRunVariable</code>",id:"defining-a-wfrunvariable",level:2},{value:"A Note on Indexes",id:"a-note-on-indexes",level:3},{value:"Persistent Variables",id:"persistent-variables",level:3},{value:"Defining Variables",id:"defining-variables",level:3},{value:"Executing a <code>TASK</code> Node",id:"executing-a-task-node",level:2},{value:"Task Input Variables",id:"task-input-variables",level:3},{value:"Setting Retention Hours",id:"setting-retention-hours",level:3}],c={toc:d},m="wrapper";function h(e){let{components:a,...t}=e;return(0,r.kt)(m,(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"basics"},"Basics"),(0,r.kt)("p",null,"To develop a ",(0,r.kt)("inlineCode",{parentName:"p"},"WfSpec")," in LittleHorse, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Workflow")," struct or object in our SDK's. Generally, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Workflow")," entity constructor requires two arguments:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The name of the ",(0,r.kt)("inlineCode",{parentName:"li"},"WfSpec")," to create."),(0,r.kt)("li",{parentName:"ol"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"ThreadFunc"),", which is function pointer, lambda function, or interface of some sort which contains the logic for the Entrypoint ",(0,r.kt)("inlineCode",{parentName:"li"},"ThreadSpec"),".")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Workflow")," object translates your ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadFunc")," into a ",(0,r.kt)("inlineCode",{parentName:"p"},"WfSpec"),". As per the ",(0,r.kt)("a",{parentName:"p",href:"/docs/developer-guide/grpc/managing-metadata"},"Metadata Management Documentation"),", you can easily deploy a ",(0,r.kt)("inlineCode",{parentName:"p"},"WfSpec")," once you've gotten the ",(0,r.kt)("inlineCode",{parentName:"p"},"Workflow")," object."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadFunc")," takes in one argument: a ",(0,r.kt)("inlineCode",{parentName:"p"},"WorkflowThread"),". Everything you do goes through the ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadFunc"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadFunc")," defines a ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadSpec"),", and the ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadFunc")," passed into the ",(0,r.kt)("inlineCode",{parentName:"p"},"Workflow")," object or struct is used to build the Entrypoint Thread."),(0,r.kt)("h2",{id:"defining-a-wfrunvariable"},"Defining a ",(0,r.kt)("inlineCode",{parentName:"h2"},"WfRunVariable")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadSpec")," can have ",(0,r.kt)("inlineCode",{parentName:"p"},"VariableDef"),"s, which is similar to declaring a variable in programming. When declaring a ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable")," in LittleHorse, you need to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Provide the ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," of the ",(0,r.kt)("inlineCode",{parentName:"li"},"Variable"),"."),(0,r.kt)("li",{parentName:"ul"},"Specify the ",(0,r.kt)("inlineCode",{parentName:"li"},"VariableType")," or provide a default value from which the type is inferred.")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable"),"'s name must be a valid hostname, meaning lowercase alphanumeric characters separated by a ",(0,r.kt)("inlineCode",{parentName:"p"},"-"),".")),(0,r.kt)("p",null,"Recall the valid types of Variables:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"STR")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"INT")," (64-bit integer, represented as a ",(0,r.kt)("inlineCode",{parentName:"li"},"long")," in Java and ",(0,r.kt)("inlineCode",{parentName:"li"},"int64")," in Go)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DOUBLE")," (64-bit floating point, ",(0,r.kt)("inlineCode",{parentName:"li"},"double")," in Java and ",(0,r.kt)("inlineCode",{parentName:"li"},"float64")," in Go)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BOOL")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"JSON_OBJ")," (a dumped JSON String)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"JSON_ARR")," (a dumped JSON String)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BYTES"))),(0,r.kt)("h3",{id:"a-note-on-indexes"},"A Note on Indexes"),(0,r.kt)("p",null,":::warn\nThe API for indexes on ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable"),"s is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"EXPERIMENTAL")," phase, meaning that it can experience breaking changes prior to the ",(0,r.kt)("inlineCode",{parentName:"p"},"1.0.0")," release.\n:::"),(0,r.kt)("p",null,"LittleHorse allows you to search for various Execution Objects based on their attributes. For example, you can search ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun"),"'s by their status and creation time. Additionally, you can specify that a ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable")," should be indexed."),(0,r.kt)("p",null,"Since LittleHorse is a distributed system, indexes are not as simple as in Postgres where everything lives on one index. There are two types of indexes in LittleHorse:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REMOTE"),", in which the attributes of the index are hashed and sent to a specific partition, offering super-fast lookup.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is ideal for well-distributed indexes, such as the ",(0,r.kt)("inlineCode",{parentName:"li"},"guid")," of a customer."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"LOCAL"),", in which the index is stored on the same partition as the actual ",(0,r.kt)("inlineCode",{parentName:"li"},"WfRun"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is ideal for when the index has a small set of possible values and when collisions are likely.")))),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"If you use a ",(0,r.kt)("inlineCode",{parentName:"p"},"REMOTE")," Index and have millions of objects with a specific value in that index, you will create a hot partition, which is an operational hazard that can cause latency spikes on ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun"),"'s sharing a Server Instance with that index. In extreme cases, it can cause the underlying Kafka cluster to experience operational difficulties.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"As a general rule of thumb, start with a ",(0,r.kt)("inlineCode",{parentName:"p"},"LOCAL")," index, as that is always safe."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"REMOTE")," indexes most often make sense when a ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun")," is tied to an individual person or identity, as we often want to be able to find workflow runs associated with a specific user, and it is rare for a human to have more than a thousand or so workflows associated with him/herself.")),(0,r.kt)("h3",{id:"persistent-variables"},"Persistent Variables"),(0,r.kt)("p",null,"Variable Indexes allow you to search for a ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable")," (and by extension, its ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun"),") by a certain value. For example, if your ",(0,r.kt)("inlineCode",{parentName:"p"},"WfSpec")," defines a ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRunVariable")," called ",(0,r.kt)("inlineCode",{parentName:"p"},"email"),", you can find the ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"email == 'obiwan@jedi.temple'")," with a ",(0,r.kt)("inlineCode",{parentName:"p"},"SearchVariable")," rpc call."),(0,r.kt)("p",null,"However, that requires that you provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"wfSpecVersion")," in your search request. That means you can only search for a ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable")," if you know the version of the ",(0,r.kt)("inlineCode",{parentName:"p"},"WfSpec")," it came from."),(0,r.kt)("p",null,"Release ",(0,r.kt)("inlineCode",{parentName:"p"},"0.4.0")," introduced the ability to mark a ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"persistent"),", which means that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Every future version of the ",(0,r.kt)("inlineCode",{parentName:"li"},"WfSpec")," must have the same variable definition with the same index type."),(0,r.kt)("li",{parentName:"ul"},"You can now search for variables with a certain value across ",(0,r.kt)("em",{parentName:"li"},"all versions")," of the ",(0,r.kt)("inlineCode",{parentName:"li"},"WfSpec"),".")),(0,r.kt)("h3",{id:"defining-variables"},"Defining Variables"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void threadFunction(WorkflowThread thread) {\n    WfRunVariable myVar = thread.addVariable("my-variable", VariableTypePb.STR);\n}\n')),(0,r.kt)("p",null,"The first argument is the name of the variable; the second is the type. Alternatively, you can pass in a default value to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable"),". The following initializes ",(0,r.kt)("inlineCode",{parentName:"p"},"myVar")," to ",(0,r.kt)("inlineCode",{parentName:"p"},'"Hello, there!"'),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void threadFunction(WorkflowThread thread) {\n    WfRunVariable myVar = thread.addVariable("my-variable", "Hello, there!");\n}\n')),(0,r.kt)("p",null,"You can set an index on the variable as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void threadFunction(WorkflowThread thread) {\n    WfRunVariable myVar = thread.addVariable("my-variable", "Hello, there!").withIndex(IndexType.LOCAL_INDEX);\n}\n')),(0,r.kt)("p",null,"And you can mark the ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable")," as Persistent as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void threadFunction(WorkflowThread thread) {\n    WfRunVariable myVar = thread.addVariable("my-variable", "Hello, there!")\n            .withIndex(IndexType.LOCAL_INDEX)\n            .persistent();\n}\n'))),(0,r.kt)(i.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func myThreadFunc(thread *wflib.WorkflowThread) {\n    myVar := thread.AddVariable("my-variable", model.VariableTypePb_STR)\n}\n')),(0,r.kt)("p",null,"You can add do the same and set a default value for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable")," as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func myThreadFunc(thread *wflib.WorkflowThread) {\n    nameVar := thread.AddVariableWithDefault("my-variable", model.VariableType_STR, "Ahsoka Tano")\n}\n')),(0,r.kt)("p",null,"You can add an index on a ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRunVariable")," to make the variable searchable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func myThreadFunc(thread *wflib.WorkflowThread) {\n    nameVar := thread.AddVariableWithDefault("my-variable", model.VariableType_STR, "Ahsoka Tano")\n    nameVar.WithIndex(model.IndexType_REMOTE_INDEX)\n\n    // optionally make it a Persistent variable\n    nameVar.Persistent()\n}\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def thread_function(thread: WorkflowThread) -> None:\n    the_name = thread.add_variable("input-name", VariableType.STR)\n')),(0,r.kt)("p",null,"The first argument is the name of the variable; the second is the type. Alternatively, you can pass in a default value to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def thread_function(thread: WorkflowThread) -> None:\n    the_name = thread.add_variable("input-name", VariableType.STR, "The Mandalorian")\n')),(0,r.kt)("p",null,"You can set an index on the variable as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def thread_function(thread: WorkflowThread) -> None:\n    the_name = thread.add_variable("input-name", VariableType.STR)\n    the_name.with_index(IndexType.LOCAL_INDEX)\n\n    # optionally make the variable a Persistent variable\n    the_name.persistent()\n')))),(0,r.kt)("h2",{id:"executing-a-task-node"},"Executing a ",(0,r.kt)("inlineCode",{parentName:"h2"},"TASK")," Node"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"WorkflowThread::execute()")," method can be used to execute a Task. It is required that the ",(0,r.kt)("inlineCode",{parentName:"p"},"TaskDef")," is already registered with the LH Server, and that you have a Task Worker that is polling for those tasks."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"It is perfectly acceptable for a ",(0,r.kt)("inlineCode",{parentName:"p"},"WfSpec")," written in one language to execute tasks that are defined and run in other languages.")),(0,r.kt)("p",null,"To execute the ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," task, you simply do the following:"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void myWf(ThreadFunction thread) {\n    NodeOutput output = thread.execute("foo");\n}\n'))),(0,r.kt)(i.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func myThreadFunc(thread *wflib.WorkflowThread) {\n    taskOutput := thread.Execute("foo")\n}\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def thread_function(thread: WorkflowThread) -> None:\n    thread.execute("foo")\n')))),(0,r.kt)("h3",{id:"task-input-variables"},"Task Input Variables"),(0,r.kt)("p",null,"You can pass input variables to a Task. Let's say, for example, I have a Python Task Function as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'async def my_task(some_str: str, some_int: int) -> str:\n    return f"Inputs were {some_str} and {some_int}"\n')),(0,r.kt)("p",null,"The resulting ",(0,r.kt)("inlineCode",{parentName:"p"},"TaskDef")," has two input variables, one of type ",(0,r.kt)("inlineCode",{parentName:"p"},"STR")," and another of type ",(0,r.kt)("inlineCode",{parentName:"p"},"INT"),"."),(0,r.kt)("p",null,"You can hard-code the input variables in a call to that ",(0,r.kt)("inlineCode",{parentName:"p"},"TaskDef")," as follows:"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String inputStrVal = "input string value!";\nint inputIntVal = 54321;\nthread.execute("foo", inputStrVal, inputIntVal);\n'))),(0,r.kt)(i.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'inputStrVal := "input string value!"\ninputIntVal := 54321\nthread.Execute("foo", inputStrVal, inputIntVal)\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'str_val = "input string value!"\nint_val = 54321\nthread.execute("foo", str_val, int_val)\n')))),(0,r.kt)("p",null,"Alternatively, if you have a ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRunVariable"),", you can use it as input:"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void threadFunction(WorkflowThread thread) {\n    WfRunVariable myStr = thread.addVariable("my-str", VariableType.STR);\n    WfRunVariable myInt = thread.addVariable("my-int", VariableType.INT);\n\n    thread.execute("foo", myStr, myInt);\n}\n'))),(0,r.kt)(i.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func threadFunction(thread *wflib.WorkflowThread) {\n    myStr := thread.AddVariable("my-str", model.VariableType_STR)\n    myInt := thread.AddVariable("my-int", model.VariableType_INT)\n\n    thread.Execute("foo", myStr, myInt)\n}\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def thread_function(thread: WorkflowThread) -> None:\n    my_str = thread.add_variable("my-str", VariableType.STR)\n    my_int = thread.add_variable("my-int", VariableType.INT)\n    thread.execute("foo", my_str, my_int)\n')))),(0,r.kt)("h3",{id:"setting-retention-hours"},"Setting Retention Hours"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Workflow::withRetentionHours()")," method to set how long a ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun")," should stay on the system. Remember that our default system hosts ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun"),"s for 168 hours (7 days). For example, if the ",(0,r.kt)("inlineCode",{parentName:"p"},"WfSpec")," has a retention period of 2 hours, a ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun")," will be deleted 2 hours after it is ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLETED")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ERROR"),":"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Workflow wf = new WorkflowImpl(...)\nwf.withRetentionHours(23);\nwf.register(...);\n"))),(0,r.kt)(i.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'client := ...;\nwf := wflib.NewWorkflow(basic.MyWorkflow, "my-workflow")\nputWf, _ := wf.Compile()\n\nhours := int32(23) \nputWf.WithRetentionHours(&hours)\nresp, err := client.PutWfSpec(putWf)\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'wf = Workflow("my-wf", thread_function)\nwf.retention_hours = 23\nlittlehorse.create_workflow_spec(wf, config)\n')))))}h.isMDXComponent=!0}}]);