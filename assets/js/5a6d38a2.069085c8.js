"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[4693],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>f});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=n.createContext({}),d=function(e){var a=n.useContext(u),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=d(e.components);return n.createElement(u.Provider,{value:a},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),s=d(t),m=r,f=s["".concat(u,".").concat(m)]||s[m]||c[m]||l;return t?n.createElement(f,o(o({ref:a},p),{},{components:t})):n.createElement(f,o({ref:a},p))}));function f(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=m;var i={};for(var u in a)hasOwnProperty.call(a,u)&&(i[u]=a[u]);i.originalType=e,i[s]="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=t[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,a,t)=>{t.d(a,{Z:()=>o});var n=t(7294),r=t(6010);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:a,hidden:t,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,o),hidden:t},a)}},4866:(e,a,t)=>{t.d(a,{Z:()=>T});var n=t(7462),r=t(7294),l=t(6010),o=t(2466),i=t(6550),u=t(1980),d=t(7392),p=t(12);function s(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:n,default:r}}=e;return{value:a,label:t,attributes:n,default:r}}))}function c(e){const{values:a,children:t}=e;return(0,r.useMemo)((()=>{const e=a??s(t);return function(e){const a=(0,d.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function m(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function f(e){let{queryString:a=!1,groupId:t}=e;const n=(0,i.k6)(),l=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,u._X)(l),(0,r.useCallback)((e=>{if(!l)return;const a=new URLSearchParams(n.location.search);a.set(l,e),n.replace({...n.location,search:a.toString()})}),[l,n])]}function h(e){const{defaultValue:a,queryString:t=!1,groupId:n}=e,l=c(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!m({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:l}))),[u,d]=f({queryString:t,groupId:n}),[s,h]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[n,l]=(0,p.Nk)(t);return[n,(0,r.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:n}),b=(()=>{const e=u??s;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),d(e),h(e)}),[d,h,l]),tabValues:l}}var b=t(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:a,block:t,selectedValue:i,selectValue:u,tabValues:d}=e;const p=[],{blockElementScrollPositionUntilNextRender:s}=(0,o.o5)(),c=e=>{const a=e.currentTarget,t=p.indexOf(a),n=d[t].value;n!==i&&(s(a),u(n))},m=e=>{let a=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=p.indexOf(e.currentTarget)+1;a=p[t]??p[0];break}case"ArrowLeft":{const t=p.indexOf(e.currentTarget)-1;a=p[t]??p[p.length-1];break}}a?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},a)},d.map((e=>{let{value:a,label:t,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===a?0:-1,"aria-selected":i===a,key:a,ref:e=>p.push(e),onKeyDown:m,onClick:c},o,{className:(0,l.Z)("tabs__item",k.tabItem,o?.className,{"tabs__item--active":i===a})}),t??a)})))}function y(e){let{lazy:a,children:t,selectedValue:n}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==n}))))}function N(e){const a=h(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",k.tabList)},r.createElement(v,(0,n.Z)({},e,a)),r.createElement(y,(0,n.Z)({},e,a)))}function T(e){const a=(0,b.Z)();return r.createElement(N,(0,n.Z)({key:String(a)},e))}},4010:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>u,default:()=>f,frontMatter:()=>i,metadata:()=>d,toc:()=>s});var n=t(7462),r=(t(7294),t(3905)),l=t(4866),o=t(5162);const i={},u="Mutating Variables",d={unversionedId:"developer-guide/wfspec-development/mutating-variables",id:"developer-guide/wfspec-development/mutating-variables",title:"Mutating Variables",description:"Recall from the Concepts Documentation that every Node can have zero or more VariableMutations on it. A VariableMutation changes the value of a ThreadRun's Variables.",source:"@site/docs/05-developer-guide/08-wfspec-development/03-mutating-variables.md",sourceDirName:"05-developer-guide/08-wfspec-development",slug:"/developer-guide/wfspec-development/mutating-variables",permalink:"/docs/developer-guide/wfspec-development/mutating-variables",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Conditionals and Loops",permalink:"/docs/developer-guide/wfspec-development/conditionals"},next:{title:"External Events",permalink:"/docs/developer-guide/wfspec-development/external-events"}},p={},s=[{value:"Basic Structure",id:"basic-structure",level:2},{value:"Examples",id:"examples",level:2},{value:"Hard-Coded Literal Value",id:"hard-coded-literal-value",level:3},{value:"Using a <code>NodeOutput</code>",id:"using-a-nodeoutput",level:3},{value:"Using other <code>WfRunVariables</code>",id:"using-other-wfrunvariables",level:3},{value:"Using JsonPath",id:"using-jsonpath",level:2}],c={toc:s},m="wrapper";function f(e){let{components:a,...t}=e;return(0,r.kt)(m,(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mutating-variables"},"Mutating Variables"),(0,r.kt)("p",null,"Recall from the ",(0,r.kt)("a",{parentName:"p",href:"/docs/concepts/variables"},"Concepts Documentation")," that every ",(0,r.kt)("inlineCode",{parentName:"p"},"Node")," can have zero or more ",(0,r.kt)("inlineCode",{parentName:"p"},"VariableMutation"),"s on it. A ",(0,r.kt)("inlineCode",{parentName:"p"},"VariableMutation")," changes the value of a ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadRun"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable"),"s."),(0,r.kt)("p",null,"You can add a ",(0,r.kt)("inlineCode",{parentName:"p"},"VariableMutation")," at any point in your Thread Function by using tghe ",(0,r.kt)("inlineCode",{parentName:"p"},"WorkflowThread#mutate()")," method or function."),(0,r.kt)("h2",{id:"basic-structure"},"Basic Structure"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"WorkflowThread::Mutate()")," functions/methods take three arguments:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"WfRunVariable")," which is the LHS to mutate."),(0,r.kt)("li",{parentName:"ol"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"VariableMutationType")," which specifies which mutation to execute."),(0,r.kt)("li",{parentName:"ol"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"WfRunVariable"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"NodeOutput"),", Object/interface/struct, or primitive type to serve as the RHS for the mutation.")),(0,r.kt)("p",null,"The valid Mutation Types come from the ",(0,r.kt)("inlineCode",{parentName:"p"},"VariableMutationType")," enum and are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ASSIGN")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ADD")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SUBTRACT")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DIVIDE")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MULTIPLY")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EXTEND")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REMOVE_IF_PRESENT")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REMOVE_KEY")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REMOVE_INDEX"))),(0,r.kt)("p",null,"Refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/concepts/variables"},"Concepts Documentation")," for a description of what each mutation type does."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Here are some examples of mutating variables inside a ",(0,r.kt)("inlineCode",{parentName:"p"},"WfSpec"),"."),(0,r.kt)("h3",{id:"hard-coded-literal-value"},"Hard-Coded Literal Value"),(0,r.kt)("p",null,"Let's assign our variable ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," to the hard-coded value of ",(0,r.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void threadFunction(WorkflowThread thread) {\n    WfRunVariable foo = thread.addVariable("foo", VariableType.INT);\n    // ... optionally execute some tasks\n    thread.mutate(foo, VariableMutationType.ASSIGN, 3);\n}\n'))),(0,r.kt)(o.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func someThreadFunction(thread *wflib.WorkflowThread) {\n    foo := thread.AddVariable("foo", model.VariableType_INT)\n    // ... optionally execute some tasks\n    thread.Mutate(foo, model.VariableMutationType_ASSIGN, 3)\n}\n'))),(0,r.kt)(o.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def thread_function(thread: WorkflowThread) -> None:\n    foo = thread.add_variable("foo", VariableType.INT)\n    # ... optionally execute some tasks\n    thread.mutate(foo, VariableMutationType.ASSIGN, 3)\n')))),(0,r.kt)("h3",{id:"using-a-nodeoutput"},"Using a ",(0,r.kt)("inlineCode",{parentName:"h3"},"NodeOutput")),(0,r.kt)("p",null,"Let's say we have a ",(0,r.kt)("inlineCode",{parentName:"p"},"TaskDef")," which returns an ",(0,r.kt)("inlineCode",{parentName:"p"},"INT")," value, and we want to add that value to our ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRunVariable"),". To do that, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"NodeOutput")," as the ",(0,r.kt)("inlineCode",{parentName:"p"},"RHS"),"."),(0,r.kt)("p",null,"This is analogous to the following pseudocode."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"int myInt = 1;\nmyInt += doTask1();\n")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void threadFunction(WorkflowThread thread) {\n    WfRunVariable foo = thread.addVariable("foo", 3);\n    NodeOutput intOutput = thread.execute("some-task-that-returns-int");\n    thread.mutate(foo, VariableMutationType.ADD, intOutput);\n}\n'))),(0,r.kt)(o.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func someThreadFunction(thread *wflib.WorkflowThread) {\n    foo := thread.AddVariableWithDefault("foo", model.VariableType_INT, 1)\n    taskOutput := thread.Execute("some-task-that-returns-int")\n    thread.Mutate(foo, model.VariableMutationType_ADD, taskOutput)\n}\n'))),(0,r.kt)(o.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def thread_function(thread: WorkflowThread) -> None:\n    foo = thread.add_variable("foo", VariableType.INT, 3)\n    int_output = thread.execute("some-task-that-returns-int")\n    thread.mutate(foo, VariableMutationType.ADD, int_output)\n')))),(0,r.kt)("h3",{id:"using-other-wfrunvariables"},"Using other ",(0,r.kt)("inlineCode",{parentName:"h3"},"WfRunVariables")),(0,r.kt)("p",null,"We can also use another ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRunVariable")," as the ",(0,r.kt)("inlineCode",{parentName:"p"},"RHS"),". For example, if our ",(0,r.kt)("inlineCode",{parentName:"p"},"LHS")," is a ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON_ARR"),", we append a ",(0,r.kt)("inlineCode",{parentName:"p"},"STR")," variable to it as follows:"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void threadFunction(WorkflowThread thread) {\n    WfRunVariable strToAppend = thread.addVariable("string-to-append", VariableType.STR);\n    WfRunVariable myList = thread.addVariable("my-list", VariableType.JSON_ARR);\n\n    // ... execute some tasks\n\n    thread.mutate(myList, VariableMutationType.EXTEND, strToAppend);\n}\n'))),(0,r.kt)(o.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func someThreadFunction(thread *wflib.WorkflowThread) {\n    strToAppend := thread.AddVariable("string-to-append", model.VariableType_STR)\n    myList := thread.AddVariable("my-list", model.VariableType_JSON_ARR)\n\n    // ... execute a few tasks\n\n    thread.Mutate(myList, model.VariableMutationType_EXTEND, strToAppend)\n}\n'))),(0,r.kt)(o.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def thread_function(thread: WorkflowThread) -> None:\n    str_to_append = thread.add_variable("string-to-append", VariableType.STR)\n    my_list = thread.add_variable("my-list", VariableType.JSON_ARR)\n\n    # ... execute a few tasks\n\n    thread.mutate(my_list, VariableMutationType.EXTEND, str_to_append)\n')))),(0,r.kt)("h2",{id:"using-jsonpath"},"Using JsonPath"),(0,r.kt)("p",null,"Both ",(0,r.kt)("inlineCode",{parentName:"p"},"NodeOutput")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRunVariable")," have a ",(0,r.kt)("inlineCode",{parentName:"p"},"#jsonPath()")," method."),(0,r.kt)("p",null,"If your ",(0,r.kt)("inlineCode",{parentName:"p"},"LHS")," variable is of type ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON_ARR")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON_OBJ"),", you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRunVariable#jsonPath()")," to allow you to mutate a specific sub-field of your object or list. For eample, if I have a ",(0,r.kt)("inlineCode",{parentName:"p"},"my-var")," variable as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "foo": "bar",\n  "counter": 123\n}\n')),(0,r.kt)("p",null,"and I want to increment the ",(0,r.kt)("inlineCode",{parentName:"p"},"counter")," field, I can do so as follows:"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void threadFunction(WorkflowThread thread) {\n    WfRunVariable myVar = thread.addVariable("my-var", VariableType.JSON_OBJ);\n    // ... execute some tasks\n    thread.mutate(myVar.jsonPath("$.foo"), VariableMutationType.ADD, 1);\n}\n'))),(0,r.kt)(o.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func someThread(thread *wflib.WorkflowThread) {\n  myVar := thread.AddVariable("my-var", model.VariableType_JSON_OBJ)\n  fooPath := myVar.JsonPath("$.foo")\n  // ... execute some tasks\n  thread.Mutate(&fooPath, model.VariableMutationType_ADD, 1)\n}\n'))),(0,r.kt)(o.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def thread_function(thread: WorkflowThread) -> None:\n    my_var = thread.add_variable("my-var", VariableType.JSON_OBJ)\n    # ... execute some tasks\n    thread.mutate(my_var.with_json_path("$.foo"), VariableMutationType.ADD, 1)\n')))),(0,r.kt)("p",null,"You can also use ",(0,r.kt)("inlineCode",{parentName:"p"},".jsonPath()")," on the RHS to pick out a specific field of your ",(0,r.kt)("inlineCode",{parentName:"p"},"RHS")," value."))}f.isMDXComponent=!0}}]);