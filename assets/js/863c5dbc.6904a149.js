"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[8478],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(t),h=i,m=u["".concat(p,".").concat(h)]||u[h]||c[h]||r;return t?a.createElement(m,l(l({ref:n},d),{},{components:t})):a.createElement(m,l({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=h;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},6780:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=t(7462),i=(t(7294),t(3905));const r={sidebar_label:"Exception Handling"},l="Exception Handling",o={unversionedId:"concepts/exception-handling",id:"concepts/exception-handling",title:"Exception Handling",description:"When things go wrong, LittleHorse has got you covered. That's where Failure Handling comes into play.",source:"@site/docs/04-concepts/10-exception-handling.md",sourceDirName:"04-concepts",slug:"/concepts/exception-handling",permalink:"/docs/concepts/exception-handling",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_label:"Exception Handling"},sidebar:"tutorialSidebar",previous:{title:"Conditional Branching",permalink:"/docs/concepts/conditionals"},next:{title:"Interrupts",permalink:"/docs/concepts/interrupts"}},p={},s=[{value:"What Are Failures?",id:"what-are-failures",level:2},{value:"Business <code>EXCEPTION</code>s",id:"business-exceptions",level:3},{value:"Technical <code>ERROR</code>s",id:"technical-errors",level:3},{value:"Failure Names",id:"failure-names",level:3},{value:"Failure Content",id:"failure-content",level:3},{value:"Handling Failures",id:"handling-failures",level:2},{value:"Throwing <code>EXCEPTION</code>s",id:"throwing-exceptions",level:2}],d={toc:s},u="wrapper";function c(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"exception-handling"},"Exception Handling"),(0,i.kt)("p",null,"When things go wrong, LittleHorse has got you covered. That's where Failure Handling comes into play. "),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/blog/littlehorse-0.5.0-release"},(0,i.kt)("inlineCode",{parentName:"a"},"0.5.0")," release")," introduced a new value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"LHStatus")," enum (used in ",(0,i.kt)("inlineCode",{parentName:"p"},"WfRun"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ThreadRun"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeRun"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"LHStatus.EXCEPTION"),". "),(0,i.kt)("h2",{id:"what-are-failures"},"What Are Failures?"),(0,i.kt)("p",null,"A Failure in LittleHorse is like an Exception in programming. It means that A Bad Thing\xae has happened. However, we should note that LittleHorse is at its core a Workflow Engine. Therefore, there are two potential sources of Failure:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"A technical process, such as an external API call, fails."),(0,i.kt)("li",{parentName:"ol"},"Something goes wrong at the business process level; for example, a credit card has insufficient funds.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Exception Handling in LittleHorse is a fully separate concept from ",(0,i.kt)("a",{parentName:"p",href:"https://littlehorse.dev/docs/concepts/tasks#retries-and-taskattempt"},(0,i.kt)("inlineCode",{parentName:"a"},"TaskRun")," retries"),".")),(0,i.kt)("h3",{id:"business-exceptions"},"Business ",(0,i.kt)("inlineCode",{parentName:"h3"},"EXCEPTION"),"s"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/blog/littlehorse-0.5.0-release"},"Release ",(0,i.kt)("inlineCode",{parentName:"a"},"0.3.0"))," introduced the ",(0,i.kt)("inlineCode",{parentName:"p"},"EXCEPTION")," status to LittleHorse (it was made stable in ",(0,i.kt)("inlineCode",{parentName:"p"},"0.5.0"),"). This was because initial feedback from users was that when a ",(0,i.kt)("inlineCode",{parentName:"p"},"WfRun"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ThreadRun"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeRun")," is in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ERROR")," status, it is difficult to know whether the failure was caused by a technical outage or by business logic. Often, we want to handle such cases differently."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"EXCEPTION")," status fills this gap by offering a status to represent a specific business process failure. The user provides the name of the ",(0,i.kt)("inlineCode",{parentName:"p"},"EXCEPTION")," and must explicitly throw such an exception by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"WorkflowThread#fail()")," in any ",(0,i.kt)("inlineCode",{parentName:"p"},"WfSpec")," SDK."),(0,i.kt)("p",null,"This is similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"throw new FooException()")," in java."),(0,i.kt)("h3",{id:"technical-errors"},"Technical ",(0,i.kt)("inlineCode",{parentName:"h3"},"ERROR"),"s"),(0,i.kt)("p",null,"An ",(0,i.kt)("inlineCode",{parentName:"p"},"ERROR")," in LittleHorse means that some technical process has failed. Causes of an ",(0,i.kt)("inlineCode",{parentName:"p"},"ERROR")," include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("inlineCode",{parentName:"li"},"TaskRun")," timeout."),(0,i.kt)("li",{parentName:"ul"},"An unexpected exception thrown by the Task Worker when processing a ",(0,i.kt)("inlineCode",{parentName:"li"},"TaskRun"),"."),(0,i.kt)("li",{parentName:"ul"},"Casting errors when attempting to serialize inputs for a ",(0,i.kt)("inlineCode",{parentName:"li"},"TaskRun"),"."),(0,i.kt)("li",{parentName:"ul"},"Casting errors when processing the outputs of a ",(0,i.kt)("inlineCode",{parentName:"li"},"NodeRun"),".")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"WfSpec")," SDK does not surface the ability to throw an ",(0,i.kt)("inlineCode",{parentName:"p"},"ERROR"),"; however, the SDK does allow users to catch and handle ",(0,i.kt)("inlineCode",{parentName:"p"},"ERROR"),"s in the same manner as ",(0,i.kt)("inlineCode",{parentName:"p"},"EXCEPTION"),"s."),(0,i.kt)("h3",{id:"failure-names"},"Failure Names"),(0,i.kt)("p",null,"Every Failure (either ",(0,i.kt)("inlineCode",{parentName:"p"},"EXCEPTION")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ERROR"),") has a name. This is useful for two reasons:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"It allows users to define different handlers for specific Failure types."),(0,i.kt)("li",{parentName:"ol"},"It provides better visibility into just what went wrong in a ",(0,i.kt)("inlineCode",{parentName:"li"},"WfRun"),".")),(0,i.kt)("p",null,"All ",(0,i.kt)("inlineCode",{parentName:"p"},"ERROR")," names are in ",(0,i.kt)("inlineCode",{parentName:"p"},"UPPER_UNDERSCORE_CASE"),", and they are pre-defined by LittleHorse. They are as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"CHILD_FAILURE"),": A Child ",(0,i.kt)("inlineCode",{parentName:"p"},"ThreadRun")," failed with an uncaught ",(0,i.kt)("inlineCode",{parentName:"p"},"ERROR")," (not ",(0,i.kt)("inlineCode",{parentName:"p"},"EXCEPTION"),").")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"VAR_SUB_ERROR"),": Failed to assign an input variable (whether to a ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeRun")," of some sort or a child ",(0,i.kt)("inlineCode",{parentName:"p"},"ThreadRun"),").")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"VAR_MUTATION_ERROR"),": Failed mutating the value of a variable.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"USER_TASK_CANCELLED"),": A ",(0,i.kt)("inlineCode",{parentName:"p"},"UserTaskRun")," was cancelled.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"TIMEOUT"),": Some timeout occurred. Usually, this is thrown by a ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"TASK_FAILURE"),": Some uncaught exception was thrown by the Task Worker while executing a ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskRun"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"INTERNAL_ERROR"),": An unknown problem occurred. This is exceedingly rare.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"VAR_ERROR"),": This is a super-type of ",(0,i.kt)("inlineCode",{parentName:"p"},"VAR_SUB_ERROR")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"VAR_MUTATION_ERROR"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"TASK_ERROR"),": This is a super-type of ",(0,i.kt)("inlineCode",{parentName:"p"},"TIMEOUT")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"TASK_FAILURE"),"."))),(0,i.kt)("p",null,"In contrast, all ",(0,i.kt)("inlineCode",{parentName:"p"},"EXCEPTION")," names are in ",(0,i.kt)("inlineCode",{parentName:"p"},"dns-subdomain-format"),", and they are specified by you, the user!"),(0,i.kt)("p",null,"Failure names are important both when handling and throwing Failures, so stay tuned."),(0,i.kt)("h3",{id:"failure-content"},"Failure Content"),(0,i.kt)("p",null,"In programming, exceptions often have some content or values to them. For example, the grpc ",(0,i.kt)("inlineCode",{parentName:"p"},"StatusRuntimeException")," in Java contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"Code")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},"String description"),". Likewise, a Failure in LittleHorse has content in the form of a single ",(0,i.kt)("inlineCode",{parentName:"p"},"VariableValue"),", which is of type ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL")," if there is no content. Any Failure Handler can access the content of the failure using the special reserved ",(0,i.kt)("inlineCode",{parentName:"p"},"INPUT")," variable."),(0,i.kt)("h2",{id:"handling-failures"},"Handling Failures"),(0,i.kt)("p",null,"How can you recover when things go wrong? That's where Failure Handler's come into play. In programming, you can define a block of code (exception handler) that runs to handle a certain exception. In LittleHorse, you specify a ",(0,i.kt)("inlineCode",{parentName:"p"},"ThreadSpec")," that runs when a Failure of a certain type occurs."),(0,i.kt)("p",null,"There are three methods on the ",(0,i.kt)("inlineCode",{parentName:"p"},"WorkflowThread")," which allow this to happen:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"WorkflowThread#handleException()")," is used to handle business failures (",(0,i.kt)("inlineCode",{parentName:"li"},"EXCEPTION"),")."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"WorkflowThread#handleError()")," is used to handle technical failures (",(0,i.kt)("inlineCode",{parentName:"li"},"ERROR"),")."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"WorkflowThread#handleAnyFailure()")," registers a handler for any Failure, whether it's an ",(0,i.kt)("inlineCode",{parentName:"li"},"EXCEPTION")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"ERROR"),".")),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"handleException")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"handleError"),", you can optionally pass in a specific ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," of the Exception or Error that you wish to handle."),(0,i.kt)("h2",{id:"throwing-exceptions"},"Throwing ",(0,i.kt)("inlineCode",{parentName:"h2"},"EXCEPTION"),"s"),(0,i.kt)("p",null,"You can throw an exception using the ",(0,i.kt)("inlineCode",{parentName:"p"},"WorkflowThread#fail()")," method."))}c.isMDXComponent=!0}}]);