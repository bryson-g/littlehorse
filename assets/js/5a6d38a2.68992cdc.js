"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[4693],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),s=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=s(a),m=r,h=p["".concat(u,".").concat(m)]||p[m]||c[m]||l;return a?n.createElement(h,o(o({ref:t},d),{},{components:a})):n.createElement(h,o({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),r=a(6010);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,o),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>T});var n=a(7462),r=a(7294),l=a(6010),o=a(2466),i=a(6550),u=a(1980),s=a(7392),d=a(12);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function c(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??p(a);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,u._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function f(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=c(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[u,s]=h({queryString:a,groupId:n}),[p,f]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,d.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),b=(()=>{const e=u??p;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),s(e),f(e)}),[s,f,l]),tabValues:l}}var b=a(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:a,selectedValue:i,selectValue:u,tabValues:s}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),c=e=>{const t=e.currentTarget,a=d.indexOf(t),n=s[a].value;n!==i&&(p(t),u(n))},m=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},s.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:c},o,{className:(0,l.Z)("tabs__item",k.tabItem,o?.className,{"tabs__item--active":i===t})}),a??t)})))}function y(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function N(e){const t=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",k.tabList)},r.createElement(v,(0,n.Z)({},e,t)),r.createElement(y,(0,n.Z)({},e,t)))}function T(e){const t=(0,b.Z)();return r.createElement(N,(0,n.Z)({key:String(t)},e))}},4010:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905)),l=a(4866),o=a(5162);const i={},u="Mutating Variables",s={unversionedId:"developer-guide/wfspec-development/mutating-variables",id:"developer-guide/wfspec-development/mutating-variables",title:"Mutating Variables",description:"Recall from the Concepts Documentation that every Node can have zero or more VariableMutations on it. A VariableMutation changes the value of a ThreadRun's Variables.",source:"@site/docs/05-developer-guide/08-wfspec-development/03-mutating-variables.md",sourceDirName:"05-developer-guide/08-wfspec-development",slug:"/developer-guide/wfspec-development/mutating-variables",permalink:"/littlehorse/docs/developer-guide/wfspec-development/mutating-variables",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Conditionals and Loops",permalink:"/littlehorse/docs/developer-guide/wfspec-development/conditionals"},next:{title:"External Events",permalink:"/littlehorse/docs/developer-guide/wfspec-development/external-events"}},d={},p=[{value:"Basic Structure",id:"basic-structure",level:2},{value:"Examples",id:"examples",level:2},{value:"Hard-Coded Literal Value",id:"hard-coded-literal-value",level:3},{value:"Using a <code>NodeOutput</code>",id:"using-a-nodeoutput",level:3},{value:"Using other <code>WfRunVariables</code>",id:"using-other-wfrunvariables",level:3},{value:"Using JsonPath",id:"using-jsonpath",level:2}],c={toc:p},m="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mutating-variables"},"Mutating Variables"),(0,r.kt)("p",null,"Recall from the ",(0,r.kt)("a",{parentName:"p",href:"/littlehorse/docs/concepts/variables"},"Concepts Documentation")," that every ",(0,r.kt)("inlineCode",{parentName:"p"},"Node")," can have zero or more ",(0,r.kt)("inlineCode",{parentName:"p"},"VariableMutation"),"s on it. A ",(0,r.kt)("inlineCode",{parentName:"p"},"VariableMutation")," changes the value of a ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadRun"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable"),"s."),(0,r.kt)("p",null,"You can add a ",(0,r.kt)("inlineCode",{parentName:"p"},"VariableMutation")," at any point in your Thread Function by using tghe ",(0,r.kt)("inlineCode",{parentName:"p"},"WorkflowThread#mutate()")," method or function."),(0,r.kt)("h2",{id:"basic-structure"},"Basic Structure"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"WorkflowThread::Mutate()")," functions/methods take three arguments:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"WfRunVariable")," which is the LHS to mutate."),(0,r.kt)("li",{parentName:"ol"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"VariableMutationType")," which specifies which mutation to execute."),(0,r.kt)("li",{parentName:"ol"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"WfRunVariable"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"NodeOutput"),", Object/interface/struct, or primitive type to serve as the RHS for the mutation.")),(0,r.kt)("p",null,"The valid Mutation Types come from the ",(0,r.kt)("inlineCode",{parentName:"p"},"VariableMutationType")," enum and are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ASSIGN")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ADD")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SUBTRACT")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DIVIDE")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MULTIPLY")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EXTEND")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REMOVE_IF_PRESENT")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REMOVE_KEY")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REMOVE_INDEX"))),(0,r.kt)("p",null,"Refer to the ",(0,r.kt)("a",{parentName:"p",href:"/littlehorse/docs/concepts/variables"},"Concepts Documentation")," for a description of what each mutation type does."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Here are some examples of mutating variables inside a ",(0,r.kt)("inlineCode",{parentName:"p"},"WfSpec"),"."),(0,r.kt)("h3",{id:"hard-coded-literal-value"},"Hard-Coded Literal Value"),(0,r.kt)("p",null,"Let's assign our variable ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," to the hard-coded value of ",(0,r.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void threadFunction(WorkflowThread thread) {\n    WfRunVariable foo = thread.addVariable("foo", VariableType.INT);\n    // ... optionally execute some tasks\n    thread.mutate(foo, VariableMutationType.ASSIGN, 3);\n}\n'))),(0,r.kt)(o.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func someThreadFunction(thread *wflib.WorkflowThread) {\n    foo := thread.AddVariable("foo", model.VariableType_INT)\n    // ... optionally execute some tasks\n    thread.Mutate(foo, model.VariableMutationType_ASSIGN, 3)\n}\n'))),(0,r.kt)(o.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def thread_function(thread: WorkflowThread) -> None:\n    foo = thread.add_variable("foo", VariableType.INT)\n    # ... optionally execute some tasks\n    thread.mutate(foo, VariableMutationType.ASSIGN, 3)\n')))),(0,r.kt)("h3",{id:"using-a-nodeoutput"},"Using a ",(0,r.kt)("inlineCode",{parentName:"h3"},"NodeOutput")),(0,r.kt)("p",null,"Let's say we have a ",(0,r.kt)("inlineCode",{parentName:"p"},"TaskDef")," which returns an ",(0,r.kt)("inlineCode",{parentName:"p"},"INT")," value, and we want to add that value to our ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRunVariable"),". To do that, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"NodeOutput")," as the ",(0,r.kt)("inlineCode",{parentName:"p"},"RHS"),"."),(0,r.kt)("p",null,"This is analogous to the following pseudocode."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"int myInt = 1;\nmyInt += doTask1();\n")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void threadFunction(WorkflowThread thread) {\n    WfRunVariable foo = thread.addVariable("foo", 3);\n    NodeOutput intOutput = thread.execute("some-task-that-returns-int");\n    thread.mutate(foo, VariableMutationType.ADD, intOutput);\n}\n'))),(0,r.kt)(o.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func someThreadFunction(thread *wflib.WorkflowThread) {\n    foo := thread.AddVariableWithDefault("foo", model.VariableType_INT, 1)\n    taskOutput := thread.Execute("some-task-that-returns-int")\n    thread.Mutate(foo, model.VariableMutationType_ADD, taskOutput)\n}\n'))),(0,r.kt)(o.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def thread_function(thread: WorkflowThread) -> None:\n    foo = thread.add_variable("foo", VariableType.INT, 3)\n    int_output = thread.execute("some-task-that-returns-int")\n    thread.mutate(foo, VariableMutationType.ADD, int_output)\n')))),(0,r.kt)("h3",{id:"using-other-wfrunvariables"},"Using other ",(0,r.kt)("inlineCode",{parentName:"h3"},"WfRunVariables")),(0,r.kt)("p",null,"We can also use another ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRunVariable")," as the ",(0,r.kt)("inlineCode",{parentName:"p"},"RHS"),". For example, if our ",(0,r.kt)("inlineCode",{parentName:"p"},"LHS")," is a ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON_ARR"),", we append a ",(0,r.kt)("inlineCode",{parentName:"p"},"STR")," variable to it as follows:"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void threadFunction(WorkflowThread thread) {\n    WfRunVariable strToAppend = thread.addVariable("string-to-append", VariableType.STR);\n    WfRunVariable myList = thread.addVariable("my-list", VariableType.JSON_ARR);\n\n    // ... execute some tasks\n\n    thread.mutate(myList, VariableMutationType.EXTEND, strToAppend);\n}\n'))),(0,r.kt)(o.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func someThreadFunction(thread *wflib.WorkflowThread) {\n    strToAppend := thread.AddVariable("string-to-append", model.VariableType_STR)\n    myList := thread.AddVariable("my-list", model.VariableType_JSON_ARR)\n\n    // ... execute a few tasks\n\n    thread.Mutate(myList, model.VariableMutationType_EXTEND, strToAppend)\n}\n'))),(0,r.kt)(o.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def thread_function(thread: WorkflowThread) -> None:\n    str_to_append = thread.add_variable("string-to-append", VariableType.STR)\n    my_list = thread.add_variable("my-list", VariableType.JSON_ARR)\n\n    # ... execute a few tasks\n\n    thread.mutate(my_list, VariableMutationType.EXTEND, str_to_append)\n')))),(0,r.kt)("h2",{id:"using-jsonpath"},"Using JsonPath"),(0,r.kt)("p",null,"Both ",(0,r.kt)("inlineCode",{parentName:"p"},"NodeOutput")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRunVariable")," have a ",(0,r.kt)("inlineCode",{parentName:"p"},"#jsonPath()")," method."),(0,r.kt)("p",null,"If your ",(0,r.kt)("inlineCode",{parentName:"p"},"LHS")," variable is of type ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON_ARR")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON_OBJ"),", you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRunVariable#jsonPath()")," to allow you to mutate a specific sub-field of your object or list. For eample, if I have a ",(0,r.kt)("inlineCode",{parentName:"p"},"my-var")," variable as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "foo": "bar",\n  "counter": 123\n}\n')),(0,r.kt)("p",null,"and I want to increment the ",(0,r.kt)("inlineCode",{parentName:"p"},"counter")," field, I can do so as follows:"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void threadFunction(WorkflowThread thread) {\n    WfRunVariable myVar = thread.addVariable("my-var", VariableType.JSON_OBJ);\n    // ... execute some tasks\n    thread.mutate(myVar.jsonPath("$.foo"), VariableMutationType.ADD, 1);\n}\n'))),(0,r.kt)(o.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func someThread(thread *wflib.WorkflowThread) {\n  myVar := thread.AddVariable("my-var", model.VariableType_JSON_OBJ)\n  fooPath := myVar.JsonPath("$.foo")\n  // ... execute some tasks\n  thread.Mutate(&fooPath, model.VariableMutationType_ADD, 1)\n}\n'))),(0,r.kt)(o.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def thread_function(thread: WorkflowThread) -> None:\n    my_var = thread.add_variable("my-var", VariableType.JSON_OBJ)\n    # ... execute some tasks\n    thread.mutate(my_var.with_json_path("$.foo"), VariableMutationType.ADD, 1)\n')))),(0,r.kt)("p",null,"You can also use ",(0,r.kt)("inlineCode",{parentName:"p"},".jsonPath()")," on the RHS to pick out a specific field of your ",(0,r.kt)("inlineCode",{parentName:"p"},"RHS")," value."))}h.isMDXComponent=!0}}]);