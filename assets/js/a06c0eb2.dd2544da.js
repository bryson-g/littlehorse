"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[1760],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>c});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(t),m=l,c=u["".concat(p,".").concat(m)]||u[m]||k[m]||i;return t?a.createElement(c,r(r({ref:n},d),{},{components:t})):a.createElement(c,r({ref:n},d))}));function c(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[u]="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8534:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>k,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=t(7462),l=(t(7294),t(3905));const i={sidebar_label:"LittleHorse CLI"},r="LittleHorse CLI",o={unversionedId:"developer-guide/lhctl",id:"developer-guide/lhctl",title:"LittleHorse CLI",description:"lhctl is the LittleHorse CLI. It allows you to manage metadata in your system, observe and analyze your WfRuns, and also perform rudimentary actions such as running a WfRun.",source:"@site/docs/05-developer-guide/03-lhctl.md",sourceDirName:"05-developer-guide",slug:"/developer-guide/lhctl",permalink:"/littlehorse/docs/developer-guide/lhctl",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"LittleHorse CLI"},sidebar:"tutorialSidebar",previous:{title:"Configuring the Clients",permalink:"/littlehorse/docs/developer-guide/client-configuration"},next:{title:"Developing Task Workers",permalink:"/littlehorse/docs/developer-guide/task-worker-development"}},p={},s=[{value:"Create Metadata",id:"create-metadata",level:2},{value:"View Objects",id:"view-objects",level:2},{value:"Common Notes",id:"common-notes",level:3},{value:"<code>WfSpec</code>",id:"wfspec",level:3},{value:"<code>WfRun</code>",id:"wfrun",level:3},{value:"Specific <code>WfSpec</code> Version",id:"specific-wfspec-version",level:4},{value:"By <code>wfSpecName</code> and <code>status</code>",id:"by-wfspecname-and-status",level:4},{value:"By <code>wfSpecName</code>",id:"by-wfspecname",level:4},{value:"By Time",id:"by-time",level:4},{value:"<code>NodeRun</code>",id:"noderun",level:3},{value:"<code>TaskDef</code> and <code>ExternalEventDef</code>",id:"taskdef-and-externaleventdef",level:3},{value:"<code>TaskRun</code>",id:"taskrun",level:3},{value:"<code>UserTaskRun</code>",id:"usertaskrun",level:3},{value:"<code>UserTaskDef</code>",id:"usertaskdef",level:3},{value:"<code>ExternalEvent</code>",id:"externalevent",level:3},{value:"<code>Variable</code>",id:"variable",level:3},{value:"Metrics",id:"metrics",level:3},{value:"Manage <code>WfRun</code>s",id:"manage-wfruns",level:2},{value:"Run a <code>WfRun</code>",id:"run-a-wfrun",level:3},{value:"Stop and Resume a <code>WfRun</code>",id:"stop-and-resume-a-wfrun",level:3},{value:"Post an <code>ExternalEvent</code>",id:"post-an-externalevent",level:3}],d={toc:s},u="wrapper";function k(e){let{components:n,...t}=e;return(0,l.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"littlehorse-cli"},"LittleHorse CLI"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"lhctl")," is the LittleHorse CLI. It allows you to manage metadata in your system, observe and analyze your ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun"),"s, and also perform rudimentary actions such as running a ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun"),"."),(0,l.kt)("h2",{id:"create-metadata"},"Create Metadata"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"lhctl deploy")," command allows you to create metadata such as ",(0,l.kt)("inlineCode",{parentName:"p"},"WfSpec"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskDef"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"UserTaskDef"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"ExternalEventDef"),"."),(0,l.kt)("p",null,"The syntax of the command is as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl deploy {wfSpec,taskDef,externalEventDef} <file>\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"<file>")," parameter is expected to be a JSON-formatted printout of the corresponding protobuf. If your file is in the binary form, you can deploy using the ",(0,l.kt)("inlineCode",{parentName:"p"},"--proto")," flag."),(0,l.kt)("p",null,"The following creates a simple ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskDef"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'-> cat <<EOF > /tmp/taskDef.json\n{\n    "name": "my-task",\n    "inputVars": [{\n        "type": "STR",\n        "name": "my-input-var"\n    }]\n}\n\n-> lhctl deploy taskDef /tmp/taskDef.json\n{\n  "code":  "OK",\n  "result":  {\n    "name":  "my-task",\n    "inputVars":  [\n      {\n        "type":  "STR",\n        "name":  "my-input-var",\n        "required":  false\n      }\n    ],\n    "createdAt":  "2023-04-18T18:54:23.263Z"\n  }\n}\n\n')),(0,l.kt)("p",null,"The same syntax can be used for creating ",(0,l.kt)("inlineCode",{parentName:"p"},"WfSpec"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"UserTaskDef"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"ExternalEventDef")," objects."),(0,l.kt)("h2",{id:"view-objects"},"View Objects"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"lhctl get")," command allows you to inspect the state of an API Object; ",(0,l.kt)("inlineCode",{parentName:"p"},"lhctl search")," allows you to find the ID's of API Object which match certain criteria; and ",(0,l.kt)("inlineCode",{parentName:"p"},"lhctl list")," allows you to retrieve multiple API Objects at one time."),(0,l.kt)("p",null,"The following sections describe how to interact with each type of API Object."),(0,l.kt)("h3",{id:"common-notes"},"Common Notes"),(0,l.kt)("p",null,"In ",(0,l.kt)("inlineCode",{parentName:"p"},"lhctl search"),", there are two global flags:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bookmark")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"limit"))),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"limit")," flag is quite self-explanatory as it simply limits the number of results for a request."),(0,l.kt)("p",null,"All ",(0,l.kt)("inlineCode",{parentName:"p"},"lhctl search")," responses have an optional ",(0,l.kt)("inlineCode",{parentName:"p"},"bookmark")," field, which is a base64-encoded pagination token. If all results that match the search have been returned, then no ",(0,l.kt)("inlineCode",{parentName:"p"},"bookmark")," is provided. Otherwise, if you wish to retrieve more results starting from where you left off, just pass in the provided ",(0,l.kt)("inlineCode",{parentName:"p"},"bookmark")," by copying and pasting the base64-encoded data."),(0,l.kt)("h3",{id:"wfspec"},(0,l.kt)("inlineCode",{parentName:"h3"},"WfSpec")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"WfSpec"),"s are versioned objects, meaning that their ID comprises a ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," and a ",(0,l.kt)("inlineCode",{parentName:"p"},"version"),". When a new ",(0,l.kt)("inlineCode",{parentName:"p"},"WfSpec")," is created with the same ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," as an older one, it gets an incremented ",(0,l.kt)("inlineCode",{parentName:"p"},"version")," number and lives in the API as its own separate object."),(0,l.kt)("p",null,"You can retrieve the latest ",(0,l.kt)("inlineCode",{parentName:"p"},"WfSpec")," named ",(0,l.kt)("inlineCode",{parentName:"p"},"foo")," by doing:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl get wfSpec foo\n")),(0,l.kt)("p",null,"You can retrieve a list of all ",(0,l.kt)("inlineCode",{parentName:"p"},"WfSpec"),"s named ",(0,l.kt)("inlineCode",{parentName:"p"},"foo")," by doing:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'-> lhctl search wfSpec --name foo\n{\n  "results":  [\n    {\n      "name":  "foo",\n      "version":  0\n    },\n    {\n      "name":  "foo",\n      "version":  1\n    }\n  ],\n}\n')),(0,l.kt)("p",null,"To get an old version (eg. ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),") of a ",(0,l.kt)("inlineCode",{parentName:"p"},"WfSpec")," named ",(0,l.kt)("inlineCode",{parentName:"p"},"foo"),", you can:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl get wfSpec foo --v 0\n")),(0,l.kt)("h3",{id:"wfrun"},(0,l.kt)("inlineCode",{parentName:"h3"},"WfRun")),(0,l.kt)("p",null,"To get a ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun")," with id ",(0,l.kt)("inlineCode",{parentName:"p"},"<my-wf-id>")," you can:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl get wfRun <my-wf-id>\n")),(0,l.kt)("h4",{id:"specific-wfspec-version"},"Specific ",(0,l.kt)("inlineCode",{parentName:"h4"},"WfSpec")," Version"),(0,l.kt)("p",null,"You can search for ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun"),"s by providing the name and version of the ",(0,l.kt)("inlineCode",{parentName:"p"},"WfSpec")," and the status of the ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun"),". For example, if you want to find all failed ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun"),"'s from the ",(0,l.kt)("inlineCode",{parentName:"p"},"foo")," WfSpec, version ",(0,l.kt)("inlineCode",{parentName:"p"},"9"),", you would do the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl search wfRun --wfSpecName foo --wfSpecVersion 9 --status ERROR\n")),(0,l.kt)("h4",{id:"by-wfspecname-and-status"},"By ",(0,l.kt)("inlineCode",{parentName:"h4"},"wfSpecName")," and ",(0,l.kt)("inlineCode",{parentName:"h4"},"status")),(0,l.kt)("p",null,"You can search for ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun"),"s by providing the name of the ",(0,l.kt)("inlineCode",{parentName:"p"},"WfSpec")," and the ",(0,l.kt)("inlineCode",{parentName:"p"},"status")," of the ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun"),". This retrieves results from all versions of the ",(0,l.kt)("inlineCode",{parentName:"p"},"WfSpec"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl search wfRun --wfSpecName foo --status ERROR\n")),(0,l.kt)("h4",{id:"by-wfspecname"},"By ",(0,l.kt)("inlineCode",{parentName:"h4"},"wfSpecName")),(0,l.kt)("p",null,"If you only specify ",(0,l.kt)("inlineCode",{parentName:"p"},"--wfSpecName"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun"),"s with any status and any version of the provided ",(0,l.kt)("inlineCode",{parentName:"p"},"WfSpec")," are returned:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl search wfRun --wfSpecName foo\n")),(0,l.kt)("h4",{id:"by-time"},"By Time"),(0,l.kt)("p",null,"Every flavor of ",(0,l.kt)("inlineCode",{parentName:"p"},"lhctl search wfRun")," shown above also allows you to filter based on the ",(0,l.kt)("em",{parentName:"p"},"time that the ",(0,l.kt)("inlineCode",{parentName:"em"},"WfRun")," was launched")," via the following options:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--earliestMinutesAgo"),": Only show ",(0,l.kt)("inlineCode",{parentName:"li"},"WfRun"),"s more recent than this configuration."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--latestMinutesAgo"),": only show ",(0,l.kt)("inlineCode",{parentName:"li"},"WfRun"),"'s less recent than this configuration.")),(0,l.kt)("p",null,"For example, to find all workflows started between 10 and 15 minutes ago that are in the ",(0,l.kt)("inlineCode",{parentName:"p"},"COMPLETED")," state, we would do:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl search wfRun --wfSpecName foo --status COMPLETED --earliestMinutesAgo 15 --latestMinutesAgo 10\n")),(0,l.kt)("h3",{id:"noderun"},(0,l.kt)("inlineCode",{parentName:"h3"},"NodeRun")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"NodeRun")," has a composite ID consisting of the ",(0,l.kt)("inlineCode",{parentName:"p"},"wfRunId"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"threadRunNumber"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"position"),"."),(0,l.kt)("p",null,"To get all NodeRun associated to an specific WfRun:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl list nodeRun <wfRunId>\n")),(0,l.kt)("p",null,"Get an simplified response as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl search nodeRun --wfRunId <my-wf-id>\n")),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"lhctl get nodeRun")," to find an specific NodeRun, The syntax for this is as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl get nodeRun <wfRunId> <threadRunNumber> <position>\n")),(0,l.kt)("p",null,"To get the second (zero-indexed) ",(0,l.kt)("inlineCode",{parentName:"p"},"NodeRun")," for the entrypoint thread (Thread Run ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),") of the ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun")," with id ",(0,l.kt)("inlineCode",{parentName:"p"},"123foo"),", you can:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl get nodeRun 123foo 0 2\n")),(0,l.kt)("h3",{id:"taskdef-and-externaleventdef"},(0,l.kt)("inlineCode",{parentName:"h3"},"TaskDef")," and ",(0,l.kt)("inlineCode",{parentName:"h3"},"ExternalEventDef")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"lhctl")," syntax for ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskDef")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"ExternalEventDef")," is identical. You can get a specific ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskDef")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"ExternalEventDef")," by its ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," using:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl get taskDef <name>\n")),(0,l.kt)("p",null,"You can list all ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskDef"),"s or ",(0,l.kt)("inlineCode",{parentName:"p"},"ExternalEventDef"),"s as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl search externalEventDef\n")),(0,l.kt)("p",null,"You can search ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskDef"),"s and ",(0,l.kt)("inlineCode",{parentName:"p"},"ExternalEventDef"),"s with prefixes as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl search taskDef --prefix some-pref\n")),(0,l.kt)("h3",{id:"taskrun"},(0,l.kt)("inlineCode",{parentName:"h3"},"TaskRun")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskRun")," is a running instance of a Task in LittleHorse. A ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskRun")," is associated with a ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskDef"),"."),(0,l.kt)("p",null,"To retrieve all ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskRun"),"'s associated with a ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskDef"),", use the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl search taskRun --taskDefName <TaskDefName>\n")),(0,l.kt)("p",null,"You can also filter ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskRun"),"s by specifying a particular ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskRun")," status:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl search taskRun --taskDefName <TaskDefName> --status <TaskRunStatus>\n")),(0,l.kt)("p",null,"Possible values for the status parameter are as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TASK_SCHEDULED")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TASK_RUNNING")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TASK_SUCCESS")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TASK_FAILED")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TASK_TIMEOUT")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TASK_OUTPUT_SERIALIZING_ERROR")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TASK_INPUT_VAR_SUB_ERROR"))),(0,l.kt)("p",null,"Just like ",(0,l.kt)("inlineCode",{parentName:"p"},"lhctl search wfRun"),", each flavor of ",(0,l.kt)("inlineCode",{parentName:"p"},"lhctl search taskRun")," shown above also allows you to filter based on the ",(0,l.kt)("em",{parentName:"p"},"time that the ",(0,l.kt)("inlineCode",{parentName:"em"},"taskRun")," was scheduled")," via the following options:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--earliestMinutesAgo"),": Only show ",(0,l.kt)("inlineCode",{parentName:"li"},"TaskRun"),"s more recent than this configuration."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--latestMinutesAgo"),": only show ",(0,l.kt)("inlineCode",{parentName:"li"},"TaskRun"),"'s less recent than this configuration.")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskRun")," has a composite id consisting of the ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," of its ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun"),", and a ",(0,l.kt)("inlineCode",{parentName:"p"},"taskGuid"),". To get a ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskRun"),", you can use:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl get taskRun <wfRunId> <taskGuid>\n\n# This is equivalent:\nlhctl get taskRun <wfRunId>/<taskGuid>\n")),(0,l.kt)("h3",{id:"usertaskrun"},(0,l.kt)("inlineCode",{parentName:"h3"},"UserTaskRun")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"UserTaskRun")," is an instance of a ",(0,l.kt)("inlineCode",{parentName:"p"},"UserTaskDef")," in LittleHorse, in which a human is assigned a Task and the ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun")," blocks until that Task is completed. The ID of a ",(0,l.kt)("inlineCode",{parentName:"p"},"UserTaskRun")," is a composite ID consisting of the ID of the ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun")," and a Guid."),(0,l.kt)("p",null,"To get a ",(0,l.kt)("inlineCode",{parentName:"p"},"UserTaskRun"),", you can run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl get userTaskRun <wfRunId> <userTaskGuid>\n")),(0,l.kt)("p",null,"You can search for ",(0,l.kt)("inlineCode",{parentName:"p"},"UserTaskRun"),"'s with multiple combinations of flags. Supported flags for a ",(0,l.kt)("inlineCode",{parentName:"p"},"UserTaskRun")," search are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--earliestMinutesAgo")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--latestMinutesAgo")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--userTaskStatus"),", which is the status of the ",(0,l.kt)("inlineCode",{parentName:"li"},"UserTaskRun"),". Valid values are:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"UNASSIGNED")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ASSIGNED")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DONE")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"CANCELLED")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--userId"),", or the ID of the User to whom the Task is assigned."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--userGroup"),", or the ID of the User Group to whom the Task is assigned."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--userTaskDefName"),", or the name of the ",(0,l.kt)("inlineCode",{parentName:"li"},"UserTaskDef")," that the Task comes from.")),(0,l.kt)("h3",{id:"usertaskdef"},(0,l.kt)("inlineCode",{parentName:"h3"},"UserTaskDef")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"UserTaskDef")," is equivalent to a ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskDef")," but for ",(0,l.kt)("inlineCode",{parentName:"p"},"UserTaskRun"),"s instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskRun"),"s. To find all ",(0,l.kt)("inlineCode",{parentName:"p"},"UserTaskDef"),"s, you can:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl search userTaskDef\n\n# By Prefix\nlhctl search userTaskDef --prefix some-prefix-\n")),(0,l.kt)("p",null,"You can get a ",(0,l.kt)("inlineCode",{parentName:"p"},"userTaskDef")," as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl get userTaskDef my-user-task-def\n\n# optionally specify version. If version not set, defaults to latest.\nlhctl get userTaskDef my-user-task-def --v 2\n")),(0,l.kt)("p",null,"You can delete a ",(0,l.kt)("inlineCode",{parentName:"p"},"UserTaskDef")," as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl delete userTaskDef my-user-task-def 2  # version is required\n")),(0,l.kt)("h3",{id:"externalevent"},(0,l.kt)("inlineCode",{parentName:"h3"},"ExternalEvent")),(0,l.kt)("p",null,"An ",(0,l.kt)("inlineCode",{parentName:"p"},"ExternalEvent")," has a composite ID consisting of:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The associated ",(0,l.kt)("inlineCode",{parentName:"li"},"wfRunId"),"."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"name")," of the ",(0,l.kt)("inlineCode",{parentName:"li"},"ExternalEventDef"),"."),(0,l.kt)("li",{parentName:"ul"},"A unique ",(0,l.kt)("inlineCode",{parentName:"li"},"guid")," for that ",(0,l.kt)("inlineCode",{parentName:"li"},"ExternalEvent")," instance.")),(0,l.kt)("p",null,"To get an ",(0,l.kt)("inlineCode",{parentName:"p"},"ExternalEvent"),", you can:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl search externalEvent <wfRunId> <externalEventDefName> <guid>\n")),(0,l.kt)("p",null,"You can list all ",(0,l.kt)("inlineCode",{parentName:"p"},"ExternalEvent"),"s for a given ",(0,l.kt)("inlineCode",{parentName:"p"},"wfRunId")," via the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl search externalEvent --wfRunId <wfRunId>\n")),(0,l.kt)("h3",{id:"variable"},(0,l.kt)("inlineCode",{parentName:"h3"},"Variable")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"Variable")," has a composite ID consisting of:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The associated ",(0,l.kt)("inlineCode",{parentName:"li"},"wfRunId"),"."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"threadRunNumber")," of the owning ThreadRun."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"name")," of the Variable.")),(0,l.kt)("p",null,"You can get a specific variable via:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl get variable <wfRunId> <threadRunNumber> <name>\n")),(0,l.kt)("p",null,"You can list all ",(0,l.kt)("inlineCode",{parentName:"p"},"Variable"),"s for a given ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun")," via:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl search variable --wfRunId <wfRunId>\n")),(0,l.kt)("p",null,"You can search for ",(0,l.kt)("inlineCode",{parentName:"p"},"Variable"),"s with a certain value (not supported for ",(0,l.kt)("inlineCode",{parentName:"p"},"JSON_OBJ"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"BYTES"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"JSON_ARR")," variables). You must pass in the Variable ",(0,l.kt)("inlineCode",{parentName:"p"},"name"),", the type, and the value. For example, to search for ",(0,l.kt)("inlineCode",{parentName:"p"},"email-address")," variable's with the value ",(0,l.kt)("inlineCode",{parentName:"p"},"foo@bar.com"),", you would:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl search variable --varType STR --value 'foo@bar.com' --name email-address\n")),(0,l.kt)("p",null,"Supported variable types for searching are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"STR")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"INT")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DOUBLE")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"BOOL"))),(0,l.kt)("h3",{id:"metrics"},"Metrics"),(0,l.kt)("p",null,"The LittleHorse CLI lets you view metrics in a rudimentary manner. It is recommended to use the Admin Dashboard to better visualize these metrics; however, you can still view metrics through the CLI."),(0,l.kt)("p",null,'LittleHorse exposes two types of metrics: "Task Metrics", which are aggregated by ',(0,l.kt)("inlineCode",{parentName:"p"},"TaskDef"),', and "Workflow Metrics", which are aggregated by ',(0,l.kt)("inlineCode",{parentName:"p"},"WfSpec"),"."),(0,l.kt)("p",null,"Metrics are collected and aggregated on tumbling time windows. There are three sizes of windows which you can use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"MINUTES_5"),","),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"HOURS_2"),", and"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DAYS_1"),".")),(0,l.kt)("p",null,"To get the last 10 windows of size ",(0,l.kt)("inlineCode",{parentName:"p"},"MINUTES_5")," of metrics for the ",(0,l.kt)("inlineCode",{parentName:"p"},"foo-task")," TaskDef, you can:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl taskDefMetrics foo-task MINUTES_5 10\n")),(0,l.kt)("p",null,"To get the last 5 windows of size ",(0,l.kt)("inlineCode",{parentName:"p"},"DAYS_1")," for the second version of the ",(0,l.kt)("inlineCode",{parentName:"p"},"foo-wf")," WfSpec, you can:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl wfSpecMetrics foo-wf 2 DAYS_1 5\n")),(0,l.kt)("h2",{id:"manage-wfruns"},"Manage ",(0,l.kt)("inlineCode",{parentName:"h2"},"WfRun"),"s"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"lhctl")," allows you to perform basic actions around running, stopping, and resuming ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun"),"s and also creating ",(0,l.kt)("inlineCode",{parentName:"p"},"ExternalEvent"),"s."),(0,l.kt)("h3",{id:"run-a-wfrun"},"Run a ",(0,l.kt)("inlineCode",{parentName:"h3"},"WfRun")),(0,l.kt)("p",null,"You can run a ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun")," using the ",(0,l.kt)("inlineCode",{parentName:"p"},"lhctl run")," command. The syntax is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl run <wfSpecName> ...args\n")),(0,l.kt)("p",null,"All positional arguments after the WfSpec Name are interpreted as pairs of\n{Variable Name, Variable Value}. The variable values are intelligently deserialized\nto their appropriate types; for example, if var 'foo' is of type 'JSON_OBJ', then\nthe argument '{\"bar\":\"baz\"}' will be unmarshalled as a JSON object."),(0,l.kt)("p",null,'To run the "my-workflow" ',(0,l.kt)("inlineCode",{parentName:"p"},"WfSpec")," with two input parameters,"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"foo")," set to the Json Object ",(0,l.kt)("inlineCode",{parentName:"li"},'{"bar":"baz"}')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"my-int")," set to ",(0,l.kt)("inlineCode",{parentName:"li"},"123"))),(0,l.kt)("p",null,"you can:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'lhctl run my-workflow foo \'{"bar":"baz"}\' my-int 123\n')),(0,l.kt)("p",null,"You can also set the ID of the ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun")," using the ",(0,l.kt)("inlineCode",{parentName:"p"},"--wfRunId")," flag. Note that there can only be one ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun")," with a given ID. This can be used to guarantee idempotence."),(0,l.kt)("h3",{id:"stop-and-resume-a-wfrun"},"Stop and Resume a ",(0,l.kt)("inlineCode",{parentName:"h3"},"WfRun")),(0,l.kt)("p",null,"You can use:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl stop wfRun <wfRunId>\n")),(0,l.kt)("p",null,"to stop a ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun"),", and then resume it with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl resume wfRun <wfRunId>\n")),(0,l.kt)("p",null,"You can optionally stop or resume a child thread (without affecting the entrypoint ThreadRun) by using the ",(0,l.kt)("inlineCode",{parentName:"p"},"--threadRunNumber")," argument."),(0,l.kt)("h3",{id:"post-an-externalevent"},"Post an ",(0,l.kt)("inlineCode",{parentName:"h3"},"ExternalEvent")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"lhctl postEvent")," allows you to post an ExternalEvent of a specified Event Type and Variable Type to a WfRun. Specifying the Variable Type for the external event is currently required as ExternalEventDef's currently do not carry Schema information (this will change in a future release). The payload is deserialized according to the type. JSON objects should be provided as\na string; BYTES objects should be b64-encoded."),(0,l.kt)("p",null,"To send an External Event of type ",(0,l.kt)("inlineCode",{parentName:"p"},"my-event")," with a String value ",(0,l.kt)("inlineCode",{parentName:"p"},'"my-event-content"')," to the ",(0,l.kt)("inlineCode",{parentName:"p"},"WfRun"),' given by id "my-wf-id", you can:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhctl postEvent my-wf-id my-event STR my-event-content\n")),(0,l.kt)("p",null,"As a refresher, the valid variable types in LittleHorse are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"STR"),(0,l.kt)("li",{parentName:"ul"},"INT"),(0,l.kt)("li",{parentName:"ul"},"DOUBLE"),(0,l.kt)("li",{parentName:"ul"},"BOOL"),(0,l.kt)("li",{parentName:"ul"},"JSON_OBJ"),(0,l.kt)("li",{parentName:"ul"},"JSON_ARR"),(0,l.kt)("li",{parentName:"ul"},"BYTES")),(0,l.kt)("p",null,"You can optionally specify the ",(0,l.kt)("inlineCode",{parentName:"p"},"--guid")," flag to guarantee idempotence of this request, as only one ",(0,l.kt)("inlineCode",{parentName:"p"},"ExternalEvent")," can exist with the same ",(0,l.kt)("inlineCode",{parentName:"p"},"guid"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wfRunId"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"externalEventDefName"),"."),(0,l.kt)("p",null,"You can optionally assign the ",(0,l.kt)("inlineCode",{parentName:"p"},"ExternalEvent")," to a specific ",(0,l.kt)("inlineCode",{parentName:"p"},"NodeRun")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"ThreadRun")," using the ",(0,l.kt)("inlineCode",{parentName:"p"},"--nodeRunPosition")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"--threadRunNumber")," flags, respectively. The ",(0,l.kt)("inlineCode",{parentName:"p"},"--nodeRunPosition")," flag is only valid if the ",(0,l.kt)("inlineCode",{parentName:"p"},"--threadRunNumber")," flag is also set."))}k.isMDXComponent=!0}}]);