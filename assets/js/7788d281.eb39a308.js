"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[9475],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},s="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),s=d(t),u=r,m=s["".concat(l,".").concat(u)]||s[u]||h[u]||i;return t?a.createElement(m,o(o({ref:n},c),{},{components:t})):a.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[s]="string"==typeof e?e:r,o[1]=p;for(var d=2;d<i;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3104:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var a=t(7462),r=(t(7294),t(3905));const i={},o="Child Threads",p={unversionedId:"concepts/child-threads",id:"concepts/child-threads",title:"Child Threads",description:"As discussed in the WfRun documentation, a WfRun can have multiple ThreadRuns. The main thread is called the Entrypoint Thread, and all other threads are children (or grandchildren) of the entrypoint.",source:"@site/docs/04-concepts/08-child-threads.md",sourceDirName:"04-concepts",slug:"/concepts/child-threads",permalink:"/docs/concepts/child-threads",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Task Workers",permalink:"/docs/concepts/task-workers"},next:{title:"Conditional Branching",permalink:"/docs/concepts/conditionals"}},l={},d=[{value:"Entrypoint Thread",id:"entrypoint-thread",level:2},{value:"Thread Types",id:"thread-types",level:2},{value:"Variable Scoping",id:"variable-scoping",level:2}],c={toc:d},s="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(s,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"child-threads"},"Child Threads"),(0,r.kt)("p",null,"As discussed in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/concepts/workflows"},(0,r.kt)("inlineCode",{parentName:"a"},"WfRun")," documentation"),", a ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun")," can have multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadRun"),"s. The main thread is called the Entrypoint Thread, and all other threads are children (or grandchildren) of the entrypoint."),(0,r.kt)("h2",{id:"entrypoint-thread"},"Entrypoint Thread"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"WfSpec")," defines one or more ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadSpec"),"s, and the corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun")," has one or more ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadRun"),"s. Each ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadRun")," has a corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadSpec")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"WfSpec"),"."),(0,r.kt)("p",null,"In every ",(0,r.kt)("inlineCode",{parentName:"p"},"WfSpec"),", one ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadSpec")," is special: it is the ",(0,r.kt)("inlineCode",{parentName:"p"},"ENTRYPOINT")," thread. Similarly, each ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun")," has a special ",(0,r.kt)("inlineCode",{parentName:"p"},"ENTRYPOINT")," thread run."),(0,r.kt)("p",null,"When you run a ",(0,r.kt)("inlineCode",{parentName:"p"},"WfSpec")," (thereby creating a ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun"),"), the resulting ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun")," is created with one entrypoint ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadRun"),", which (as you guessed) is specified by the entrypoint ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadSpec")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"WfSpec"),"."),(0,r.kt)("h2",{id:"thread-types"},"Thread Types"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun")," may have multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadRun"),"s in it. ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadRun"),"s have four types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ENTRYPOINT")," threads, described above."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CHILD")," thread, created explicitly via a ",(0,r.kt)("inlineCode",{parentName:"li"},"SPAWN_THREAD")," node (in Java, for example, ",(0,r.kt)("inlineCode",{parentName:"li"},"WorkflowThread::spawnThread()"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"INTERRUPT")," thread, triggered by an External Event."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FAILURE_HANDLER")," threads, which are akin to exception handlers in programming.")),(0,r.kt)("p",null,"All ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadRun"),"s other than the entrypoint thread will have a ",(0,r.kt)("inlineCode",{parentName:"p"},"parentThreadId"),", referring to the thread that spawned it. In the case of an ",(0,r.kt)("inlineCode",{parentName:"p"},"INTERRUPT")," thread, the parent thread is the thread that was interrupted; in the case of a ",(0,r.kt)("inlineCode",{parentName:"p"},"FAILURE_HANDLER")," thread, the parent is the thread whose failure triggered the exception handler."),(0,r.kt)("h2",{id:"variable-scoping"},"Variable Scoping"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadSpec")," can define ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable"),"s (for example, through the ",(0,r.kt)("inlineCode",{parentName:"p"},"variableDefs")," field in the JSON spec, or ",(0,r.kt)("inlineCode",{parentName:"p"},"WorkflowThread::adVariable()")," in Java). When a ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadRun")," is created, all defined ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable"),"s are instantiated (either with input values or as ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),")."),(0,r.kt)("p",null,"When a child ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadRun")," of any type is started, it has ",(0,r.kt)("em",{parentName:"p"},"read and write")," access to its own ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable"),"s, and all ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable"),"s that its parent has access to (including the parent's parent, and so on)."),(0,r.kt)("p",null,"Since a ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadRun")," can have multiple children, the parent does ",(0,r.kt)("em",{parentName:"p"},"not")," have access to the variables of the children."))}h.isMDXComponent=!0}}]);