"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"LittleHorse Overview","href":"/littlehorse/docs/overview","docId":"overview"},{"type":"link","label":"Architecture and Guarantees","href":"/littlehorse/docs/architecture-and-guarantees","docId":"architecture-and-guarantees"},{"type":"category","label":"Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Workflows","href":"/littlehorse/docs/concepts/workflows","docId":"concepts/workflows"},{"type":"link","label":"Nodes","href":"/littlehorse/docs/concepts/nodes","docId":"concepts/nodes"},{"type":"link","label":"Tasks","href":"/littlehorse/docs/concepts/tasks","docId":"concepts/tasks"},{"type":"link","label":"External Events","href":"/littlehorse/docs/concepts/external-events","docId":"concepts/external-events"},{"type":"link","label":"User Tasks","href":"/littlehorse/docs/concepts/user-tasks","docId":"concepts/user-tasks"},{"type":"link","label":"Variables","href":"/littlehorse/docs/concepts/variables","docId":"concepts/variables"},{"type":"link","label":"Task Workers","href":"/littlehorse/docs/concepts/task-workers","docId":"concepts/task-workers"},{"type":"link","label":"Child Threads","href":"/littlehorse/docs/concepts/child-threads","docId":"concepts/child-threads"},{"type":"link","label":"Conditional Branching","href":"/littlehorse/docs/concepts/conditionals","docId":"concepts/conditionals"},{"type":"link","label":"Exception Handling","href":"/littlehorse/docs/concepts/exception-handling","docId":"concepts/exception-handling"},{"type":"link","label":"Interrupts","href":"/littlehorse/docs/concepts/interrupts","docId":"concepts/interrupts"},{"type":"link","label":"Sleeping","href":"/littlehorse/docs/concepts/sleeping","docId":"concepts/sleeping"}],"href":"/littlehorse/docs/concepts/"},{"type":"category","label":"Developer Guide","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Quickstart Installation","href":"/littlehorse/docs/developer-guide/install","docId":"developer-guide/install"},{"type":"link","label":"Configuring the Clients","href":"/littlehorse/docs/developer-guide/client-configuration","docId":"developer-guide/client-configuration"},{"type":"link","label":"LittleHorse CLI","href":"/littlehorse/docs/developer-guide/lhctl","docId":"developer-guide/lhctl"},{"type":"link","label":"Developing Task Workers","href":"/littlehorse/docs/developer-guide/task-worker-development","docId":"developer-guide/task-worker-development"},{"type":"category","label":"WfSpec Development","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Basics","href":"/littlehorse/docs/developer-guide/wfspec-development/basics","docId":"developer-guide/wfspec-development/basics"},{"type":"link","label":"Conditionals and Loops","href":"/littlehorse/docs/developer-guide/wfspec-development/conditionals","docId":"developer-guide/wfspec-development/conditionals"},{"type":"link","label":"Mutating Variables","href":"/littlehorse/docs/developer-guide/wfspec-development/mutating-variables","docId":"developer-guide/wfspec-development/mutating-variables"},{"type":"link","label":"External Events","href":"/littlehorse/docs/developer-guide/wfspec-development/external-events","docId":"developer-guide/wfspec-development/external-events"},{"type":"link","label":"Interrupts","href":"/littlehorse/docs/developer-guide/wfspec-development/interrupts","docId":"developer-guide/wfspec-development/interrupts"},{"type":"link","label":"Exception Handling","href":"/littlehorse/docs/developer-guide/wfspec-development/exception-handling","docId":"developer-guide/wfspec-development/exception-handling"},{"type":"link","label":"Child Threads","href":"/littlehorse/docs/developer-guide/wfspec-development/child-threads","docId":"developer-guide/wfspec-development/child-threads"},{"type":"link","label":"User Tasks","href":"/littlehorse/docs/developer-guide/wfspec-development/user-tasks","docId":"developer-guide/wfspec-development/user-tasks"}],"href":"/littlehorse/docs/developer-guide/wfspec-development/"},{"type":"category","label":"Using the LittleHorse API","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Background","href":"/littlehorse/docs/developer-guide/grpc/basics","docId":"developer-guide/grpc/basics"},{"type":"link","label":"Managing Metadata","href":"/littlehorse/docs/developer-guide/grpc/managing-metadata","docId":"developer-guide/grpc/managing-metadata"},{"type":"link","label":"Running a Workflow","href":"/littlehorse/docs/developer-guide/grpc/running-workflows","docId":"developer-guide/grpc/running-workflows"},{"type":"link","label":"Posting ExternalEvents","href":"/littlehorse/docs/developer-guide/grpc/posting-external-events","docId":"developer-guide/grpc/posting-external-events"},{"type":"link","label":"Handling User Tasks","href":"/littlehorse/docs/developer-guide/grpc/user-tasks","docId":"developer-guide/grpc/user-tasks"}],"href":"/littlehorse/docs/developer-guide/grpc/"}],"href":"/littlehorse/docs/developer-guide/"},{"type":"category","label":"Operations","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Operations Overview","href":"/littlehorse/docs/operations/overview","docId":"operations/overview"},{"type":"link","label":"Server Configurations","href":"/littlehorse/docs/operations/server-configuration","docId":"operations/server-configuration"},{"type":"link","label":"Dashboard Configurations","href":"/littlehorse/docs/operations/dashboard-configuration","docId":"operations/dashboard-configuration"}],"href":"/littlehorse/docs/operations/"},{"type":"category","label":"LH Platform","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Install Operator","href":"/littlehorse/docs/platform/install-operator","docId":"platform/install-operator"},{"type":"link","label":"Quickstart Reference","href":"/littlehorse/docs/platform/lh-cluster-quickstart","docId":"platform/lh-cluster-quickstart"}],"href":"/littlehorse/docs/platform/"}]},"docs":{"architecture-and-guarantees":{"id":"architecture-and-guarantees","title":"Architecture and Guarantees","description":"LittleHorse is a horizontally scalable, high-performance system with enterprise-grade security integrations to help you build systems that support even the most mission-critical workloads.","sidebar":"tutorialSidebar"},"concepts/child-threads":{"id":"concepts/child-threads","title":"Child Threads","description":"As discussed in the WfRun documentation, a WfRun can have multiple ThreadRuns. The main thread is called the Entrypoint Thread, and all other threads are children (or grandchildren) of the entrypoint.","sidebar":"tutorialSidebar"},"concepts/concepts":{"id":"concepts/concepts","title":"Concepts","description":"A WfSpec in LittleHorse is a Protobuf that defines your technical or business process (it can also be representated in JSON). While the LittleHorse Server only understands the protobuf format of the WfSpec, the well-defined nature of the data format allowed LittleHorse to create SDK\'s in Java and GoLang that let you create WfSpecs from natural code. Since most of the LittleHorse concepts map nicely to programming concepts, this is a very natural and easy way to define your WfSpecs.","sidebar":"tutorialSidebar"},"concepts/conditionals":{"id":"concepts/conditionals","title":"Conditional Branching","description":"Just as if/else allows you to implement control flow in your programs, Conditional Branching allows you to add control flow to your LittleHorse Workflows.","sidebar":"tutorialSidebar"},"concepts/exception-handling":{"id":"concepts/exception-handling","title":"Exception Handling","description":"When things go wrong, LittleHorse has got you covered. That\'s where Failure Handling comes into play.","sidebar":"tutorialSidebar"},"concepts/external-events":{"id":"concepts/external-events","title":"ExternalEventDef and ExternalEvent","description":"In LittleHorse, an ExternalEventDef is a Metadata Object that defines some event or activity occuring outside of the LittleHorse WfRun. An ExternalEvent is an Execution Object that represents the occurrence of such an event. Common use-cases for an External Event would be encapsulating a webhook from github when a new branch is pushed, or representing an event from DocuSign that is fired when a document is completed.","sidebar":"tutorialSidebar"},"concepts/interrupts":{"id":"concepts/interrupts","title":"Interrupts","description":"In C and C++, you can register a handler function to handle an OS signal: when the signal is caught, the program gets interrupted and the interrupt handler is executed.","sidebar":"tutorialSidebar"},"concepts/nodes":{"id":"concepts/nodes","title":"Node and NodeRun","description":"The LittleHorse Workflow SDK\'s abstract away most of the details of Nodes and NodeRuns; however, the curious reader will find this information quite interesting. If you just want to get started, you could skip this section and read the examples in the developer guide.","sidebar":"tutorialSidebar"},"concepts/sleeping":{"id":"concepts/sleeping","title":"Sleeping","description":"You can make a ThreadRun go to sleep for a period of time by using a SLEEP Node. This Node type has no output, and simply holds a ThreadRun in place until the time expires.","sidebar":"tutorialSidebar"},"concepts/task-workers":{"id":"concepts/task-workers","title":"Task Worker","description":"A Task Worker is a program written by a LittleHorse user that connects to the LH Server, polls for ScheduledTasks to execute, executes the Tasks, and returns the result to LittleHorse. Task Workers can be easily developed using the Task Worker SDK\'s in Java, GoLang, and Python (support for C# coming soon).","sidebar":"tutorialSidebar"},"concepts/tasks":{"id":"concepts/tasks","title":"TaskDef and TaskRun","description":"The execution of work is fundamental to any Workflow engine. A unit of work executed by a computer in LittleHorse is represented by the dual objects TaskDef and TaskRun.","sidebar":"tutorialSidebar"},"concepts/user-tasks":{"id":"concepts/user-tasks","title":"UserTaskDef and UserTaskRun","description":"The purpose of a Workflow Engine is to coordinate processes that assign work. A TaskRun represents a unit of work assigned to a computer, but what about work assigned to a human? That\'s where User Tasks come in.","sidebar":"tutorialSidebar"},"concepts/variables":{"id":"concepts/variables","title":"VariableDef and Variable","description":"A Variable in LittleHorse serves the same purpose as a variable in programming","sidebar":"tutorialSidebar"},"concepts/workflows":{"id":"concepts/workflows","title":"WfSpec and WfRun","description":"In the LittleHorse API, there are two types of Objects:","sidebar":"tutorialSidebar"},"developer-guide/client-configuration":{"id":"developer-guide/client-configuration","title":"Configuring the Clients","description":"In every LittleHorse SDK, there is an LHConfig class or struct that handles the configuration required for allowing your clients and Task Workers to talk to LittleHorse Server.","sidebar":"tutorialSidebar"},"developer-guide/developer-guide":{"id":"developer-guide/developer-guide","title":"Developer Guide","description":"The LittleHorse Developer Guide tells you everything you need to know about LittleHorse from the Jedi Youngling level (installing clients, running the server) to the Jedi Master level (advanced WfSpec developmemnt, advanced security, etc).","sidebar":"tutorialSidebar"},"developer-guide/grpc/basics":{"id":"developer-guide/grpc/basics","title":"Background","description":"The public LittleHorse API is a GRPC service exposed by the LH Server. We plan to add auto-generated GRPC documentation soon (i.e. before the upcoming release of 1.0.0). In the meantime, you can find our service defined in our source code.","sidebar":"tutorialSidebar"},"developer-guide/grpc/grpc":{"id":"developer-guide/grpc/grpc","title":"Using the LittleHorse API","description":"The public API exposed by the LittleHorse Server is a GRPC server, defined here. We chose GRPC for multiple reasons, including:","sidebar":"tutorialSidebar"},"developer-guide/grpc/managing-metadata":{"id":"developer-guide/grpc/managing-metadata","title":"Managing Metadata","description":"Before you can run a WfRun, you need to create your WfSpec\'s! This guide shows you how to do that.","sidebar":"tutorialSidebar"},"developer-guide/grpc/posting-external-events":{"id":"developer-guide/grpc/posting-external-events","title":"Posting ExternalEvents","description":"You can post an ExternalEvent using the PutExternalEvent rpc call.","sidebar":"tutorialSidebar"},"developer-guide/grpc/running-workflows":{"id":"developer-guide/grpc/running-workflows","title":"Running a Workflow","description":"You can run a WfSpec, thus creating a WfRun, in two ways:","sidebar":"tutorialSidebar"},"developer-guide/grpc/user-tasks":{"id":"developer-guide/grpc/user-tasks","title":"Handling User Tasks","description":"User Tasks enable a ThreadRun to block until a human user provides some input into the workflow. Additionally, User Tasks have several useful hooks such as automatic reassignment, reminders, and auditing capabilities.","sidebar":"tutorialSidebar"},"developer-guide/install":{"id":"developer-guide/install","title":"Quickstart Installation","description":"The minimum to get started with LittleHorse is to install the lhctl CLI, run the server in docker, and use your choice of the Java, GoLang, or Python client libraries.","sidebar":"tutorialSidebar"},"developer-guide/lhctl":{"id":"developer-guide/lhctl","title":"LittleHorse CLI","description":"lhctl is the LittleHorse CLI. It allows you to manage metadata in your system, observe and analyze your WfRuns, and also perform rudimentary actions such as running a WfRun.","sidebar":"tutorialSidebar"},"developer-guide/task-worker-development":{"id":"developer-guide/task-worker-development","title":"Developing Task Workers","description":"Each LittleHorse SDK provides an LHTaskWorker object or struct which lets you turn an arbitrary function or method into a LittleHorse Task.","sidebar":"tutorialSidebar"},"developer-guide/wfspec-development/basics":{"id":"developer-guide/wfspec-development/basics","title":"Basics","description":"To develop a WfSpec in LittleHorse, you can use the Workflow struct or object in our SDK\'s. Generally, the Workflow entity constructor requires two arguments:","sidebar":"tutorialSidebar"},"developer-guide/wfspec-development/child-threads":{"id":"developer-guide/wfspec-development/child-threads","title":"Child Threads","description":"You can use WorkflowThread#spawnThread() and WorkflowThread#waitForThreads() to launch and wait for Child ThreadRuns, respectively. This is useful if you want to execute multiple pieces of business logic in parallel.","sidebar":"tutorialSidebar"},"developer-guide/wfspec-development/conditionals":{"id":"developer-guide/wfspec-development/conditionals","title":"Conditionals and Loops","description":"Conditional Branching is a control flow mechanismm in LittleHorse that is very similar to if/else in programming. It allows you to execute different branches of a WfSpec (like a program) depending on the values of your Variables.","sidebar":"tutorialSidebar"},"developer-guide/wfspec-development/exception-handling":{"id":"developer-guide/wfspec-development/exception-handling","title":"Exception Handling","description":"In LittleHorse, a Failure is analogous to an Exception in Programming.","sidebar":"tutorialSidebar"},"developer-guide/wfspec-development/external-events":{"id":"developer-guide/wfspec-development/external-events","title":"External Events","description":"You can use WorkflowThread#WaitForEvent() to add an EXTERNAL_EVENT Node that causes the WfRun to block until an ExternalEvent arrives. It\'s simple:","sidebar":"tutorialSidebar"},"developer-guide/wfspec-development/interrupts":{"id":"developer-guide/wfspec-development/interrupts","title":"Interrupts","description":"As per the Concepts Docs, you can set up a ThreadSpec such that when an ExternalEvent of a certain type comes in, the ThreadRun is interrupted and an Interrupt Handler ThreadRun is spawned.","sidebar":"tutorialSidebar"},"developer-guide/wfspec-development/mutating-variables":{"id":"developer-guide/wfspec-development/mutating-variables","title":"Mutating Variables","description":"Recall from the Concepts Documentation that every Node can have zero or more VariableMutations on it. A VariableMutation changes the value of a ThreadRun\'s Variables.","sidebar":"tutorialSidebar"},"developer-guide/wfspec-development/user-tasks":{"id":"developer-guide/wfspec-development/user-tasks","title":"User Tasks","description":"User Tasks allow you to manage tasks involving humans alongside standard computer tasks in your LittleHorse Workflow.","sidebar":"tutorialSidebar"},"developer-guide/wfspec-development/wfspec-development":{"id":"developer-guide/wfspec-development/wfspec-development","title":"WfSpec Development","description":"WfSpec development is stable in Java and Go, and it is in beta in python.","sidebar":"tutorialSidebar"},"operations/dashboard-configuration":{"id":"operations/dashboard-configuration","title":"Dashboard Configurations","description":"These configurations apply only to the public.ecr.aws/littlehorse/lh-dashboard docker image, and not when running the LH Dashboard compiled from source. We have an open ticket in our OSS repo to homologate the configurations and also improve the startup time of the lh-dashboard docker image.","sidebar":"tutorialSidebar"},"operations/operations":{"id":"operations/operations","title":"Operations","description":"LittleHorse OSS, which can be found on our GitHub, contains all of the LittleHorse functionality. It is an enterprise-ready workflow engine that can scale to the largest workloads while meeting the most strict security requirements when deployed on premise.","sidebar":"tutorialSidebar"},"operations/overview":{"id":"operations/overview","title":"Operations Overview","description":"A minimal LittleHorse cluster has the following components:","sidebar":"tutorialSidebar"},"operations/server-configuration":{"id":"operations/server-configuration","title":"Server Configurations","description":"This page contains all of the configurations that are accepted by the LittleHorse Server. We recommend that you set these configurations as environment variables for the public.ecr.aws/littlehorse/lh-server:0.7.0 image.","sidebar":"tutorialSidebar"},"overview":{"id":"overview","title":"LittleHorse Overview","description":"The LittleHorse Server is a high-performance platform for building workflow-driven applications for a variety of use-cases, including:","sidebar":"tutorialSidebar"},"platform/install-operator":{"id":"platform/install-operator","title":"Installing the LittleHorse Operator","description":"lh-operator needs to be installed in the same namespace as strimzi, for the strimze features to work","sidebar":"tutorialSidebar"},"platform/lh-cluster-quickstart":{"id":"platform/lh-cluster-quickstart","title":"Quickstart Reference","description":"This page assumes that you have already installed the operator into your kubernetes cluster. It is intended to provide a series of minimal examples that can get you started. Additional support is available from the LittleHorse team, and additional documentation is coming soon.","sidebar":"tutorialSidebar"},"platform/platform":{"id":"platform/platform","title":"LH Platform","description":"LittleHorse Platform is an enterprise-grade distribution of LittleHorse delivered through Kubernetes Operator into your own air-gapped environment.","sidebar":"tutorialSidebar"}}}')}}]);