"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[1858],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,m=c["".concat(l,".").concat(d)]||c[d]||k[d]||s;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2510:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>k,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={sidebar_label:"User Tasks"},i="UserTaskDef and UserTaskRun",o={unversionedId:"concepts/user-tasks",id:"concepts/user-tasks",title:"UserTaskDef and UserTaskRun",description:"The purpose of a Workflow Engine is to coordinate processes that assign work. A TaskRun represents a unit of work assigned to a computer, but what about work assigned to a human? That's where User Tasks come in.",source:"@site/docs/04-concepts/05-user-tasks.md",sourceDirName:"04-concepts",slug:"/concepts/user-tasks",permalink:"/littlehorse/docs/concepts/user-tasks",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"User Tasks"},sidebar:"tutorialSidebar",previous:{title:"External Events",permalink:"/littlehorse/docs/concepts/external-events"},next:{title:"Variables",permalink:"/littlehorse/docs/concepts/variables"}},l={},p=[{value:"Motivation",id:"motivation",level:2},{value:"<code>UserTaskDef</code>",id:"usertaskdef",level:2},{value:"<code>UserTaskRun</code>",id:"usertaskrun",level:2},{value:"<code>UserTaskRun</code> Lifecycle",id:"usertaskrun-lifecycle",level:2},{value:"<code>UserTaskRun</code> Completion",id:"usertaskrun-completion",level:2},{value:"Searching for <code>UserTaskRun</code>",id:"searching-for-usertaskrun",level:2},{value:"Lifecycle Hooks",id:"lifecycle-hooks",level:2}],u={toc:p},c="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usertaskdef-and-usertaskrun"},(0,r.kt)("inlineCode",{parentName:"h1"},"UserTaskDef")," and ",(0,r.kt)("inlineCode",{parentName:"h1"},"UserTaskRun")),(0,r.kt)("p",null,"The purpose of a Workflow Engine is to coordinate processes that assign work. A ",(0,r.kt)("inlineCode",{parentName:"p"},"TaskRun")," represents a unit of work assigned to a computer, but what about work assigned to a human? That's where User Tasks come in."),(0,r.kt)("h2",{id:"motivation"},"Motivation"),(0,r.kt)("p",null,"User tasks require the input, decision-making, or expertise of an actual person. Some common examples of user tasks include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Workflow Approvals:")," Processes in which a specific person or group of people must review and authorize a business transaction."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"KYC:")," Know-your-customer workflows in which a sales rep must input information about a customer (eg. billing information) before the business process can continue."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Data Input:")," Tasks involving filling out forms or providing specific information before the business process can continue."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Manual Calculations:")," Situations that require human intervention to perform calculations, analyses, or assessments that cannot be easily automated and wherein we can't trust Chat GPT \ud83d\ude09.")),(0,r.kt)("p",null,"You might ask, why not just use an ",(0,r.kt)("inlineCode",{parentName:"p"},"ExternalEvent"),"? Technically, it is possible to implement similar functionality using just ",(0,r.kt)("inlineCode",{parentName:"p"},"ExternalEvent"),"s rather than introducing a whole new concept into the API. The reason for this is that so many things about User Tasks are tied deeply into the logic of the ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun")," itself, including assignment, reassignment, cancelling, lifecycle, and even simply scheduling a User Task."),(0,r.kt)("p",null,"The addition of the User Tasks feature allows LittleHorse to seamlessly automate workflows spanning humans and computers across multiple departments within an organization and beyond."),(0,r.kt)("h2",{id:"usertaskdef"},(0,r.kt)("inlineCode",{parentName:"h2"},"UserTaskDef")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskDef")," is a Metadata Object defining a task that can be assigned to a human."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"A ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskDef")," does not include any information about ",(0,r.kt)("em",{parentName:"p"},"who")," should execute the task. User Task assignment is a property of the ",(0,r.kt)("inlineCode",{parentName:"p"},"USER_TASK")," ",(0,r.kt)("inlineCode",{parentName:"p"},"NODE")," and also of the ")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskDef")," consists of a series of fields, where each field has a name and a type. Currently, only primitieve types (",(0,r.kt)("inlineCode",{parentName:"p"},"INT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"STR"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"BOOL"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"DOUBLE"),") are supported for User Task fields."),(0,r.kt)("h2",{id:"usertaskrun"},(0,r.kt)("inlineCode",{parentName:"h2"},"UserTaskRun")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskRun")," is an instance of a ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskDef")," assigned to a human user or group of users. Just like a ",(0,r.kt)("inlineCode",{parentName:"p"},"TaskRun"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskRun")," is an object that can be retrieved from the LittleHorse API using ",(0,r.kt)("inlineCode",{parentName:"p"},"lhctl")," or the grpc clients."),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskRun")," can be assigned to either a specific user (by an arbitrary user id) or a group of users (by an arbitrary user group id). At creation time, ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskRun")," are assigned to the user id or group id that is specified in the ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskNode"),". User Tasks in LittleHorse support automatic reassignment, reminder ",(0,r.kt)("inlineCode",{parentName:"p"},"TaskRun"),"s, automatic cancellation after a configurable timeout, and are also searchable based on their owner."),(0,r.kt)("p",null,"Like ",(0,r.kt)("inlineCode",{parentName:"p"},"TaskRun"),"s, the output of the ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskRun")," is used as the output of the associated ",(0,r.kt)("inlineCode",{parentName:"p"},"NodeRun"),". In other words, the output of a ",(0,r.kt)("inlineCode",{parentName:"p"},"USER_TASK")," node is a Json Variable Value with a key for each field in the ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskDef"),"."),(0,r.kt)("h2",{id:"usertaskrun-lifecycle"},(0,r.kt)("inlineCode",{parentName:"h2"},"UserTaskRun")," Lifecycle"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskRun")," can be in any of the following statuses:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"UNASSIGNED"),", meaning that it isn't assigned to a specific user. If a ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskRun")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"UNASSIGNED"),", it is guaranteed to be associated with a ",(0,r.kt)("inlineCode",{parentName:"p"},"userGroup"),". ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ASSIGNED")," means that a task is assigned to a specific ",(0,r.kt)("inlineCode",{parentName:"p"},"userId"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskRun")," may or may not have a ",(0,r.kt)("inlineCode",{parentName:"p"},"userGroup"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"CANCELLED")," denotes that the ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskRun")," has been cancelled for some reason, either manually, due to timeout, or due to other conditions in the ",(0,r.kt)("inlineCode",{parentName:"p"},"WfRun"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"CANCELLED")," is currently a terminal state.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"DONE")," Once a user execute a user task, it moves to the terminal ",(0,r.kt)("inlineCode",{parentName:"p"},"DONE")," state. "))),(0,r.kt)("h2",{id:"usertaskrun-completion"},(0,r.kt)("inlineCode",{parentName:"h2"},"UserTaskRun")," Completion"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskRun")," only when it is assigned to a User. Then you can provide a value for each field and complete the UserTask, the resulting state will be ",(0,r.kt)("inlineCode",{parentName:"p"},"DONE"),". This can be done via lhctl or grpc client calls. "),(0,r.kt)("h2",{id:"searching-for-usertaskrun"},"Searching for ",(0,r.kt)("inlineCode",{parentName:"h2"},"UserTaskRun")),(0,r.kt)("p",null," There are several ways to look up for an specific ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskRun"),". You can use a combination of ",(0,r.kt)("inlineCode",{parentName:"p"},"userId"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"userGroupId"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"userTaskStatus")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"userTaskDefName"),". For these searches, you will receive a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskRunId"),"s for ",(0,r.kt)("inlineCode",{parentName:"p"},"UserTaskRun"),"s that match with these criteria."),(0,r.kt)("h2",{id:"lifecycle-hooks"},"Lifecycle Hooks"),(0,r.kt)("p",null,"You can trigger action when some hooks takes place. Currently LitteHorse supports:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ON_ARRIVAL"),", triggered when Workflow execution reaches the UserTaskNode. Useful when you need to send users reminders"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ON_TASK_ASSIGNED"),", triggered when the UserTaskRun is assigned to a user. Useful when you need schedule reasignment if the asignee does not execute this task.")))}k.isMDXComponent=!0}}]);