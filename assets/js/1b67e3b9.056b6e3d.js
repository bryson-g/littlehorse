"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[6337],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),m=s(a),h=i,k=m["".concat(p,".").concat(h)]||m[h]||u[h]||l;return a?n.createElement(k,o(o({ref:t},d),{},{components:a})):n.createElement(k,o({ref:t},d))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,o=new Array(l);o[0]=h;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[m]="string"==typeof e?e:i,o[1]=r;for(var s=2;s<l;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},6181:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var n=a(7462),i=(a(7294),a(3905));const l={sidebar_label:"Variables"},o="VariableDef and Variable",r={unversionedId:"concepts/variables",id:"concepts/variables",title:"VariableDef and Variable",description:"A Variable in LittleHorse serves the same purpose as a variable in programming",source:"@site/docs/04-concepts/06-variables.md",sourceDirName:"04-concepts",slug:"/concepts/variables",permalink:"/littlehorse/docs/concepts/variables",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"Variables"},sidebar:"tutorialSidebar",previous:{title:"User Tasks",permalink:"/littlehorse/docs/concepts/user-tasks"},next:{title:"Task Workers",permalink:"/littlehorse/docs/concepts/task-workers"}},p={},s=[{value:"In the API",id:"in-the-api",level:2},{value:"Variable Types",id:"variable-types",level:2},{value:"<code>INT</code>",id:"int",level:4},{value:"<code>DOUBLE</code>",id:"double",level:4},{value:"<code>STR</code>",id:"str",level:4},{value:"<code>BOOL</code>",id:"bool",level:4},{value:"<code>JSON_OBJ</code>",id:"json_obj",level:4},{value:"<code>JSON_ARR</code>",id:"json_arr",level:4},{value:"<code>BYTES</code>",id:"bytes",level:4},{value:"<code>NULL</code>",id:"null",level:4},{value:"Using Varibles",id:"using-varibles",level:2},{value:"Mutating Variables",id:"mutating-variables",level:2},{value:"Selecting the Variable to Mutate",id:"selecting-the-variable-to-mutate",level:3},{value:"Mutation Types",id:"mutation-types",level:3},{value:"<code>ASSIGN</code>",id:"assign",level:4},{value:"<code>ADD</code>",id:"add",level:4},{value:"<code>SUBTRACT</code>",id:"subtract",level:4},{value:"<code>EXTEND</code>",id:"extend",level:4},{value:"<code>DIVIDE</code>",id:"divide",level:4},{value:"<code>MULTIPLY</code>",id:"multiply",level:4},{value:"<code>REMOVE_IF_PRESENT</code>",id:"remove_if_present",level:4},{value:"<code>REMOVE_INDEX</code>",id:"remove_index",level:4},{value:"<code>REMOVE_KEY</code>",id:"remove_key",level:4},{value:"The Right-Hand-Side",id:"the-right-hand-side",level:3},{value:"Example (Java SDK)",id:"example-java-sdk",level:3}],d={toc:s},m="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"variabledef-and-variable"},(0,i.kt)("inlineCode",{parentName:"h1"},"VariableDef")," and ",(0,i.kt)("inlineCode",{parentName:"h1"},"Variable")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable")," in LittleHorse serves the same purpose as a variable in programming: it is a placeholder for a value that can be used in computation later. A ",(0,i.kt)("inlineCode",{parentName:"p"},"VariableDef")," in LittleHorse defines a ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"VariableDef"),"s are mainly used in two places:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To define input variables in a ",(0,i.kt)("inlineCode",{parentName:"li"},"TaskDef"),"."),(0,i.kt)("li",{parentName:"ul"},"To define variables used in a ",(0,i.kt)("inlineCode",{parentName:"li"},"ThreadSpec")," (part of a ",(0,i.kt)("inlineCode",{parentName:"li"},"WfSpec"),").")),(0,i.kt)("h2",{id:"in-the-api"},"In the API"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable")," is a searchable object in the LittleHorse API. It contains the name and value of a specific variable instance in a ",(0,i.kt)("inlineCode",{parentName:"p"},"ThreadRun"),"."),(0,i.kt)("p",null,"The `Variable has a composite ID defined as follows:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"wfRunId"),", which is the ID of the associated ",(0,i.kt)("inlineCode",{parentName:"li"},"WfRun"),"."),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"threadRunNumber"),", which is the ID of the associated ",(0,i.kt)("inlineCode",{parentName:"li"},"ThreadRun")," (since a ",(0,i.kt)("inlineCode",{parentName:"li"},"Variable")," lives within a specific ",(0,i.kt)("inlineCode",{parentName:"li"},"ThreadRun"),")."),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"name"),", which is the name of the ",(0,i.kt)("inlineCode",{parentName:"li"},"Variable"),".")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable")," object has a ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"type"),", and a ",(0,i.kt)("inlineCode",{parentName:"p"},"VariableValue"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Note that a ",(0,i.kt)("inlineCode",{parentName:"p"},"VariableDef")," in itself is not a get-able object in the LittleHorse API; it is a sub-structure of other objects (generally ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskDef")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"WfSpec"),").")),(0,i.kt)("h2",{id:"variable-types"},"Variable Types"),(0,i.kt)("p",null,"LittleHorse currently supports variables of the following types:"),(0,i.kt)("h4",{id:"int"},(0,i.kt)("inlineCode",{parentName:"h4"},"INT")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"INT")," variable type is stored as a 64-bit integer. The ",(0,i.kt)("inlineCode",{parentName:"p"},"INT")," can be cast to a ",(0,i.kt)("inlineCode",{parentName:"p"},"DOUBLE"),"."),(0,i.kt)("h4",{id:"double"},(0,i.kt)("inlineCode",{parentName:"h4"},"DOUBLE")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"DOUBLE")," variable type is a 64-bit floating point number. It can be cast to an ",(0,i.kt)("inlineCode",{parentName:"p"},"INT"),"."),(0,i.kt)("h4",{id:"str"},(0,i.kt)("inlineCode",{parentName:"h4"},"STR")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"STR")," variable type is stored as a String. ",(0,i.kt)("inlineCode",{parentName:"p"},"INT"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"DOUBLE"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"BOOL")," variables can be cast to a ",(0,i.kt)("inlineCode",{parentName:"p"},"STR"),"."),(0,i.kt)("h4",{id:"bool"},(0,i.kt)("inlineCode",{parentName:"h4"},"BOOL")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"BOOL")," is a simple boolean switch."),(0,i.kt)("h4",{id:"json_obj"},(0,i.kt)("inlineCode",{parentName:"h4"},"JSON_OBJ")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON_OBJ")," variable allows you to store complex objects in the JSON format. When using the Java and GoLang SDK's, the ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON_OBJ")," variable type is often used transparently to the user. For example, the Java Task Worker SDK can inspect your method signature and automatically deserialize an input variable into a POJO."),(0,i.kt)("h4",{id:"json_arr"},(0,i.kt)("inlineCode",{parentName:"h4"},"JSON_ARR")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON_ARR")," variable allows you to store collections of objects as a JSON array. The behavior is similar to the ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON_OBJ")," variable type."),(0,i.kt)("h4",{id:"bytes"},(0,i.kt)("inlineCode",{parentName:"h4"},"BYTES")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"BYTES")," variable type allows you to store an arbitrary byte string."),(0,i.kt)("h4",{id:"null"},(0,i.kt)("inlineCode",{parentName:"h4"},"NULL")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL")," variable type is used for ",(0,i.kt)("inlineCode",{parentName:"p"},"Node"),"s that have no output, and for ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable"),"s that have not yet been initialized (for example, if their value is not provided when starting the ",(0,i.kt)("inlineCode",{parentName:"p"},"ThreadRun"),")."),(0,i.kt)("h2",{id:"using-varibles"},"Using Varibles"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"VariableAssignment")," protobuf structure described in this section applies to the JSON ",(0,i.kt)("inlineCode",{parentName:"p"},"WfSpec")," specification. The SDK's (eg. Java, Go, Python) abstract away the ",(0,i.kt)("inlineCode",{parentName:"p"},"VariableAssignment")," when authoring a ",(0,i.kt)("inlineCode",{parentName:"p"},"WfSpec"),". Nevertheless, it is useful to understand how it works.")),(0,i.kt)("p",null,"Recall that a ",(0,i.kt)("inlineCode",{parentName:"p"},"TASK")," node takes in multiple input variables. In the raw JSON ",(0,i.kt)("inlineCode",{parentName:"p"},"WfSpec"),", you do this via what's called a ",(0,i.kt)("inlineCode",{parentName:"p"},"VariableAssignment"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"VariableAssignment")," is much the same as passing an argument to a function call in a programming language."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"VariableAssignment")," can specify the Variable Value to be used in one of the following three ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Pass in a literal value (eg. a ",(0,i.kt)("inlineCode",{parentName:"li"},"STR")," or an ",(0,i.kt)("inlineCode",{parentName:"li"},"INT"),")."),(0,i.kt)("li",{parentName:"ul"},"Use a value from a ",(0,i.kt)("inlineCode",{parentName:"li"},"Variable")," in your workflow."),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("inlineCode",{parentName:"li"},"format_string"),", which takes in a raw string and then a list of ",(0,i.kt)("inlineCode",{parentName:"li"},"VariableAssignment"),"s to fill in any parameters.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"VariableAssignment"),"s are used in several places, including:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Passing inputs to a ",(0,i.kt)("inlineCode",{parentName:"li"},"TASK")," node."),(0,i.kt)("li",{parentName:"ul"},"Acting as the left-hand-side and right-hand-side for conditional expressions."),(0,i.kt)("li",{parentName:"ul"},"Acting as the right-hand-side for variable mutations.")),(0,i.kt)("h2",{id:"mutating-variables"},"Mutating Variables"),(0,i.kt)("p",null,"Upon the completion of any ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeRun")," (no matter what type of ",(0,i.kt)("inlineCode",{parentName:"p"},"Node"),"), you may specify a list of Variable Mutations for LittleHorse to execute. A ",(0,i.kt)("inlineCode",{parentName:"p"},"VariableMutation")," requires the following information:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The name of the ",(0,i.kt)("inlineCode",{parentName:"li"},"Variable")," to mutate (LHS)."),(0,i.kt)("li",{parentName:"ul"},"The type of mutation."),(0,i.kt)("li",{parentName:"ul"},'The "right-hand-side" of the mutation (RHS).')),(0,i.kt)("p",null,"We will unpack each of those sections in more detail below."),(0,i.kt)("h3",{id:"selecting-the-variable-to-mutate"},"Selecting the Variable to Mutate"),(0,i.kt)("p",null,"This is relatively straight forward--you only need to provide the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable")," that you wish to mutate. The named variable could belong to a parent (or grandparent) ",(0,i.kt)("inlineCode",{parentName:"p"},"ThreadRun"),"; the effect is the same."),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON_OBJ")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON_ARR")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable"),"s, you can mutate a sub-object of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable")," by specifying a ",(0,i.kt)("inlineCode",{parentName:"p"},"jsonPath"),"."),(0,i.kt)("h3",{id:"mutation-types"},"Mutation Types"),(0,i.kt)("p",null,"Each Variable Type supports different sets of mutations. They are all listed below:"),(0,i.kt)("h4",{id:"assign"},(0,i.kt)("inlineCode",{parentName:"h4"},"ASSIGN")),(0,i.kt)("p",null,"This mutation simply copies the value of the RHS into the LHS ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable"),". It is supported for any Variable Type on the LHS, provided that the RHS type matches or can be cast to the type of the LHS."),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ASSIGN")," mutation to set a key in a ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON_OBJ")," variable by using a ",(0,i.kt)("inlineCode",{parentName:"p"},"jsonPath")," on the LHS, and you can likewise set a specific item of a ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON_ARR")," by using a ",(0,i.kt)("inlineCode",{parentName:"p"},"jsonPath")," on the LHS."),(0,i.kt)("h4",{id:"add"},(0,i.kt)("inlineCode",{parentName:"h4"},"ADD")),(0,i.kt)("p",null,"This mutation adds the RHS to the LHS. It is supported for ",(0,i.kt)("inlineCode",{parentName:"p"},"INT")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DOUBLE"),"."),(0,i.kt)("h4",{id:"subtract"},(0,i.kt)("inlineCode",{parentName:"h4"},"SUBTRACT")),(0,i.kt)("p",null,"This mutation subtracts the RHS from the LHS. It is supported for ",(0,i.kt)("inlineCode",{parentName:"p"},"INT")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DOUBLE"),"."),(0,i.kt)("h4",{id:"extend"},(0,i.kt)("inlineCode",{parentName:"h4"},"EXTEND")),(0,i.kt)("p",null,"This mutation is supported for the ",(0,i.kt)("inlineCode",{parentName:"p"},"STR")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON_ARR")," types. In the ",(0,i.kt)("inlineCode",{parentName:"p"},"STR"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"RHS")," is appended to the end of the ",(0,i.kt)("inlineCode",{parentName:"p"},"LHS"),"."),(0,i.kt)("p",null,"With a ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON_ARR"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"RHS")," (which can be any type) is appended to the end of the list."),(0,i.kt)("h4",{id:"divide"},(0,i.kt)("inlineCode",{parentName:"h4"},"DIVIDE")),(0,i.kt)("p",null,"This mutation divides the LHS by the RHS. It is supported for ",(0,i.kt)("inlineCode",{parentName:"p"},"INT")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DOUBLE"),"."),(0,i.kt)("h4",{id:"multiply"},(0,i.kt)("inlineCode",{parentName:"h4"},"MULTIPLY")),(0,i.kt)("p",null,"This mutation multiplies the LHS by the RHS. It is supported for ",(0,i.kt)("inlineCode",{parentName:"p"},"INT")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DOUBLE"),"."),(0,i.kt)("h4",{id:"remove_if_present"},(0,i.kt)("inlineCode",{parentName:"h4"},"REMOVE_IF_PRESENT")),(0,i.kt)("p",null,"This mutation applies only to the ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON_ARR")," LHS. It removes all occurrences of the ",(0,i.kt)("inlineCode",{parentName:"p"},"RHS")," (by equality) from the list."),(0,i.kt)("h4",{id:"remove_index"},(0,i.kt)("inlineCode",{parentName:"h4"},"REMOVE_INDEX")),(0,i.kt)("p",null,"This mutation applies only to the ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON_ARR")," LHS and an ",(0,i.kt)("inlineCode",{parentName:"p"},"INT")," RHS. It removes the object at the index specified by the RHS."),(0,i.kt)("h4",{id:"remove_key"},(0,i.kt)("inlineCode",{parentName:"h4"},"REMOVE_KEY")),(0,i.kt)("p",null,"THis mutation applies only to the ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON_OBJ")," LHS and a ",(0,i.kt)("inlineCode",{parentName:"p"},"STR")," RHS. It removes the specified key from the Json object."),(0,i.kt)("h3",{id:"the-right-hand-side"},"The Right-Hand-Side"),(0,i.kt)("p",null,'Each mutation type is a "verb" which requires a right-hand-side "object".'),(0,i.kt)("p",null,"The right-hand-side is simply another ",(0,i.kt)("inlineCode",{parentName:"p"},"VariableAssignment"),": it can be just a literal value, or it can refer to another ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable")," in the workflow."),(0,i.kt)("h3",{id:"example-java-sdk"},"Example (Java SDK)"),(0,i.kt)("p",null,"While this page is intended to be conceptual, the concepts become much clear with an example. In Java, here is how to mutate a sub-field of a ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON_OBJ")," variable. Let's say the json structure looks like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n    "foo": 1,\n    "bar": "baz"\n}\n')),(0,i.kt)("p",null,"If we wanted to mutate the ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable")," by adding 2 to the ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," field, we would do so as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'WFRunVariable myVar = wf.addVariable("my-var", VariableTypePb.JSON_OBJ);\n\n// omitted: execute some tasks\n\nwf.mutate(\n    myVar.jsonPath("$.foo"),\n    VariableMutationTypePb.ADD,\n    2\n)\n')),(0,i.kt)("p",null,"Future versions of LittleHorse will allow you to optionally provide schemas for your ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable"),"s so as to validate mutations at ",(0,i.kt)("inlineCode",{parentName:"p"},"WfSpec")," compile-time rather than at ",(0,i.kt)("inlineCode",{parentName:"p"},"WfRun")," run-time."))}u.isMDXComponent=!0}}]);